{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\ud83e\udd8a Xplique (pronounced \\\u025bks.plik\\) is a Python toolkit dedicated to explainability. The goal of this library is to gather the state of the art of Explainable AI to help you understand your complex neural network models. Originally built for Tensorflow's model it also works for PyTorch models partially.     \ud83d\udcd8 Explore Xplique docs     |     Explore Xplique tutorials \ud83d\udd25 Attributions   \u00b7   Concept   \u00b7   Feature Visualization   \u00b7   Metrics   .   Example-based <p>Warning</p> <p>With the release of Keras 3.X since TensorFlow 2.16, some methods may not function as expected. We are actively working on a fix. In the meantime, we recommend using TensorFlow 2.15 or earlier versions for optimal compatibility.</p> <p>The library is composed of several modules, the Attributions Methods module implements various methods (e.g Saliency, Grad-CAM, Integrated-Gradients...), with explanations, examples and links to official papers. The Feature Visualization module allows to see how neural networks build their understanding of images by finding inputs that maximize neurons, channels, layers or compositions of these elements. The Concepts module allows you to extract human concepts from a model and to test their usefulness with respect to a class. Finally, the Metrics module covers the current metrics used in explainability. Used in conjunction with the Attribution Methods module, it allows you to test the different methods or evaluate the explanations of a model.</p> <p> </p> <p></p> <p>\ud83d\udd14 New Module Available!</p> <p>We are proud to announce the release of the Example-based module! This module is dedicated to methods that explain a model by retrieving relevant examples from a dataset. It includes methods that belong to different families: similar examples, contrastive (counter-factuals and semi-factuals) examples, and prototypes (as concepts based methods have a dedicated sections).</p>"},{"location":"#tutorials","title":"\ud83d\udd25 Tutorials","text":"We propose some Hands-on tutorials to get familiar with the library and its api <ul> <li>Attribution Methods: Getting started </li> </ul> <p><p> </p></p> <ul> <li>Attribution Methods: Sanity checks paper </li> <li>Attribution Methods: Tabular data and Regression </li> <li>Attribution Methods: Object Detection </li> <li>Attribution Methods: Semantic Segmentation </li> <li>FORGRad: Gradient strikes back with FORGrad </li> <li>Attribution Methods: Metrics </li> </ul> <p><p> </p></p> <ul> <li> <p>PyTorch models: Getting started</p> </li> <li> <p>Concepts Methods: Testing with Concept Activation Vectors </p> </li> </ul> <p><p> </p></p> <ul> <li>Concepts Methods: CRAFT: Getting started on Tensorflow </li> <li>Concepts Methods: CRAFT: Getting started on Pytorch </li> </ul> <p><p> </p></p> <ul> <li> <p>Feature Visualization: Getting started </p> </li> <li> <p>Feature Visualization: Getting started <p> </p></p> </li> <li>Modern Feature Visualization with MaCo: Getting started </li> <li>Example-based Methods: Getting started </li> </ul> <p>You can find a certain number of other practical tutorials just here. This section is actively developed and more contents will be included. We will try to cover all the possible usage of the library, feel free to contact us if you have any suggestions or recommendations towards tutorials you would like to see.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Xplique requires a version of python higher than 3.7 and several libraries including Tensorflow and Numpy. Installation can be done using Pypi:</p> <pre><code>pip install xplique\n</code></pre> <p>Now that Xplique is installed, here are some basic examples of what you can do with the available modules.</p> Attributions Methods <p>Let's start with a simple example, by computing Grad-CAM for several images (or a complete dataset) on a trained model.</p> <pre><code>from xplique.attributions import GradCAM\n\n# load images, labels and model\n# ...\n\nexplainer = GradCAM(model)\nexplanations = explainer.explain(images, labels)\n# or just `explainer(images, labels)`\n</code></pre> <p>All attributions methods share a common API described in the attributions API documentation.</p> Attributions Metrics <p>In order to measure if the explanations provided by our method are faithful (it reflects well the functioning of the model) we can use a fidelity metric such as Deletion</p> <pre><code>from xplique.attributions import GradCAM\nfrom xplique.metrics import Deletion\n\n# load images, labels and model\n# ...\n\nexplainer = GradCAM(model)\nexplanations = explainer(inputs, labels)\nmetric = Deletion(model, inputs, labels)\n\nscore_grad_cam = metric(explanations)\n</code></pre> <p>All attributions metrics share a common API. You can find out more about it here.</p> Concepts Extraction Feature Visualization <p>Finally, in order to find an image that maximizes a neuron and at the same time a layer, we build two objectives that we combine together. We then call the optimizer which returns our images</p> <pre><code>from xplique.features_visualizations import Objective\nfrom xplique.features_visualizations import optimize\n\n# load a model...\n\nneuron_obj = Objective.neuron(model, \"logits\", 200)\nchannel_obj = Objective.layer(model, \"mixed3\", 10)\n\nobj = neuron_obj + 2.0 * channel_obj\nimages, obj_names = optimize(obj)\n</code></pre> <p>Want to know more ? Check the Feature Viz documentation</p> PyTorch with Xplique <p>Even though the library was mainly designed to be a Tensorflow toolbox we have been working on a very practical wrapper to facilitate the integration of your PyTorch models into Xplique's framework!</p> <pre><code>import torch\n\nfrom xplique.wrappers import TorchWrapper\nfrom xplique.attributions import Saliency\nfrom xplique.metrics import Deletion\n\n# load images, targets and model\n# ...\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nwrapped_model = TorchWrapper(torch_model, device)\n\nexplainer = Saliency(wrapped_model)\nexplanations = explainer(inputs, targets)\n\nmetric = Deletion(wrapped_model, inputs, targets)\nscore_saliency = metric(explanations)\n</code></pre> <p>Want to know more ? Check the PyTorch documentation</p>"},{"location":"#cav","title":"CAV","text":"<p>Concerning the concept-based methods, we can for example extract a concept vector from a layer of a model. In order to do this, we use two datasets, one containing inputs containing the concept: <code>positive_samples</code>, the other containing other entries which do not contain the concept: <code>negative_samples</code>.</p> <pre><code>from xplique.concepts import Cav\n\n# load a model, samples that contain a concept\n# (positive) and samples who don't (negative)\n# ...\n\nextractor = Cav(model, 'mixed3')\nconcept_vector = extractor(positive_samples,\n                        negative_samples)\n</code></pre> <p>More information on CAV here and on TCAV here.</p>"},{"location":"#craft","title":"CRAFT","text":"<p>Use Craft to investigate a single class.</p> <pre><code>from xplique.concepts import CraftTf as Craft\n\n# Cut the model in two parts: g and h\n# Create a Craft concept extractor from these 2 models\ncraft = Craft(input_to_latent_model = g,\n            latent_to_logit_model = h)\n\n# Use Craft to compute the concepts for a specific class\ncraft.fit(images_preprocessed, class_id=rabbit_class_id)\n\n# Compute Sobol indices to understand which concept matters\nimportances = craft.estimate_importance()\n\n# Display those concepts by showing the 10 best crops for each concept\ncraft.plot_concepts_crops(nb_crops=10)\n</code></pre> <p>More information in the CRAFT documentation.</p>"},{"location":"#whats-included","title":"\ud83d\udce6 What's Included","text":"<p>There are 4 modules in Xplique, Attribution methods, Attribution metrics, Concepts, and Feature visualization. In particular, the attribution methods module supports a huge diversity of tasks: Classification, Regression, Object Detection, and Semantic Segmentation. For diverse data types: Images, Time Series, and Tabular data. The methods compatible with such task and methods compatible with Tensorflow or PyTorch are highlighted in the following table:</p> Table of attributions available Attribution Method Type of Model Source Images Time Series and Tabular Data Tutorial Deconvolution TF Paper C:\u2714\ufe0fOD:\u274cSS:\u274c C:\u2714\ufe0fR:\u2714\ufe0f Grad-CAM TF Paper C:\u2714\ufe0fOD:\u274cSS:\u274c \u274c Grad-CAM++ TF Paper C:\u2714\ufe0fOD:\u274cSS:\u274c \u274c Gradient Input TF, PyTorch** Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f Guided Backprop TF Paper C:\u2714\ufe0fOD:\u274cSS:\u274c C:\u2714\ufe0fR:\u2714\ufe0f Integrated Gradients TF, PyTorch** Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f Kernel SHAP TF, PyTorch*, Callable Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f Lime TF, PyTorch*, Callable Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f Occlusion TF, PyTorch*, Callable Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f Rise TF, PyTorch*, Callable Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f Saliency TF, PyTorch** Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f SmoothGrad TF, PyTorch** Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f SquareGrad TF, PyTorch** Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f VarGrad TF, PyTorch** Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f C:\u2714\ufe0fR:\u2714\ufe0f Sobol Attribution TF, PyTorch** Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f \ud83d\udd35 Hsic Attribution TF, PyTorch** Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f \ud83d\udd35 FORGrad enhancement TF, PyTorch** Paper C:\u2714\ufe0fOD:\u2714\ufe0fSS:\u2714\ufe0f \u274c <p>TF : Tensorflow compatible</p> <p>C : Classification | R : Regression | OD : Object Detection | SS : Semantic Segmentation</p> <p>* : See the Callable documentation</p> <p>** : See the Xplique for PyTorch documentation, and the PyTorch models: Getting started notebook.</p> <p>\u2714\ufe0f : Supported by Xplique | \u274c : Not applicable | \ud83d\udd35 : Work in Progress</p> Table of attribution's metric available Attribution Metrics Type of Model Property Source MuFidelity TF, PyTorch** Fidelity Paper Deletion TF, PyTorch** Fidelity Paper Insertion TF, PyTorch** Fidelity Paper Average Stability TF, PyTorch** Stability Paper MeGe TF, PyTorch** Representativity Paper ReCo TF, PyTorch** Consistency Paper (WIP) e-robustness <p>TF : Tensorflow compatible</p> <p>** : See the Xplique for PyTorch documentation, and the PyTorch models: Getting started notebook.</p> Table of concept methods available Concepts method Type of Model Source Tutorial Concept Activation Vector (CAV) TF Paper Testing CAV (TCAV) TF Paper CRAFT Tensorflow TF Paper CRAFT PyTorch PyTorch** Paper (WIP) Robust TCAV (WIP) Automatic Concept Extraction (ACE) TF : Tensorflow compatible <p>** : See the Xplique for Pytorch documentation, and the PyTorch's model: Getting started notebook</p> Table of Feature Visualization methods available Feature Visualization (Paper) Type of Model Details Neurons TF Optimizes for specific neurons Layer TF Optimizes for specific layers Channel TF Optimizes for specific channels Direction TF Optimizes for specific vector Fourrier Preconditioning TF Optimize in Fourier basis (see preconditioning) Objective combination TF Allows to combine objectives MaCo TF Fixed Magnitude optimisation, see Paper <p>TF : Tensorflow compatible</p> <p>Even though we are only at the early stages, we have also recently added an Example-based methods module. Do not hesitate to give us feedback! Currently, the methods available are summarized in the following table:</p> Table of example-based methods available Method Family Documentation Tutorial <code>SimilarExamples</code> Similar Examples SimilarExamples <code>Cole</code> Similar Examples Cole <code>NaiveCounterFactuals</code> Counter Factuals NaiveCounterFactuals <code>LabelAwareCounterFactuals</code> Counter Factuals LabelAwareCounterFactuals <code>KLEORSimMiss</code> Semi Factuals KLEOR <code>KLEORGlobalSim</code> Semi Factuals KLEOR <code>ProtoGreedy</code> Prototypes ProtoGreedy <code>ProtoDash</code> Prototypes ProtoDash <code>MMDCritic</code> Prototypes MMDCritic"},{"location":"#contributing","title":"\ud83d\udc4d Contributing","text":"<p>Feel free to propose your ideas or come and contribute with us on the Xplique toolbox! We have a specific document where we describe in a simple way how to make your first pull request: just here.</p>"},{"location":"#see-also","title":"\ud83d\udc40 See Also","text":"<p>This library is one approach of many to explain your model. We don't expect it to be the perfect  solution; we create it to explore one point in the space of possibilities.</p> Other interesting tools to explain your model: <ul> <li>Lucid the wonderful library specialized in feature visualization from OpenAI.</li> <li>Captum the PyTorch library for Interpretability research</li> <li>Tf-explain that implement multiples attribution methods and propose callbacks API for tensorflow.</li> <li>Alibi Explain for model inspection and interpretation</li> <li>SHAP a very popular library to compute local explanations using the classic Shapley values from game theory and their related extensions</li> </ul> To learn more about Explainable AI in general: <ul> <li>Interpretable Machine Learning by Christophe Molnar.</li> <li>Interpretability Beyond Feature Attribution by Been Kim.</li> <li>Explaining ML Predictions: State-of-the-art, Challenges, and Opportunities by Himabindu Lakkaraju, Julius Adebayo and Sameer Singh.</li> <li>A Roadmap for the Rigorous Science of Interpretability by Finale Doshi-Velez.</li> <li>DEEL White paper a summary of the DEEL team on the challenges of certifiable AI and the role of explainability for this purpose</li> </ul> More from the DEEL project: <ul> <li>deel-lip a Python library for training k-Lipschitz neural networks on TF.</li> <li>deel-torchlip a Python library for training k-Lipschitz neural networks on PyTorch.</li> <li>Influenciae Python toolkit dedicated to computing influence values for the discovery of potentially problematic samples in a dataset.</li> <li>LARD Landing Approach Runway Detection (LARD) is a dataset of aerial front view images of runways designed for aircraft landing phase</li> <li>PUNCC Puncc (Predictive uncertainty calibration and conformalization) is an open-source Python library that integrates a collection of state-of-the-art conformal prediction algorithms and related techniques for regression and classification problems</li> <li>OODEEL OODeel is a library that performs post-hoc deep OOD detection on already trained neural network image classifiers. The philosophy of the library is to favor quality over quantity and to foster easy adoption</li> <li>DEEL White paper a summary of the DEEL team on the challenges of certifiable AI and the role of data quality, representativity and explainability for this purpose.</li> </ul>"},{"location":"#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<p>  This project received funding from the French \u201dInvesting for the Future \u2013 PIA3\u201d program within the Artificial and Natural Intelligence Toulouse Institute (ANITI). The authors gratefully acknowledge the support of the  DEEL  project.</p>"},{"location":"#creators","title":"\ud83d\udc68\u200d\ud83c\udf93 Creators","text":"<p>This library was started as a side-project by Thomas FEL who is currently a graduate student at the Artificial and Natural Intelligence Toulouse Institute under the direction of Thomas SERRE. His thesis work focuses on explainability for deep neural networks.</p> <p>He then received help from some members of the  DEEL  team to enhance the library namely from Lucas Hervier and Antonin Poch\u00e9.</p>"},{"location":"#citation","title":"\ud83d\uddde\ufe0f Citation","text":"<p>If you use Xplique as part of your workflow in a scientific publication, please consider citing the \ud83d\uddde\ufe0f Xplique official paper:</p> <pre><code>@article{fel2022xplique,\n  title={Xplique: A Deep Learning Explainability Toolbox},\n  author={Fel, Thomas and Hervier, Lucas and Vigouroux, David and Poche, Antonin and Plakoo, Justin and Cadene, Remi and Chalvidal, Mathieu and Colin, Julien and Boissin, Thibaut and Bethune, Louis and Picard, Agustin and Nicodeme, Claire \n          and Gardes, Laurent and Flandin, Gregory and Serre, Thomas},\n  journal={Workshop on Explainable Artificial Intelligence for Computer Vision (CVPR)},\n  year={2022}\n}\n</code></pre>"},{"location":"#license","title":"\ud83d\udcdd License","text":"<p>The package is released under  MIT license.</p>"},{"location":"contributing/","title":"Contributing \ud83d\ude4f","text":"<p>Thanks for taking the time to contribute! \ud83c\udf89\ud83d\udc4d</p> <p>From opening a bug report to creating a pull request: every contribution is appreciated and welcome. If you're planning to implement a new feature or change the api please create an issue first. This way we can ensure that your precious work is not in vain.</p>"},{"location":"contributing/#setup-with-make","title":"Setup with make \u2699\ufe0f","text":"<ul> <li>Clone the repo <code>git clone https://github.com/deel-ai/xplique.git</code>.</li> <li>Go to your freshly downloaded repo <code>cd xplique</code></li> <li>Create a virtual environment and install the necessary dependencies for development <code>make prepare-dev &amp;&amp; source xplique_dev_env/bin/activate</code>.</li> <li>You are ready to install the library <code>pip install -e .</code> or run the test suite <code>make test</code>.</li> </ul> <p>Welcome to the team \ud83d\udd25\ud83d\ude80 !</p>"},{"location":"contributing/#setup-without-make","title":"Setup without make \u2699\ufe0f","text":"<ul> <li>Clone the repo <code>git clone https://github.com/deel-ai/xplique.git</code>.</li> <li>Go to your freshly downloaded repo <code>cd xplique</code></li> <li>Install virtualenv with <code>pip</code>: <pre><code>pip install virtualenv\n</code></pre> Or with <code>conda</code>: <pre><code>conda install -c conda-forge virtualenv\n</code></pre></li> <li>Create a new virtual environment <pre><code>venv xplique_dev_env\n</code></pre></li> <li>Activate your new environment <pre><code>. xplique_dev_env/bin/activate\n</code></pre> Depending on your machine, this operation might be slightly different. For instance, on Windows you should probably do (with cmd.exe): <pre><code>~/xplique&gt; path\\to\\xplique_dev_env\\bin\\activate.bat\n</code></pre> Or with Powershell: <pre><code>PS ~/xplique&gt; path\\to\\xplique_dev_env\\bin\\Activate.ps1\n</code></pre> Anyway, if you suceed you should see your virtual environment name in front of any other command: <pre><code>(xplique_dev_env) :~/xplique$\n</code></pre></li> <li>You can now install all necessary packages, with pip: <pre><code>pip install -r requirements.txt\npip install -r requirements_dev.txt\n</code></pre> Or with conda: <pre><code>conda install --file requirements.txt\nconda install --file requirements_dev.txt\n</code></pre></li> <li>You are ready to install the library: <pre><code>pip install -e .\n</code></pre></li> <li>Or run the test suite: <pre><code>tox\n</code></pre></li> </ul> <p>You are now ready to code and to be part of the team \ud83d\udd25\ud83d\ude80 !</p>"},{"location":"contributing/#tests","title":"Tests \u2705","text":"<p>A pretty fair question would be to know what is <code>make test</code> doing ? It is actually just a command which activate your virtual environment and launch the <code>tox</code> command. So basically, if you do not succeed to use <code>make</code> just activate your virtual env and do <code>tox</code> !</p> <p><code>tox</code> on the otherhand will do the following: - run pytest on the tests folder with python 3.6, python 3.7 and python 3.8</p> <p>Note: If you do not have those 3 interpreters the tests would be only performs with your current interpreter - run pylint on the xplique main files, also with python 3.6, python 3.7 and python 3.8 Note: It is possible that pylint throw false-positive errors. If the linting test failed please check first pylint output to point out the reasons.</p> <p>Please, make sure you run all the tests at least once before opening a pull request.</p> <p>A word toward Pylint for those that don't know it:</p> <p>Pylint is a Python static code analysis tool which looks for programming errors, helps enforcing a coding standard, sniffs for code smells and offers simple refactoring suggestions.</p> <p>Basically, it will check that your code follow a certain number of convention. Any Pull Request will go through a Github workflow ensuring that your code respect the Pylint conventions (most of them at least).</p>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes \ud83d\udd03","text":"<p>After getting some feedback, push to your fork and submit a pull request. We may suggest some changes or improvements or alternatives, but for small changes your pull request should be accepted quickly.</p> <p>Something that will increase the chance that your pull request is accepted:</p> <ul> <li>Write tests and ensure that the existing ones pass.</li> <li>If <code>make test</code> is succesful, you have fair chances to pass the CI workflows (linting and test)</li> <li>Follow the existing coding style.</li> <li>Write a good commit message (we follow a lowercase convention).</li> <li>For a major fix/feature make sure your PR has an issue and if it doesn't, please create one. This would help discussion with the community, and polishing ideas in case of a new feature.</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation \ud83d\udcda","text":"<p>Xplique is a small library but documentation is often a huge time sink for users. That's why we greatly appreciate any time spent fixing typos or clarifying sections in the documentation. To setup a local live-server to update the documentation: <code>make serve-doc</code> or activate your virtual env and: <pre><code>CUDA_VISIBLE_DEVICES=-1 mkdocs serve\n</code></pre></p>"},{"location":"tutorials/","title":"Tutorials: Notebooks \ud83d\udcd4","text":"<p>We propose here several tutorials to discover the different functionalities that the library has to offer.</p> <p>We decided to host those tutorials on Google Colab mainly because you will be able to play the notebooks with a GPU which should greatly improve your User eXperience.</p> <p>Here is the lists of the availables tutorial for now:</p>"},{"location":"tutorials/#getting-started","title":"Getting Started","text":"Tutorial Name Notebook Getting Started Sanity checks for Saliency Maps Times Series and Regression Tabular data and Regression Object detection Semantic Segmentation Metrics Concept Activation Vectors Feature Visualization Example-Based Methods Prototypes"},{"location":"tutorials/#attributions","title":"Attributions","text":"Category Tutorial Name Notebook BlackBox KernelShap BlackBox Lime BlackBox Occlusion BlackBox Rise WhiteBox DeconvNet WhiteBox GradCAM WhiteBox GradCAM++ WhiteBox GradientInput WhiteBox GuidedBackpropagation WhiteBox IntegratedGradients WhiteBox Saliency WhiteBox SmoothGrad WhiteBox SquareGrad WhiteBox VarGrad Tabular Data Regression Tabular Data Times Series Regression Time Series"},{"location":"tutorials/#metrics","title":"Metrics","text":"Category Tutorial Name Notebook Fidelity MuFidelity Fidelity Insertion Fidelity Deletion Stability AverageStability (WIP)"},{"location":"tutorials/#pytorch-wrapper","title":"PyTorch Wrapper","text":"Tutorial Name Notebook PyTorch models: Getting started Metrics: With PyTorch models Object detection on PyTorch model Semantic Segmentation on PyTorch model"},{"location":"tutorials/#concepts-extraction","title":"Concepts extraction","text":"Category Tutorial Name Notebook Labelled concept methods CAV + TCAV Automatic concept extraction CRAFT Tensorflow Automatic concept extraction CRAFT Pytorch"},{"location":"tutorials/#feature-visualization","title":"Feature Visualization","text":"Tutorial Name Notebook Feature Visualization: Getting started Modern Feature Visualization: MaCo"},{"location":"tutorials/#example-based-methods","title":"Example-Based Methods","text":"Tutorial Name Notebook Example-Based Methods: Getting started Example-based: Prototypes"},{"location":"api/attributions/api_attributions/","title":"API: Attributions Methods","text":"<ul> <li>Attribution Methods: Getting started </li> </ul>"},{"location":"api/attributions/api_attributions/#context","title":"Context","text":"<p>In 2013, Simonyan et al. proposed a first attribution method, opening the way to a wide range of approaches which could be defined as follow:</p> <p>Definition</p> <p>The main objective in attributions techniques is to highlight the discriminating variables for decision-making. For instance, with Computer Vision (CV) tasks, the main goal is to underline the pixels contributing the most in the input image(s) leading to the model\u2019s output(s).</p>"},{"location":"api/attributions/api_attributions/#common-api","title":"Common API","text":"<pre><code>explainer = Method(model, batch_size, operator)\nexplanation = explainer(inputs, targets)\n</code></pre> <p>The API have two steps:</p> <ul> <li> <p><code>explainer</code> instantiation: <code>Method</code> is an attribution method among those displayed methods tables. It inherits from the Base class <code>BlackBoxExplainer</code>. Their initialization takes 3 parameters apart from the specific ones and generates an <code>explainer</code>:</p> <ul> <li><code>model</code>: the model from which we want to obtain attributions (e.g: InceptionV3, ResNet, ...), see the model section for more details and specifications.</li> <li><code>batch_size</code>: an integer which allows to either process inputs per batch (gradient-based methods) or process perturbed samples of an input per batch (inputs are therefore processed one by one).</li> <li><code>operator</code>: enum identifying the task of the model (which is Classification by default), string identifying the task, or function to explain, see the task and operator section for more detail.</li> </ul> </li> <li> <p><code>explainer</code> call: The call to <code>explainer</code> generates the explanations, it takes two parameters:</p> <ul> <li><code>inputs</code>: the samples on which the explanations are requested, see inputs section for more detail.</li> <li><code>targets</code>: another parameter to specify what to explain in the <code>inputs</code>, it changes depending on the <code>operator</code>, see targets section for more detail.</li> </ul> </li> </ul> <p>Info</p> <p>The <code>__call__</code> method of explainers is an alias for the <code>explain</code> method.</p> <p>Info</p> <p>This documentation page covers the different parameters of the common API of attributions methods. It is common between the different tasks covered by Xplique for attribution methods.</p>"},{"location":"api/attributions/api_attributions/#methods","title":"Methods","text":"<p>Even though we made an harmonized API for all attributions methods, it might be relevant for the user to distinguish Perturbation-based methods and Gradient-based methods, also often referenced respectively as black-box and white-box methods, as their hyperparameters settings might be quite different.</p>"},{"location":"api/attributions/api_attributions/#perturbation-based-approaches","title":"Perturbation-based approaches","text":"<p>Perturbation based methods focus on perturbing an input with a variety of techniques and, with the analysis of the resulting outputs, define an attribution representation. Thus, there is no need to explicitly know the model architecture as long as forward pass is available, which explains why they are also referenced as black-box methods.</p> <p>Therefore, to use perturbation-based approaches you do not need a TF model. To know more, please see the Callable documentation.</p> <p>Xplique includes the following black-box attributions:</p> Method Name and Documentation link Tutorial Available with TF Available with PyTorch* KernelShap \u2714 \u2714 Lime \u2714 \u2714 Occlusion \u2714 \u2714 Rise \u2714 \u2714 Sobol Attribution \u2714 \u2714 Hsic Attribution \u2714 \u2714 <p>*: Before using a PyTorch model it is highly recommended to read the dedicated documentation</p>"},{"location":"api/attributions/api_attributions/#gradient-based-approaches","title":"Gradient-based approaches","text":"<p>Those approaches are also called white-box methods as they require a full access to the model's architecture, notably it must allow computing gradients. Indeed, the core idea with the gradient-based approaches is to use back-propagation, not to update the model\u2019s weights (which is already trained) but to reveal the most contributing inputs, potentially in a specific layer. All methods are available when the model works with TensorFlow but most methods also work with PyTorch (see Xplique for PyTorch documentation)</p> Method Name and Documentation link Tutorial Available with TF Available with PyTorch* DeconvNet \u2714 \u274c GradCAM \u2714 \u274c GradCAM++ \u2714 \u274c GradientInput \u2714 \u2714 GuidedBackpropagation \u2714 \u274c IntegratedGradients \u2714 \u2714 Saliency \u2714 \u2714 SmoothGrad \u2714 \u2714 SquareGrad \u2714 \u2714 VarGrad \u2714 \u2714 <p>*: Before using a PyTorch model it is highly recommended to read the dedicated documentation</p> <p>In addition, these methods inherit from <code>WhiteBoxExplainer</code> (itself inheriting from <code>BlackBoxExplainer</code>). Thus, two additional <code>__init__</code> arguments are added:</p> <ul> <li><code>output_layer</code>. It is the layer to target for the output (e.g logits or after softmax). If an <code>int</code> is provided, it will be interpreted as a layer index, if a <code>string</code> is provided it will look for the layer name. Default to the last layer.</li> <li><code>reducer</code>. For images, most gradient-based provide a value for each channel, however, for consistency, it was decided that for images, explanations will have the shape \\((n, h, w, 1)\\). Therefore, gradient-based methods need to reduce the channel dimension of their image explanations and the <code>reducer</code> parameter choose how to do it among {<code>\"mean\"</code>, <code>\"min\"</code>, <code>\"max\"</code>, <code>\"sum\"</code>, <code>None</code>}. In the case <code>None</code> is give, the channel dimension is not reduced. The default value is <code>\"mean\"</code> for methods excepts <code>Saliency</code> which is <code>\"max\"</code> to comply with the paper and <code>GradCAM</code> and <code>GradCAMPP</code> which are not concerned.</li> </ul> <p>Tip</p> <p>It is recommended to use the layer before Softmax.</p> <p>Warning</p> <p>The <code>output_layer</code> parameter will work well with TensorFlow models. However, it will not work with PyTorch models. For PyTorch, one should directly manipulate the model to focus on the layers of interest.</p> <p>Info</p> <p>The \"white-box\" explainers that work with PyTorch are those that only require the gradient of the model without having to \"modify\" some part of the model (e.g. Deconvnet will commute all original ReLU by a custom ReLU policy)</p>"},{"location":"api/attributions/api_attributions/#model","title":"<code>model</code>","text":"<p><code>model</code> is the primary parameter of attribution methods: it represents model from which explanations are required. Even though we tried to support a wide-range of models, our attributions framework relies on some assumptions which we propose to see in this section.</p> <p>Warning</p> <p>In case the <code>model</code> does not respect the specifications, a wrapper will be needed as described in the Models not respecting the specifications section.</p> <p>In practice, we expect the <code>model</code> to be callable for the <code>inputs</code> parameters -- i.e. we can do <code>model(inputs)</code>. We expect this call to produce the <code>outputs</code> variables that are the predictions of the model on those inputs. As for most attribution methods, we need to manipulate and/or link the <code>outputs</code> to the <code>inputs</code>. We assume that the latter follow conventional shapes described in the inputs section.</p> <p>Info</p> <p>Depending on the task and operator there may be supplementary specifications for the model, mainly on the output of the model.</p>"},{"location":"api/attributions/api_attributions/#tasks-and-operator","title":"Tasks and <code>operator</code>","text":"<p><code>operator</code> is one of the main parameters for both attribution methods and metrics. It defines the function that we want to explain. E.g.: In the case we have a classifier model, the function that we might want to explain is the one that given a target provides us the score of the model for that specific target -- i.e \\(model(input)[target]\\).</p> <p>Note</p> <p>The <code>operator</code> parameter is a feature available for version &gt; \\(1.\\). The <code>operator</code> default values are the ones used before the introduction of this new feature!</p>"},{"location":"api/attributions/api_attributions/#leitmotiv","title":"Leitmotiv","text":"<p>The <code>operator</code> parameter was introduced to offer users a flexible way to adapt current attribution methods or metrics. It should help them to empirically tackle new use-cases/new tasks. Broadly speaking, it should amplify the user's ability to experiment. However, this also implies that it is the user's responsibility to make sure that its derivations are in-scope of the original method and make sense.</p>"},{"location":"api/attributions/api_attributions/#operator-in-practice","title":"<code>operator</code> in practice","text":"<p>In practice, the user does not manipulate the function in itself. The use of the operator can be divided in three steps:</p> <ul> <li>Specify the operator to use in the method initialization (as shown in the API description). Possible values are either an enum encoding the task, a string, or a custom operator.</li> <li>Make sure the model follows the model's specification relative to the selected task.</li> <li>Specify what to explain in <code>inputs</code> through <code>targets</code>, the <code>targets</code> parameter specifications depend on the task.</li> </ul>"},{"location":"api/attributions/api_attributions/#the-tasks-covered","title":"The tasks covered","text":"<p>The <code>operator</code> parameter depends on the task to explain, as the function to explain depends on the task. In the case of Xplique, the tasks in the following table are supported natively, but new operators are welcome, please feel free to contribute.</p> Task and Documentation link <code>operator</code> parameter value  from <code>xplique.Tasks</code> Enum Tutorial link Classification <code>CLASSIFICATION</code> Object Detection <code>OBJECT_DETECTION</code> Regression <code>REGRESSION</code> Semantic Segmentation <code>SEMANTIC_SEGMENTATION</code> <p>Info</p> <p>Classification is the default behavior, i.e., if no <code>operator</code> value is specified or <code>None</code> is given.</p> <p>Warning</p> <p>To apply Xplique on different tasks, specifying the value of the <code>operator</code> is not enough. Be sure to respect the \"operator in practice\" steps.</p>"},{"location":"api/attributions/api_attributions/#operators-signature","title":"Operators' Signature","text":"<p>An <code>operator</code> is a function that we want to explain. This function takes as input \\(3\\) parameters:</p> <ul> <li>the <code>model</code> to explain as in the method instantiation (specifications in the model section).</li> <li>the <code>inputs</code> parameter representing the samples to explain as in method call (specifications in inputs section).</li> <li>the <code>targets</code> parameter encoding what to explain in the <code>inputs</code> (specifications in targets section).</li> </ul> <p>This function should return a vector of scalar value of size \\((N,)\\) where \\(N\\) is the number of inputs in <code>inputs</code> -- i.e a scalar score per input.</p> <p>Note</p> <p>For gradient-based methods to work with the <code>operator</code>, it needs to be differentiable with respect to <code>inputs</code>.</p>"},{"location":"api/attributions/api_attributions/#the-operators-mechanism","title":"The operators mechanism","text":"Operators behavior for Black-box attribution methods <p>For attribution approaches that do not require gradient computation, we mostly need to query the model. Thus, those methods need an inference function. If you provide an <code>operator</code>, it will be the inference function.</p> <p>More concretely, for this kind of approach, you want to compare some valued function for an original input and perturbed version of it:</p> <pre><code>original_scores = operator(model, original_inputs, original_targets)\n\n# depending on the attribution method, this `perturbation_function` is different\nperturbed_inputs, perturbed_targets = perturbation_function(original_inputs, original_targets)\nperturbed_scores = operator(model, perturbed_inputs, perturbed_targets)\n\n# example of comparison of interest\ndiff_scores = math.sqrt((original_scores - perturbed_scores)**2)\n</code></pre> Operators behavior for White-box attribution methods <p>These methods usually require some gradients computation. The gradients that will be used are the ones of the operator function (see the <code>get_gradient_of_operator</code> method in the Providing custom operator section).</p>"},{"location":"api/attributions/api_attributions/#providing-custom-operator","title":"Providing custom operator","text":"<p>The <code>operator</code> parameter also supports functions (i.e. <code>Callable</code>), this is considered a custom operator and in this case, you should be aware of the following points:</p> <ul> <li>An assertion will be made to ensure it respects operators' signature.</li> <li>If you use any white-box explainer, your operator will go through the <code>get_gradient_of_operator</code> function below.</li> </ul> Code of the <code>get_gradient_of_operator</code> function. <pre><code>def get_gradient_of_operator(operator):\n    \"\"\"\n    Get the gradient of an operator.\n\n    Parameters\n    ----------\n    operator\n        Operator of which to compute the gradient.\n\n    Returns\n    -------\n    gradient\n        Gradient of the operator.\n    \"\"\"\n    @tf.function\n    def gradient(model, inputs, targets):\n        with tf.GradientTape() as tape:\n            tape.watch(inputs)\n            scores = operator(model, inputs, targets)\n\n        return tape.gradient(scores, inputs)\n\n    return gradient\n</code></pre> <p>Tip</p> <p>Writing your operator with only tensorflow functions should increase your chance that this method does not yield any errors. In addition, providing a <code>@tf.function</code> decorator is also welcome!</p> <p>Warning</p> <p>The <code>targets</code> parameter is the key to specifying what to explain and differs greatly depending on the operator. </p>"},{"location":"api/attributions/api_attributions/#models-not-respecting-the-specifications","title":"Models not respecting the specifications","text":"<p>Warning</p> <p>In any case, when you are out of the scope of the original API, you should take a deep look at the source code to be sure that your Use Case will make sense.</p>"},{"location":"api/attributions/api_attributions/#my-inputs-follow-a-different-shape-convention","title":"My inputs follow a different shape convention","text":"<p>In the case where you want to handle images or time series data that does not follow the previous conventions, it is recommended to reshape the data to the expected shape for the explainers (attribution methods) to handle them correctly. Then, you can simply define a wrapper of your model so that data is reshape to your model convenience when it is called.</p> <p>For example, if you have a <code>model</code> that classifies images but want the images to be channel-first (i.e. with \\((N, C, H, W)\\) shape) then you should:</p> <ul> <li>Move the axis so inputs are \\((N, H, W, C)\\) for the explainers</li> <li>Write the following wrapper for your model:</li> </ul> Example of a wrapper. <pre><code>class ModelWrapper(tf.keras.models.Model):\n    def __init__(self, nchw_model):\n        super(ModelWrapper, self).__init__()\n        self.model = nchw_model\n\n    def __call__(self, nhwc_inputs):\n        # transform the NHWC inputs (wanted for the explainers) back to NCHW inputs\n        nchw_inputs = self._transform_inputs(nhwc_inputs)\n        # make predictions\n        outputs = self.nchw_model(nchw_inputs)\n\n        return outputs\n\n    def _transform_inputs(self, nhwc_inputs):\n        # include in this function all transformation\n        # needed for your model to work with NHWC inputs\n        # , here for example we move axis from channels last\n        # to channels first\n        nchw_inputs = np.moveaxis(nhwc_inputs, [3, 1, 2], [1, 2, 3])\n\n        return nchw_inputs\n\nwrapped_model = ModelWrapper(model)\nexplainer = Saliency(wrapped_model)\n# images should be (N, H, W, C) for the explain call\nexplanations = explainer.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/api_attributions/#i-have-a-pytorch-model","title":"I have a PyTorch model","text":"<p>Then you should definitely take a look at the PyTorch documentation!</p>"},{"location":"api/attributions/api_attributions/#i-have-a-model-that-is-neither-a-tfkerasmodel-nor-a-torchnnmodule","title":"I have a model that is neither a tf.keras.Model nor a torch.nn.Module","text":"<p>Then you should take a look at the Callable documentation or you could take inspiration on the PyTorch Wrapper to write a wrapper that will integrate your model into our API!</p>"},{"location":"api/attributions/api_attributions/#inputs-and-data-types","title":"<code>inputs</code> and data types","text":"<p>Warning</p> <p><code>inputs</code> in this section correspond to the argument in the <code>explain</code> method of <code>BlackBoxExplainer</code>. The <code>model</code> specified at the initialization of the <code>BlackBoxExplainer</code> should be able to be called through <code>model(inputs)</code>. Otherwise, a wrapper needs to be implemented as described in the Models not respecting the specifications section.</p> <p><code>inputs</code>: Must be one of the following: a <code>tf.data.Dataset</code> (in which case you should not provide targets), a <code>tf.Tensor</code> or a <code>np.ndarray</code>.</p> <p>Examples are provided in the different tutorials: images, time-series, and tabular data. The conventions are as follow:</p> <ul> <li> <p>If inputs are images, the expected shape of <code>inputs</code> is \\((N, H, W, C)\\) following the TF's conventions where:</p> <ul> <li>\\(N\\): the number of inputs</li> <li>\\(H\\): the height of the images</li> <li>\\(W\\): the width of the images</li> <li>\\(C\\): the number of channels (works for \\(C=3\\) or \\(C=1\\), other values might not work or need further customization)</li> </ul> </li> <li> <p>If inputs are time-series, the expected shape of <code>inputs</code> is \\((N, T, W)\\)</p> <ul> <li>\\(N\\): the number of inputs</li> <li>\\(T\\): the temporal dimension of a single input</li> <li>\\(W\\): the feature dimension of a single input</li> </ul> </li> <li> <p>If inputs are tabular data, the expected shape of <code>inputs</code> is \\((N, W)\\) where:</p> <ul> <li>\\(N\\): the number of inputs</li> <li>\\(W\\): the feature dimension of a single input</li> </ul> </li> </ul> <p>Tip</p> <p>Please refer to the table of attributions available to see which methods might work with for the different data types.</p> <p>Note</p> <p>If your model is not following the same conventions, please refer to the model not respecting the specification documentation.</p>"},{"location":"api/attributions/api_attributions/#targets","title":"<code>targets</code>","text":"<p><code>targets</code>: Must be one of the following: a <code>tf.Tensor</code> or a <code>np.ndarray</code>. It has a shape of \\((N, ...)\\) where N should match the first dimension of <code>inputs</code>, while \\(...\\) depend on the task and operators. Indeed, the <code>targets</code> parameter is highly dependent on the <code>operator</code> selected for the attribution methods, hence, for more information please refer to the tasks and operators table which will lead you to the pertinent task documentation page.</p>"},{"location":"api/attributions/callable/","title":"\ud83d\udcde Callable or Models handle by BlackBox Attribution methods","text":"<p>The model can be something else than a <code>tf.keras.Model</code> if it respects one of the following condition:</p> <ul> <li><code>model(inputs: np.ndarray)</code> return either a <code>np.ndarray</code> or a <code>tf.Tensor</code></li> <li>The model has a <code>scikit-learn</code> API and has a <code>predict_proba</code> function</li> <li>The model is a <code>xgboost.XGBModel</code> from the XGBoost python library</li> <li>The model is a TF Lite model. Note this feature is experimental.</li> <li>The model is a PyTorch model (see the dedicated documentation)</li> </ul> <p>In fact, what happens when a custom <code>operator</code> is not provided (see operator's documentation) and <code>model</code> (see model's documentation) is not a <code>tf.keras.Model</code>, a <code>tf.Module</code> or a <code>tf.keras.layers.Layer</code> is that the <code>predictions_one_hot_callable</code> operator is used:</p> <pre><code>def predictions_one_hot_callable(\n    model: Callable,\n    inputs: tf.Tensor,\n    targets: tf.Tensor) -&gt; tf.Tensor:\n    \"\"\"\n    Compute predictions scores, only for the label class, for a batch of samples.\n\n    Parameters\n    ----------\n    model\n        Model used for computing predictions.\n    inputs\n        Input samples to be explained.\n    targets\n        One-hot encoded labels or regression target (e.g {+1, -1}), one for each sample.\n\n    Returns\n    -------\n    scores\n        Predictions scores computed, only for the label class.\n    \"\"\"\n    if isinstance(model, tf.lite.Interpreter):\n\n        model.resize_tensor_input(0, [*inputs.shape], strict=False)\n        model.allocate_tensors()\n        model.set_tensor(model.get_input_details()[0][\"index\"], inputs)\n        model.invoke()\n        pred = model.get_tensor(model.get_output_details()[0][\"index\"])\n\n    # can be a sklearn model or xgboost model\n    elif hasattr(model, 'predict_proba'):\n        pred = model.predict_proba(inputs.numpy())\n\n    # can be another model thus it needs to implement a call function\n    else:\n        pred = model(inputs.numpy())\n\n    # make sure that the prediction shape is coherent\n    if inputs.shape[0] != 1:\n        # a batch of prediction is required\n        if len(pred.shape) == 1:\n            # The prediction dimension disappeared\n            pred = tf.expand_dims(pred, axis=1)\n\n    pred = tf.cast(pred, dtype=tf.float32)\n    scores = tf.reduce_sum(pred * targets, axis=-1)\n\n    return scores\n</code></pre> <p>Knowing that, you are free to wrap your model to make it work with our API and/or write a more customizable <code>operator</code> (see operator's documentation)!</p>"},{"location":"api/attributions/classification/","title":"Classification explanations with Xplique","text":"<p>Attributions: Getting started tutorial </p>"},{"location":"api/attributions/classification/#which-kind-of-tasks-are-supported-by-xplique","title":"Which kind of tasks are supported by Xplique?","text":"<p>With the operator's api you can treat many different problems with Xplique. There is one operator for each task.</p> Task and Documentation link <code>operator</code> parameter value  from <code>xplique.Tasks</code> Enum Tutorial link Classification <code>CLASSIFICATION</code> Object Detection <code>OBJECT_DETECTION</code> Regression <code>REGRESSION</code> Semantic Segmentation <code>SEMANTIC_SEGMENTATION</code> <p>Info</p> <p>They all share the API for Xplique attribution methods.</p>"},{"location":"api/attributions/classification/#simple-example","title":"Simple example","text":"<pre><code>import xplique\nfrom xplique.attributions import Saliency\nfrom xplique.metrics import Deletion\n\n# load inputs and model\n# ...\n\n# for classification it is recommended to remove softmax layer if there is one\n# model.layers[-1].activation = tf.keras.activations.linear\n\n# for classification, `targets` are the one hot encoding of the predicted class\ntargets = tf.one_hot(tf.argmax(model(inputs), axis=-1), depth=nb_classes, axis=-1)\n\n# compute explanations by specifying the classification operator\nexplainer = Saliency(model, operator=xplique.Tasks.CLASSIFICATION)\nexplanations = explainer(inputs, targets)\n\n# compute metrics on those explanations\n# if the softmax was removed,\n# it is possible to specify it to obtain more interpretable metrics\nmetric = Deletion(model, inputs, targets,\n                  operator=xplique.Tasks.CLASSIFICATION, activation=\"softmax\")\nscore_saliency = metric(explanations)\n</code></pre> <p>Tip</p> <p>In general, if you are doing classification tasks, it is better to not include the final softmax layer in your model but to work with logits instead!</p>"},{"location":"api/attributions/classification/#how-to-use-it","title":"How to use it?","text":"<p>To apply attribution methods, the common API documentation describes the parameters and how to fix them. However, depending on the task and thus on the <code>operator</code>, there are three points that vary:</p> <ul> <li> <p>The <code>operator</code> parameter value, it is an Enum or a string identifying the task,</p> </li> <li> <p>The model's output specification, as <code>model(inputs)</code> is used in the computation of the operators, and</p> </li> <li> <p>The <code>targets</code> parameter format, indeed, the <code>targets</code> parameter specifies what to explain and the format of such specification depends on the task.</p> </li> </ul>"},{"location":"api/attributions/classification/#the-operator","title":"The <code>operator</code>","text":""},{"location":"api/attributions/classification/#how-to-specify-it","title":"How to specify it","text":"<p>In Xplique, to adapt attribution methods, you should specify the task to the <code>operator</code> parameter. In the case of classification, with either: <pre><code>Method(model)\n# or\nMethod(model, operator=\"classification\")\n# or\nMethod(model, operator=xplique.Tasks.CLASSIFICATION)\n</code></pre></p> <p>Info</p> <p>Classification if the default behavior of Xplique attribution methods, hence there is no need to specify it. Nonetheless, it is recommended to still do so to ensure a good comprehension of what is explained.</p>"},{"location":"api/attributions/classification/#the-computation","title":"The computation","text":"<p>The classification operator multiplies model's predictions on <code>inputs</code> with <code>targets</code> and sum it for each input to explain. However, only one value should be non-zero in <code>targets</code>, thus, the classification operator returns the model output for the specified (via <code>targets</code>) class. <pre><code>scores = tf.reduce_sum(model(inputs) * targets, axis=-1)\n</code></pre></p>"},{"location":"api/attributions/classification/#the-behavior","title":"The behavior","text":"<ul> <li>In the case of perturbation-based methods, the perturbation score corresponds to the difference between the initial logits value for the predicted classes and the same logits for predictions over perturbed inputs.</li> <li>For gradient-based methods, the gradient of logits of interest with respect to the inputs.</li> </ul> <p>The logits of interest are specified via the <code>targets</code> parameter described in the related section.</p>"},{"location":"api/attributions/classification/#models-output","title":"Model's output","text":"<p>We expect <code>model(inputs)</code> to yield a \\((n, c)\\) tensor or array where \\(n\\) is the number of input samples and \\(c\\) is the number of classes. </p>"},{"location":"api/attributions/classification/#the-targets-parameter","title":"The <code>targets</code> parameter","text":""},{"location":"api/attributions/classification/#role","title":"Role","text":"<p>The <code>targets</code> parameter specifies what is to explain in the <code>inputs</code>, it is passed to the <code>explain</code> or to the <code>__call__</code> method of an explainer or metric and used by the operators. In the case of classification, it indicates the class to explain, or specifies contrastive explanations.</p>"},{"location":"api/attributions/classification/#format","title":"Format","text":"<p>The <code>targets</code> parameter in the case of classification should have the same shape as the model's output as they are multiplied point-wise. Hence, the shape is \\((n, c)\\) with \\(n\\) the number of samples to be explained (it should match the first dimension of <code>inputs</code>) and \\(c\\) the number of classes. The <code>targets</code> parameter expects values among \\({-1, 0, 1}\\) but most values should be \\(0\\) and most of the time only one should be \\(1\\) for each sample. \\(-1\\) are only used for contrastive explanations.</p>"},{"location":"api/attributions/classification/#in-practice","title":"In practice","text":"<p>In the simple example, the <code>targets</code> value provided is computed with <code>tf.one_hot(tf.argmax(model(inputs), axis=-1), axis=-1)</code>. Literally, the one hot encoding of the predicted class, this specifies which class to explain.</p> <p>Tip</p> <p>It is better to explain the predicted class than the expected class as the goal is to explain the model's prediction.</p>"},{"location":"api/attributions/classification/#what-can-be-explained-with-it","title":"What can be explained with it?","text":""},{"location":"api/attributions/classification/#explain-the-predicted-class","title":"Explain the predicted class","text":"<p>By specifying <code>targets</code> with a one hot encoding of the predicted class, the explanation will highlight which features were important for this prediction.</p>"},{"location":"api/attributions/classification/#contrastive-explanations","title":"Contrastive explanations","text":"<p>By specifying <code>targets</code> with zeros everywhere, <code>1</code> for the first class, and <code>-1</code> for the second class. The explanation will show which features were important to predict the first and and not the second one.</p> <p>Tip</p> <p>If the model made a mistake, an interesting explanation is predicted class versus expected class.</p>"},{"location":"api/attributions/object_detection/","title":"Object detection with Xplique","text":"<p>Attributions: Object Detection tutorial </p>"},{"location":"api/attributions/object_detection/#which-kind-of-tasks-are-supported-by-xplique","title":"Which kind of tasks are supported by Xplique?","text":"<p>With the operator's api you can treat many different problems with Xplique. There is one operator for each task.</p> Task and Documentation link <code>operator</code> parameter value  from <code>xplique.Tasks</code> Enum Tutorial link Classification <code>CLASSIFICATION</code> Object Detection <code>OBJECT_DETECTION</code> Regression <code>REGRESSION</code> Semantic Segmentation <code>SEMANTIC_SEGMENTATION</code> <p>Info</p> <p>They all share the API for Xplique attribution methods.</p>"},{"location":"api/attributions/object_detection/#simple-example","title":"Simple example","text":"<pre><code>import xplique\nfrom xplique.attributions import Saliency\nfrom xplique.metrics import Deletion\n\n# load images and model\n# ...\n\npredictions = model(images)\nexplainer = Saliency(model, operator=xplique.Tasks.OBJECT_DETECTION)\n\n# explain each image - bounding-box pair separately\nfor all_bbx_for_one_image, image in zip(predictions, images):\n    # an image is needed per bounding box, so we tile them\n    repeated_image = tf.tile(tf.expand_dims(image, axis=0),\n                             (tf.shape(all_bbx_for_one_image)[0], 1, 1, 1))\n\n    explanations = explainer(repeated_image, all_bbx_for_one_image)\n\n    # either compute several score or\n    # concatenate repeated images and corresponding boxes in one tensor\n    metric_for_one_image = Deletion(model, repeated_image, all_bbx_for_one_image,\n                                    operator=xplique.Tasks.OBJECT_DETECTION)\n    score_saliency = metric(explanations)\n</code></pre>"},{"location":"api/attributions/object_detection/#how-to-use-it","title":"How to use it?","text":"<p>To apply attribution methods, the common API documentation describes the parameters and how to fix them. However, depending on the task and thus on the <code>operator</code>, there are three points that vary:</p> <ul> <li> <p>The <code>operator</code> parameter value, it is an Enum or a string identifying the task,</p> </li> <li> <p>The model's output specification, as <code>model(inputs)</code> is used in the computation of the operators, and</p> </li> <li> <p>The <code>targets</code> parameter format, indeed, the <code>targets</code> parameter specifies what to explain and the format of such specification depends on the task.</p> </li> </ul>"},{"location":"api/attributions/object_detection/#the-operator","title":"The <code>operator</code>","text":""},{"location":"api/attributions/object_detection/#how-to-specify-it","title":"How to specify it","text":"<p>In Xplique, to adapt attribution methods, you should specify the task to the <code>operator</code> parameter. In the case of object detection, with either: <pre><code>Method(model, operator=\"object detection\")\n# or\nMethod(model, operator=xplique.Tasks.OBJECT_DETECTION)\n</code></pre></p> <p>Info</p> <p>There are several variants of the object detection operator to explain part of the prediction.</p>"},{"location":"api/attributions/object_detection/#the-computation","title":"The computation","text":"<p>This operator is a generalization of DRise method introduced by Petsiuk &amp; al. [^1] to most attribution methods. The computation is the same as the one described in the DRise paper. The DRise can be divided into two principles:</p> <ul> <li>The matching: DRise extends Rise (described in detail in the Rise tutorial) to explain object detection. Rise is a perturbation-based method, hence current predictions are compared to predictions on perturbed inputs. However, object detectors predict several boxes with no consistency in the order, thus DRise chooses to match the current bounding box to the most similar one and use the similarity metric as the perturbation score.</li> <li>The similarity metric: This is the score used by DRise to match bounding boxes. It uses the three parts of a bounding box prediction, the position of the box, the box objectness, and the associated class. A score is computed for each of those three parts and these scores are multiplied:</li> </ul> \\[ score = intersection\\_score * detection\\_probability * classification\\_score \\] <p>With: $$ intersection_score = IOU(coordinates_{ref}, coordinates_{pred}) $$</p> \\[ detection\\_probability = objectness_{pred} \\] \\[ classification\\_score = \\frac{\\sum(classes_{ref} * classes_{pred})}{||classes_{ref}|| * ||classes_{pred}||} \\] <p>Info</p> <p>The intersection score of the operator is the IOU (Intersection Over Union) by default but can be modified by specifying as custom intersection score.</p> <p>Info</p> <p>With the DRise formula the methods explain the box position, the box objectness, and the class prediction at the same time. However, the user may want to explain them separately, therefore several variants of this operator are available in Xplique and described in What can we explain and how? section.</p>"},{"location":"api/attributions/object_detection/#the-behavior","title":"The behavior","text":"<ul> <li>In the case of perturbation-based methods, the perturbation score is the similarity metric aforementioned.</li> <li>For gradient-based methods, the gradient of the similarity metric is given, but no matching is necessary as no perturbation is made.</li> </ul>"},{"location":"api/attributions/object_detection/#models-output","title":"Model's output","text":"<p>We expect <code>model(inputs)</code> to yield a \\((n, nb\\_boxes, 4 + 1 + nb\\_classes)\\) tensors or array where:</p> <ul> <li>\\(n\\): the number of inputs, it should match the first dimension of <code>inputs</code>.</li> <li>\\(nb\\_boxes\\): a fixed number of bounding boxes predicted for a given image (no NMS).</li> <li>\\((4 + 1 + nb\\_classes)\\): the encoding of a bounding box prediction</li> <li>\\(4\\): the bounding box coordinates \\((x_{top\\_left}, y_{top\\_left}, x_{bottom\\_right}, y_{bottom\\_right})\\), with \\(x_{top\\_left} &lt; x_{bottom\\_right}\\) and \\(y_{top\\_left} &lt; y_{bottom\\_right}\\).</li> <li>\\(1\\): the objectness or detection probability of the bounding box,</li> <li>\\(nb\\_classes\\): the class of the bounding box, a soft class predictions not a one-hot encoding.</li> </ul> <p>Warning</p> <p>Object detection models provided to the explainer should not include NMS and classification should be soft classification not one-hot encoding. Furthermore, if the model does not match the expected format, a wrapper may be needed. (see the tutorial for an example).</p> <p>Info</p> <p>PyTorch models are not natively treated by Xplique, however, a simple wrapper is available in pytorch documentation.</p>"},{"location":"api/attributions/object_detection/#the-targets-parameter","title":"The <code>targets</code> parameter","text":""},{"location":"api/attributions/object_detection/#role","title":"Role","text":"<p>The <code>targets</code> parameter specifies what is to explain in the <code>inputs</code>, it is passed to the <code>explain</code> or to the <code>__call__</code> method of an explainer or metric and used by the operators. In the case of object detection, it indicates which box to explain, furthermore, it gives the initial predictions to the operator as the reference for perturbation-based methods.</p>"},{"location":"api/attributions/object_detection/#format","title":"Format","text":"<p>The <code>targets</code> parameter in the case of semantic segmentation should have the same shape as the model's output as the same computation are made. Concretely, the <code>targets</code> parameter should have a shape of \\((n, 4 + 1 + nb\\_classes)\\) to explain a bounding box for each input (detail in model's output description).</p> <p>Additionally, there is a possibility to explain a group of bounding boxes at the same time described in the explaining several bounding boxes section which requires a different shape.</p>"},{"location":"api/attributions/object_detection/#in-practice","title":"In practice","text":"<p>To explain each bounding box individually, the images need to be repeated. Indeed, object detector predict several bounding boxes per image and the first dimension of <code>inputs</code> and <code>targets</code> should match as it corresponds to the sample dimension. Therefore, the easiest way to obtain this is for each image to repeat it so that it matches the number of bounding boxes to explain for this image.</p> <p>In the simple example, there is a loop on the images - predictions pair, then images are repeated to match the number of predicted bounding boxes, and finally, the <code>targets</code> parameter takes the predicted bounding boxes.</p> <p>Tip</p> <p>AS specified in the model's output specification, the NMS (Non Maximum Suppression) should not be included in the model. However, it can be used to select the bounding boxes to explain.</p> <p>Warning</p> <p>Repeating images may create a tensor that exceeds memory for large images and/or when many bounding boxes are to be explained. In this case, we advise to make a loop on the images, then a loop on the boxes.</p>"},{"location":"api/attributions/object_detection/#explain-several-bounding-boxes-simultaneously","title":"Explain several bounding boxes simultaneously","text":"<p>The user may not want to explain each bounding box individually but several bounding boxes at the same time (i.e a set of pedestrian bounding boxes on a sidewalk). In this case, the <code>targets</code> parameter shape will not be \\((n, 4 + 1 + nb\\_classes)\\) but \\((n, nb\\_boxes, 4 + 1 + nb\\_classes)\\), with \\(nb\\_boxes\\) the number of boxes to explain simultaneously. In this case, \\(nb\\_boxes\\) bounding boxes are associated to each sample and a single attribution map is returned. However, for different images, \\(nb\\_boxes\\) may not be fix and it may not be possible to make a single tensor in this case. Thus, we recommend to treat each group of bounding boxes with a different call to the attribution method with \\(n=1\\).</p> <p>To return one explanation for several bounding boxes, Xplique takes the mean of the bounding boxes individual explanations and returns it.</p> <p>For a concrete example, please refer to the Attributions: Object detection tutorial.</p>"},{"location":"api/attributions/object_detection/#what-can-be-explained-and-how","title":"What can be explained and how?","text":""},{"location":"api/attributions/object_detection/#the-different-elements-in-object-detection","title":"The different elements in object detection","text":"<p>In object detection, the prediction for a given bounding box include several pieces of information: The box position, the box probability of containing something, and the class of the detected object. Therefore we may want to explain each of them separately, however, the DRise method of matching bounding boxes should be kept in mind. Indeed, the box position cannot be removed from the score, otherwise, the explanation may not correspond to the same object.</p>"},{"location":"api/attributions/object_detection/#the-different-operators-variants-and-what-they-explain","title":"The different operator's variants and what they explain","text":"<p>The Xplique library allows the specification of which part of the prediction to explain via a set 4 operators: the one as defined by the DRise formula and three variants:</p> <ul> <li> <p><code>\"object detection\"</code>: the one described in the operator section:</p> \\[score = intersection\\_score * detection\\_probability * classification\\_score\\] </li> <li> <p><code>\"object detection box position\"</code>: explains only the bounding box position:</p> \\[score = intersection\\_score\\] </li> <li> <p><code>\"object detection box proba\"</code>: explains the probability of a bounding box to contain something:</p> \\[score = intersection\\_score * detection\\_probability\\] </li> <li> <p><code>\"object detection box class\"</code>: explains the class of a bounding box:</p> \\[score = intersection\\_score * classification\\_score\\] </li> </ul>"},{"location":"api/attributions/object_detection/#custom-intersection-score","title":"Custom intersection score","text":"<p>The default intersection score is IOU, but it is possible to define a custom intersection score. The only constraint is that it should follow <code>xplique.commons.object_detection_operator._box_iou</code> signature for it to work.</p> <pre><code>from xplique.attributions import Saliency\nfrom xplique.commons.operators import object_detection_operator\n\ncustom_intersection_score = ...\n\ncustom_operator = lambda model, inputs, targets: object_detection_operator(\n    model, inputs, targets, intersection_score=custom_intersection_score\n)\n\nexplainer = Saliency(model, operator=custom_operator)\n\n...  # All following steps are the same as the examples\n</code></pre> <p>[^1] Black-box Explanation of Object Detectors via Saliency Maps (2021)</p>"},{"location":"api/attributions/pytorch/","title":"PyTorch models with Xplique","text":"<ul> <li> <p>PyTorch models: Getting started</p> </li> <li> <p>Metrics: With PyTorch models </p> </li> <li> <p>Other tutorials applying Xplique to PyTorch models: Attributions: Object Detection, Attributions: Semantic Segmentation</p> </li> </ul> <p>Note</p> <p>We should point out that what we did with PyTorch should be possible for other frameworks. Do not hesitate to give it a try and to make a PR if you have been successful!</p>"},{"location":"api/attributions/pytorch/#is-it-possible-to-use-xplique-with-pytorch-models","title":"Is it possible to use Xplique with PyTorch models?","text":"<p>Yes, it is! Even though the library was mainly designed to be a Tensorflow toolbox we have been working on a very practical wrapper to facilitate the integration of your PyTorch models into Xplique's framework!</p>"},{"location":"api/attributions/pytorch/#quickstart","title":"Quickstart","text":"<pre><code>import torch\n\nfrom xplique.wrappers import TorchWrapper\nfrom xplique.attributions import Saliency\nfrom xplique.metrics import Deletion\n\n# load images, targets and model\n# ...\n\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\nwrapped_model = TorchWrapper(torch_model, device)\n\nexplainer = Saliency(wrapped_model, operator=\"classification\")\nexplanations = explainer(inputs, targets)\n\nmetric = Deletion(wrapped_model, inputs, targets, operator=\"classification\")\nscore_saliency = metric(explanations)\n</code></pre>"},{"location":"api/attributions/pytorch/#does-it-work-for-every-module","title":"Does it work for every module?","text":"<p>It has been tested on both the <code>attributions</code> and the <code>metrics</code> modules.</p>"},{"location":"api/attributions/pytorch/#does-it-work-for-all-attribution-methods","title":"Does it work for all attribution methods?","text":"<p>Not yet, but it works for most of them (even for gradient-based ones!):</p> Attribution Method PyTorch compatible Deconvolution \u274c Grad-CAM \u274c Grad-CAM++ \u274c Gradient Input \u2705 Guided Backprop \u274c Hsic Attribution \u2705 Integrated Gradients \u2705 Kernel SHAP \u2705 Lime \u2705 Occlusion \u2705 Rise \u2705 Saliency \u2705 SmoothGrad \u2705 Sobol Attribution \u2705 SquareGrad \u2705 VarGrad \u2705"},{"location":"api/attributions/pytorch/#does-it-work-for-all-tasks","title":"Does it work for all tasks?","text":"<p>It works for all tasks covered by Xplique, see the tasks covered and how to specify them.</p>"},{"location":"api/attributions/pytorch/#steps-to-make-xplique-work-on-pytorch","title":"Steps to make Xplique work on PyTorch","text":""},{"location":"api/attributions/pytorch/#1-make-sure-the-inputs-follow-the-xplique-api-and-not-what-the-model-expects","title":"1. Make sure the inputs follow the Xplique API (and not what the model expects).","text":"<p>One thing to keep in mind is that attribution methods expect a specific inputs format as described in the API Description. Especially, for images <code>inputs</code> should be \\((N, H, W, C)\\) following the TF's conventions where:</p> <ul> <li>\\(N\\) is the number of inputs</li> <li>\\(H\\) is the height of the images</li> <li>\\(W\\) is the width of the images</li> <li>\\(C\\) is the number of channels</li> </ul> <p>However, if you are using a PyTorch models it is most likely expecting images' shape to be \\((N, C, H, W)\\). So what should you do?</p> <p>If you are using PyTorch's preprocessing functions what you should do is:</p> <ul> <li>preprocess as usual</li> <li>convert the data to numpy array</li> <li>use <code>np.moveaxis(np_inputs, [1, 2, 3], [3, 1, 2])</code> to change shape from \\((N, C, H, W)\\) to \\((N, H, W, C)\\)</li> </ul> <p>Notes</p> <p>The third step is necessary only if your data has a <code>channel</code> dimension which is not in the place expected with Tensorflow</p> <p>Tip</p> <p>If you want to be sure how this work you can look at the PyTorch models: Getting started notebook and compare it to the Attribution methods:Getting Started</p>"},{"location":"api/attributions/pytorch/#2-wrap-your-model","title":"2. Wrap your model","text":"<p>A <code>TorchWrapper</code> object can be initialized with 3 parameters:</p> <ul> <li><code>torch_model: torch.nn.Module</code>: A torch's model that inherits from nn.Module</li> <li><code>device: Union['torch.device', str]</code>: The device on which the torch's model and inputs should be mounted</li> <li><code>is_channel_first: Optional[bool] = None</code>: A boolean that is true if the torch's model expect a channel dim and if this one come first</li> </ul> <p>The last parameter is the one that needs special care. Indeed, if it is set to <code>True</code> we assume that the torch model expects its inputs to be \\((N, C, H, W)\\). As the explainer requires inputs to be \\((N, H, W, C)\\) we change the inputs' axis order when a call is made to the wrapped model (transparently for the user). If it is set to <code>False</code> we do not move the axis at all. By default the wrapper is looking for <code>torch.nn.Conv2d</code> layers in the torch model and consider it is channel first if it finds one and not otherwise.</p> <p>Info</p> <p>It is possible that you used special treatments for your models or that it does not follow typical convention. In that case, we encourage you to have a look at the Source Code to adapt it to your needs.</p>"},{"location":"api/attributions/pytorch/#3-use-this-wrapped-model-as-a-tfs-one","title":"3. Use this wrapped model as a TF's one","text":""},{"location":"api/attributions/pytorch/#what-are-the-limitations","title":"What are the limitations?","text":"<p>As it was previously mentionned this does not work with: Deconvolution, Grad-CAM, Grad-CAM++ and Guided Backpropagation.</p> <p>Furthermore, when one use any white-box explainers one have the possibility to provide an <code>output_layer</code> parameter. This functionnality will not work with PyTorch models. The user will have to manipulate itself its model!</p> <p>Warning</p> <p>The <code>output_layer</code> parameter does not work for PyTorch models!</p> <p>It is possible that all failure cases were not covered in the tests, in that case please open an issue so the team will work on it!</p>"},{"location":"api/attributions/regression/","title":"Regression explanations with Xplique","text":"<p>Attributions: Regression and Tabular data tutorial </p>"},{"location":"api/attributions/regression/#which-kind-of-tasks-are-supported-by-xplique","title":"Which kind of tasks are supported by Xplique?","text":"<p>With the operator's api you can treat many different problems with Xplique. There is one operator for each task.</p> Task and Documentation link <code>operator</code> parameter value  from <code>xplique.Tasks</code> Enum Tutorial link Classification <code>CLASSIFICATION</code> Object Detection <code>OBJECT_DETECTION</code> Regression <code>REGRESSION</code> Semantic Segmentation <code>SEMANTIC_SEGMENTATION</code> <p>Info</p> <p>They all share the API for Xplique attribution methods.</p> <p>Warning</p> <p>In Xplique, for now with regression, predictions can only be explained output by output. Indeed, explaining several output simultaneously brings new problematic and we are currently working on an operator to solve this.</p>"},{"location":"api/attributions/regression/#simple-example","title":"Simple example","text":"<pre><code>import xplique\nfrom xplique.attributions import Saliency\nfrom xplique.metrics import Deletion\n\n# load inputs and model\n# ...\n\n# for regression, `targets` indicates the output of interest, here output 3\ntargets = tf.one_hot([2], depth=nb_outputs, axis=-1)\n\n# compute explanations by specifying the regression operator\nexplainer = Saliency(model, operator=xplique.Tasks.REGRESSION)\nexplanations = explainer(inputs, targets)\n\n# compute metrics on these explanations\nmetric = Deletion(model, inputs, targets, operator=xplique.Tasks.REGRESSION)\nscore_saliency = metric(explanations)\n</code></pre>"},{"location":"api/attributions/regression/#how-to-use-it","title":"How to use it?","text":"<p>To apply attribution methods, the common API documentation describes the parameters and how to fix them. However, depending on the task and thus on the <code>operator</code>, there are three points that vary:</p> <ul> <li> <p>The <code>operator</code> parameter value, it is an Enum or a string identifying the task,</p> </li> <li> <p>The model's output specification, as <code>model(inputs)</code> is used in the computation of the operators, and</p> </li> <li> <p>The <code>targets</code> parameter format, indeed, the <code>targets</code> parameter specifies what to explain and the format of such specification depends on the task.</p> </li> </ul>"},{"location":"api/attributions/regression/#the-operator","title":"The <code>operator</code>","text":""},{"location":"api/attributions/regression/#how-to-specify-it","title":"How to specify it","text":"<p>In Xplique, to adapt attribution methods, you should specify the task to the <code>operator</code> parameter. In the case of regression, with either: <pre><code>Method(model, operator=\"regression\")\n# or\nMethod(model, operator=xplique.Tasks.REGRESSION)\n</code></pre></p>"},{"location":"api/attributions/regression/#the-computation","title":"The computation","text":"<p>The regression operator works similarly to the classification operator, it asks for the output of interest via <code>targets</code> and returns this output. See targets section for more detail. <pre><code>scores = tf.reduce_sum(model(inputs) * targets, axis=-1)\n</code></pre></p>"},{"location":"api/attributions/regression/#the-behavior","title":"The behavior","text":"<ul> <li>In the case of perturbation-based methods, the perturbation score corresponds to the difference between the initial value of the output of interest and the same output for predictions over perturbed inputs.</li> <li>For gradient-based methods, the gradient of the model's predictions for the output of interest.</li> </ul>"},{"location":"api/attributions/regression/#models-output","title":"Model's output","text":"<p>We expect <code>model(inputs)</code> to yield a \\((n, d)\\) tensor or array where \\(n\\) is the number of input samples and \\(d\\) is the number of variables the model should predict (possibly one). </p>"},{"location":"api/attributions/regression/#the-targets-parameter","title":"The <code>targets</code> parameter","text":""},{"location":"api/attributions/regression/#role","title":"Role","text":"<p>The <code>targets</code> parameter specifies what is to explain in the <code>inputs</code>, it is passed to the <code>explain</code> or to the <code>__call__</code> method of an explainer or metric and used by the operators. In the case of regression it indicates which of the output should be explained.</p>"},{"location":"api/attributions/regression/#format","title":"Format","text":"<p>The <code>targets</code> parameter in the case of regression should have the same shape as the model's output as they are multiplied. Hence, the shape is \\((n, d)\\) with \\(n\\) the number of samples to be explained (it should match the first dimension of <code>inputs</code>) and \\(d\\) is the number of variables (possibly one).</p>"},{"location":"api/attributions/regression/#in-practice","title":"In practice","text":"<p>In the simple example, the <code>targets</code> value provided is computed with <code>tf.one_hot</code>. Indeed, the regression operator takes as <code>targets</code> the one hot encoding of the index of the output to explain.</p>"},{"location":"api/attributions/semantic_segmentation/","title":"Semantic segmentation explanations with Xplique","text":"<p>Attributions: Semantic segmentation tutorial </p>"},{"location":"api/attributions/semantic_segmentation/#which-kind-of-tasks-are-supported-by-xplique","title":"Which kind of tasks are supported by Xplique?","text":"<p>With the operator's api you can treat many different problems with Xplique. There is one operator for each task.</p> Task and Documentation link <code>operator</code> parameter value  from <code>xplique.Tasks</code> Enum Tutorial link Classification <code>CLASSIFICATION</code> Object Detection <code>OBJECT_DETECTION</code> Regression <code>REGRESSION</code> Semantic Segmentation <code>SEMANTIC_SEGMENTATION</code> <p>Info</p> <p>They all share the API for Xplique attribution methods.</p>"},{"location":"api/attributions/semantic_segmentation/#simple-example","title":"Simple example","text":"<pre><code>import xplique\nfrom xplique.utils_functions.segmentation import get_connected_zone\nfrom xplique.attributions import Saliency\nfrom xplique.metrics import Deletion\n\n# load images and model\n# ...\n\n# extract targets individually\ncoordinates_of_object = (42, 42)\npredictions = model(image)\ntarget = get_connected_zone(predictions, coordinates_of_object)\ninputs = tf.expand_dims(image, 0)\ntargets = tf.expand_dims(target, 0)\n\nexplainer = Saliency(model, operator=xplique.Tasks.SEMANTIC_SEGMENTATION)\nexplanations = explainer(inputs, targets)\n\nmetric = Deletion(model, inputs, targets, operator=xplique.Tasks.SEMANTIC_SEGMENTATION)\nscore_saliency = metric(explanations)\n</code></pre>"},{"location":"api/attributions/semantic_segmentation/#how-to-use-it","title":"How to use it?","text":"<p>To apply attribution methods, the common API documentation describes the parameters and how to fix them. However, depending on the task and thus on the <code>operator</code>, there are three points that vary:</p> <ul> <li> <p>The <code>operator</code> parameter value, it is an Enum or a string identifying the task,</p> </li> <li> <p>The model's output specification, as <code>model(inputs)</code> is used in the computation of the operators, and</p> </li> <li> <p>The <code>targets</code> parameter format, indeed, the <code>targets</code> parameter specifies what to explain and the format of such specification depends on the task.</p> </li> </ul> <p>Info</p> <p>Applying attribution methods to semantic segmentation with Xplique has a particularity: a set of functions from <code>utils_functions.segmentation</code> are used to define <code>targets</code> and are documented in the a specific section.</p>"},{"location":"api/attributions/semantic_segmentation/#the-operator","title":"The <code>operator</code>","text":""},{"location":"api/attributions/semantic_segmentation/#how-to-specify-it","title":"How to specify it","text":"<p>In Xplique, to adapt attribution methods, you should specify the task to the <code>operator</code> parameter. In the case of semantic segmentation, with either: <pre><code>Method(model, operator=\"semantic segmentation\")\n# or\nMethod(model, operator=xplique.Tasks.SEMANTIC_SEGMENTATION)\n</code></pre></p>"},{"location":"api/attributions/semantic_segmentation/#the-computation","title":"The computation","text":"<p>The operator for semantic segmentation is similar to the classification one, but the output is not a class but a matrix of class. The operator should take this position into account, thus it manipulates two elements:</p> <ul> <li> <p>The zone of interest: it represents the zone/pixels on which we want the explanation to be made. It could be a single object like a person, a group of objects like trees, a part of an object that has been wrongly classified, or even the border of an object. Note that the concept of object here only makes sense for us as the model only classifies pixels, which is why Xplique includes the segmentation utils function.</p> </li> <li> <p>The class of interest: it represents the channel of the prediction we want to explain. Similarly to classification, we could either want to explain a cat or a dog in the same image. Note that in some case, providing several classes could make sense, see the example of applications with explanations of the borders between two objects.</p> </li> </ul> <p>Indeed, the semantic segmentation operator multiplies the model's predictions by the targets, which can be considered a mask. Then the operator divide the sum of the remaining predictions over the size of the mask. In some, the operator take the mean predictions over the zone and class of interest</p> \\[ score = mean_{over\\ the\\ zone\\ and\\ class\\ of\\ interest}(model(inputs)) \\] <p>Note that the two information need to be communicated through the <code>targets</code> parameter.</p>"},{"location":"api/attributions/semantic_segmentation/#the-behavior","title":"The behavior","text":"<ul> <li>In the case of perturbation-based methods, the perturbation score is the difference between the operator's output for the studied <code>inputs</code> and the perturbed inputs. Where the operator's output is the mean logits value over the class and zone of interest.</li> <li>For gradient-based methods, the gradient of the mean of model's predictions limited to the zone and class of interest.</li> </ul>"},{"location":"api/attributions/semantic_segmentation/#models-output","title":"Model's output","text":"<p>We expect <code>model(inputs)</code> to yield a \\((n, h, w, c)\\) tensor or array where:</p> <ul> <li>\\(n\\): the number of inputs, it should match the first dimension of <code>inputs</code></li> <li>\\(h\\): the height of the images</li> <li>\\(w\\): the width of the images</li> <li>\\(c\\): the number of classes</li> </ul> <p>Warning</p> <p>The model's output for each pixel is expected to be a soft output and not the class prediction or a one hot encoding of the class. Otherwise the attribution methods will not be able to compare predictions efficiently.</p> <p>Warning</p> <p>Contrary to classification, here a softmax or comparable last layer is necessary as zeros are interpreted by the operator as non-zone of interest. In this sense, strictly positive values are required.</p>"},{"location":"api/attributions/semantic_segmentation/#the-targets-parameter","title":"The <code>targets</code> parameter","text":""},{"location":"api/attributions/semantic_segmentation/#role","title":"Role","text":"<p>The <code>targets</code> parameter specifies what is to explain in the <code>inputs</code>, it is passed to the <code>explain</code> or to the <code>__call__</code> method of an explainer or metric and used by the operators. In the case of semantic segmentation, the <code>targets</code> parameter enables the communication of the two necessary information for the semantic segmentation operator:</p> <ul> <li> <p>The zone of interest: to communicate the zone of interest via the <code>targets</code> parameter, the <code>targets</code> value on pixels that are not in the zone of interest should be set to zero. In this way <code>tf.math.sign(targets)</code> creates a mask of the zone of interest. This operation should be done along the \\(h\\) and \\(w\\) dimensions of <code>targets</code>.</p> </li> <li> <p>The class of interest: similarly to the zone of interest, the class of interest is communicated by setting other classes along the \\(c\\) dimension to zero.</p> </li> </ul>"},{"location":"api/attributions/semantic_segmentation/#format","title":"Format","text":"<p>The <code>targets</code> parameter in the case of semantic segmentation should have the same shape as the model's output as a difference is made between the two. Hence, the shape is \\((n, h, w,c )\\) with:     - \\(n\\) is the number of inputs, it should match the first dimension of <code>inputs</code>     - \\(h\\) is the height of the images     - \\(w\\) is the width of the images     - \\(c\\) is the number of classes</p> <p>Then it should take values in \\(\\{-1, 0, 1\\}\\), \\(1\\) in the zone of interest (zone on the \\(h\\) and \\(w\\) dimension) and \\(0\\) elsewhere. Similarly, values not on the channel corresponding to the class of interest (dimension \\(c\\)) should be \\(0\\). In the case of the explanation of a border or with contrastive explanations, \\(-1\\) values might be used.</p>"},{"location":"api/attributions/semantic_segmentation/#in-practice","title":"In practice","text":"<p>The <code>targets</code> parameter is computed via the xplique.utils_functions.segmentation set of functions. They manipulate model's prediction individually, as explanation requests are different between each image. Please refer to the segmentation utils functions for detail on how to design <code>targets</code>.</p> <p>Tip</p> <p>You should not worry about such specification as the segmentation utils functions will do the work in your stead.</p> <p>Warning</p> <p>The <code>targets</code> parameter for each sample should be defined individually. Then the batch dimension should be added manually or individual values should be stacked.</p>"},{"location":"api/attributions/semantic_segmentation/#the-segmentation-utils-functions","title":"The segmentation utils functions","text":"<p>Source</p> <p>The segmentation utils functions are a set a utility functions used to compute the <code>targets</code> parameter values. They should be applied to each image separately as each segmentation is different want the things to explain differs between images. Nonetheless, you could use <code>tf.map_fn</code> to apply the same function to several images.</p> <p>An example of application of those functions can be found in the Attribution: Semantic segmentation tutorial.</p> <p>For now, there are four functions:</p>"},{"location":"api/attributions/semantic_segmentation/#get_class_zone_1","title":"<code>get_class_zone</code>","text":"<p>The most simple, where the class of interest is <code>class_id</code> and the zone of interest corresponds to pixels where the class is the argmax along the classes dimension of the model's prediction. This function can be used to design <code>targets</code> to explain:</p> <ul> <li>the class of a crowd of objects</li> <li>the class of an object, if there is only one object in the image.</li> <li>the class of a set of objects, if there are few and locally close objects of the same class.</li> </ul>"},{"location":"api/attributions/semantic_segmentation/#get_class_zone","title":"<code>get_class_zone(predictions:  Union[tensorflow.python.framework.tensor.Tensor, ],  class_id:  int) -&gt; tensorflow.python.framework.tensor.Tensor <p>Extract a mask for the class <code>c</code>. The mask correspond to the pixels where the maximum prediction correspond to the class <code>c</code>. Other classes channels are set to zero. </p> <p>Parameters</p> <ul> <li> <p>predictions            : Union[tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Output of the model, it should be the output of a softmax function.</p><p> We assume the shape (h, w, c).</p> </li> </ul>  <li> <p>class_id            : int </p> <ul> <li><p> Index of the channel of the class of interest.</p> </li> </ul> </li>  <p>Return</p> <ul> <li> <p>class_zone_mask            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Mask of the zone corresponding to the class of interest.</p><p> Only the corresponding channel is non-zero.</p><p> The shape is the same as <code>predictions</code>, (h, w, c).</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/attributions/semantic_segmentation/#get_connected_zone_1","title":"<code>get_connected_zone</code>","text":"<p>Here <code>coordinates</code> is a \\((h, w)\\) tuple that indicates the indices of a pixel of the image. The class of interest is the argmax along the classes dimension for this given pixel. Then the zone of interest is the set of pixels with the same argmax class that forms a connected zone with the indicated pixel. This function can be seen as selecting a zone with a point in this zone. This function can be used to design <code>targets</code> to explain:</p> <ul> <li>the class of an object.</li> <li>the class of a set of objects, if they are connected.</li> <li>the class of part of an object, if this part have been classified differently than the object and the other surrounding objects.</li> </ul>"},{"location":"api/attributions/semantic_segmentation/#get_connected_zone","title":"<code>get_connected_zone(predictions:  Union[tensorflow.python.framework.tensor.Tensor, ],  coordinates:  Tuple[int, int]) -&gt; tensorflow.python.framework.tensor.Tensor <p>Extract a connected mask around <code>coordinates</code>. The mask correspond to the pixels where the maximum prediction correspond to the maximum predicted class at <code>coordinates</code>. This class mask is then limited to the connected zone around <code>coordinates</code>. Other classes channels are set to zero. </p> <p>Parameters</p> <ul> <li> <p>predictions            : Union[tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Output of the model, it should be the output of a softmax function.</p><p> We assume the shape (h, w, c).</p> </li> </ul>  <li> <p>coordinates            : Tuple[int, int] </p> <ul> <li><p> Tuple of coordinates of the point inside the zone of interest.</p> </li> </ul> </li>  <p>Return</p> <ul> <li> <p>connected_zone_mask            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Mask of the connected zone around <code>coordinates</code> with similar class prediction.</p><p> Only the corresponding channel is non-zero.</p><p> The shape is the same as <code>predictions</code>, (h, w, c).</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/attributions/semantic_segmentation/#list_class_connected_zones_1","title":"<code>list_class_connected_zones</code>","text":"<p>A mix of <code>get_class_zone</code> and <code>get_connected_zone</code>. <code>class_id</code> indicates the class of interest and each connected zone for this class becomes a zone of interest (apart from zones with size under <code>zone_minimum_size</code>). It is useful for automatized treatment of explainability, but may generate explanations for zones we may not want to explain. Nonetheless, it can be used to design <code>targets</code> to explain similar elements as <code>get_connected_zone</code>.</p> <p>Warning</p> <p>Contrarily to the other utils function for segmentation, here output is a list of tensors.</p>"},{"location":"api/attributions/semantic_segmentation/#list_class_connected_zones","title":"<code>list_class_connected_zones(predictions:  Union[tensorflow.python.framework.tensor.Tensor, ],  class_id:  int,  zone_minimum_size:  int = 100) -&gt; List[tensorflow.python.framework.tensor.Tensor] <p>List all connected zones for a given class. A connected zone is a set of pixels next to each others where the maximum prediction correspond to the same class. This function generate a list of connected zones, each element of the list have a similar format to <code>get_connected_zone</code> outputs. </p> <p>Parameters</p> <ul> <li> <p>predictions            : Union[tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Output of the model, it should be the output of a softmax function.</p><p> We assume the shape (h, w, c).</p> </li> </ul>  <li> <p>class_id            : int </p> <ul> <li><p> Index of the channel of the class of interest.</p> </li> </ul> </li> <li> <p>zone_minimum_size            : int = 100 </p> <ul> <li><p> Threshold of number of pixels under which zones are not returned.</p> </li> </ul> </li>  <p>Return</p> <ul> <li> <p>connected_zones_masks_list            : List[tensorflow.python.framework.tensor.Tensor] </p> <ul> <li><p> List of the connected zones masks for a given class.</p><p> Each zone predictions shape is the same as <code>predictions</code>, (h, w, c).</p><p> Only the corresponding channel is non-zero.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/attributions/semantic_segmentation/#get_in_out_border_1","title":"<code>get_in_out_border</code>","text":"<p>This function allows to compute the <code>targets</code> needed to explain the border of an object. For this function, <code>class_target_mask</code> encodes the class and the zone of interest. From this zone, the in-border (all pixels of the zone with contact to non-zone pixels) and the out-border (all non-zone pixels with contact to pixels of the zone) are computed. Then, the in-borders pixels are set with the predictions values, and out-borders with the opposite of the predictions values. Therefore, explaining this border corresponds to explaining what increased the class predictions inside the zone and decreased it outside, but along the borders of the zone.</p>"},{"location":"api/attributions/semantic_segmentation/#get_in_out_border","title":"<code>get_in_out_border(class_zone_mask:  Union[tensorflow.python.framework.tensor.Tensor, ]) -&gt; tensorflow.python.framework.tensor.Tensor <p>Extract the border of a zone of interest, then put <code>1</code> on the inside border and <code>-1</code> on the outside border. </p> <p>Parameters</p> <ul> <li> <p>class_zone_mask            : Union[tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Mask delimiting the zone of interest,  for the class of interest only one channel should have non-zero values, the one corresponding to the class.</p><p> We assume the shape (h, w, c) same as the model output for one element.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>class_borders_masks            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Mask of the borders of the zone of the class of interest.</p><p> Only the corresponding channel is non-zero.</p><p> Inside borders are set to <code>1</code> and outside borders are set to <code>-1</code>.</p><p> The shape is the same as <code>class_zone_mask</code>, (h, w, c).</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/attributions/semantic_segmentation/#get_common_border_1","title":"<code>get_common_border</code>","text":"<p>This function uses two borders computed via the previous function and limits the zone of interest to the common part between both zone of interest. The classes of interest are merged, thus creating a second class of interest. Therefore, this function enables the creation of <code>targets</code> to explain the border between two objects.</p>"},{"location":"api/attributions/semantic_segmentation/#get_common_border","title":"<code>get_common_border(border_mask_1:  Union[tensorflow.python.framework.tensor.Tensor, ],  border_mask_2:  Union[tensorflow.python.framework.tensor.Tensor, ]) -&gt; tensorflow.python.framework.tensor.Tensor <p>Compute the common part between <code>border_mask_1</code> and <code>border_mask_2</code> masks. Those borders should be computed using <code>get_in_out_border</code>. </p> <p>Parameters</p> <ul> <li> <p>border_mask_1            : Union[tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Border of the first zone of interest. Computed with <code>get_in_out_border</code>.</p> </li> </ul>  <li> <p>border_mask_2            : Union[tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Border of the second zone of interest. Computed with <code>get_in_out_border</code>.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>common_borders_masks            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Mask of the common borders between two zones of interest.</p><p> Only the two corresponding channels are non-zero.</p><p> Inside borders are set to <code>1</code> and outside borders are set to <code>-1</code>, Respectively on the two channels.</p><p> The shape is the same as the input border masks, (h, w, c).</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/attributions/semantic_segmentation/#what-can-be-explained-with-it","title":"What can be explained with it?","text":"<p>There are many things that we may want to explain in semantic segmentation, and in this section present different possibilities. The segmentation utils functions allow the design of the <code>targets</code> parameter to specify what to explain.</p> <p>Warning</p> <p>The concept object does not make sense for the model, a semantic segmentation model only classifies pixels. However, what humans want to explain are mainly objects, sets of objects or parts of them.</p> <p>Info</p> <p>As objects do not make sense for the model, to stay coherent when manipulating objects. The only condition is that the predicted class on this connected zone is the same for all pixels.</p> <p>For a concrete example, please refer to the Attributions: Semantic segmentation tutorial.</p>"},{"location":"api/attributions/semantic_segmentation/#the-class-of-an-object","title":"The class of an object","text":"<p>Here an object can be a person walking on a street, the dog by his side or a car.</p> <p>However, what humans call an object does not make sense for model, hence explaining an object corresponds to explaining a zone of interest where pixels have the same classification.</p> <p>Warning</p> <p>The zone should be extracted from the model's prediction and not the labels.</p> <p>To explain the difference between labels and predictions there are two possibilities:</p> <ul> <li>either the difference is a single zone with a different class than the surroundings, then this zone can be considered an object.</li> <li>or the difference is more complex or mixed with other objects. Then the zones in the union but not in the intersection of both should be iteratively considered objects and explained. It is not recommended to treat them simultaneously.</li> </ul>"},{"location":"api/attributions/semantic_segmentation/#the-class-of-a-set-of-objects","title":"The class of a set of objects","text":"<p>A set of objects can be a group of people walking down a street or a set of trees on one side of the road.</p> <p>There are three cases that can be considered set of objects:</p> <ul> <li>Connected set of objects, it can be seen as only one big zone and treated the same as in 1.</li> <li>Locally close set of objects, this could also considered a big zone, but it is harder to compute.</li> <li>Set of objects dispersed on the image and hardly countable, if there are a multitude of objects then, it can be seen as a crowd of objects. Otherwise, it should not be treated together.</li> </ul>"},{"location":"api/attributions/semantic_segmentation/#the-class-of-part-of-an-object","title":"The class of part of an object","text":"<p>A part of an object can be the leg of a person, the head of a dog, or a person in a group of people. This is interesting when the part and the object have been classified differently by the model. It should be considered an object as in 1.</p>"},{"location":"api/attributions/semantic_segmentation/#the-class-of-a-crowd-of-objects","title":"The class of a crowd of objects","text":"<p>A crowd is a set of hardly countable objects, it can be a set of clouds, a multitude of people on the sidewalk or trees in a landscape.</p>"},{"location":"api/attributions/semantic_segmentation/#the-border-of-an-object","title":"The border of an object","text":"<p>The border of an object is the limit between the pixels inside the object and those outside of it. Here the object should correspond to a connected zone of pixels where the model predicts the same class.</p> <p>It can be the contour of three people on the side walk or of trees on a landscape. It is interesting when the border is hard to define between similarly colored pixels or when the model prediction is not precise.</p>"},{"location":"api/attributions/semantic_segmentation/#the-border-between-two-objects","title":"The border between two objects","text":"<p>The border between two objects is the common part between two borders of objects when those two are connected. This can be the border between a person and his wrongly classified leg.</p>"},{"location":"api/attributions/semantic_segmentation/#binary-semantic-segmentation","title":"Binary semantic segmentation","text":"<p>As described in the operator description, the output of the model should have a shape of \\((n, h, w, c)\\). However, in binary semantic segmentation, the two classes are often encoded by positive and negative value along only one channel with shape \\((n, h, w)\\).</p> <p>The easiest way to apply xplique on such model is to wrap the model to match the expected format. If we suppose that the output of the binary semantic segmentation model have a shape of \\((n, h, w)\\), that negative values encode class \\(0\\), and that positive values encode class \\(1\\). Then the wrapper can take the form:</p> <pre><code>class Wrapper():\n    def __init__(model):\n        self.model = model\n\n    def __call__(inputs):\n        binary_segmentation = self.model(inputs)\n        class_0_mask = binary_segmentation &lt; 0\n        divided = tf.stack([-binary_segmentation * tf.cast(class_0_mask, tf.float32),\n                            binary_segmentation * tf.cast(tf.logical_not(class_0_mask), tf.float32)],\n                           axis=-1)\n        return tf.nn.softmax(divided, axis=-1)\n\nwrapped_model = wrap(binary_seg_model)\n</code></pre>"},{"location":"api/attributions/methods/deconvnet/","title":"Deconvnet","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p>Deconvnet is one of the first attribution method and was proposed in 2013. Its operation is similar to Saliency: it consists in backpropagating the output score with respect to the input, however, at each non-linearity (the ReLUs), only the positive gradient (even of negative activations) are backpropagated.</p> <p>More precisely, with \\(f\\) our classifier and \\(f_l(x)\\) the activation at layer \\(l\\), we usually have:</p> \\[ \\frac{\\partial f(x)}{\\partial f_{l}(x)} =  \\frac{\\partial f(x)}{\\partial \\text{ReLU}(f_{l}(x))} \\frac{\\partial \\text{ReLU}(f_l(x))}{\\partial f_{l}(x)} = \\frac{\\partial f(x)}{\\partial \\text{ReLU}(f_{l}(x))} \\odot \\mathbb{1}(f_{l}(x)) \\] <p>with \\(\\mathbb{1}(.)\\) the indicator function. With Deconvnet, the backpropagation is modified such that : </p> \\[ \\frac{\\partial f(x)}{\\partial f_{l}(x)} = \\frac{\\partial f(x)}{\\partial \\text{ReLU}(f_{l}(x))} \\odot \\mathbb{1}(\\frac{\\partial f(x)}{\\partial \\text{ReLU}(f_{l}(x))}) \\]"},{"location":"api/attributions/methods/deconvnet/#example","title":"Example","text":"<pre><code>from xplique.attributions import DeconvNet\n\n# load images, labels and model\n# ...\n\nmethod = DeconvNet(model)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/deconvnet/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>DeconvNet: Going Further</li> </ul>"},{"location":"api/attributions/methods/deconvnet/#DeconvNet","title":"<code>DeconvNet</code>","text":"<p>Used to compute the DeconvNet method, which modifies the classic Saliency procedure on ReLU's non linearities, allowing only the positive gradients (even from negative inputs) to pass through. </p>"},{"location":"api/attributions/methods/deconvnet/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  reducer:  Optional[str] = 'mean')</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p> Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>reducer            : Optional[str] = 'mean' </p> <ul> <li><p> String, name of the reducer to use. Either \"min\", \"mean\", \"max\", \"sum\", or <code>None</code> to ignore.</p><p> Used only for images to obtain explanation with shape (n, h, w, 1).</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/deconvnet/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ],  targets:  Union[tensorflow.python.framework.tensor.Tensor, , None] = None) -&gt; tensorflow.python.framework.tensor.Tensor <p>Compute the explanations of the given inputs. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul>  <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, , None] = None  <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Explanation generated by the method.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/attributions/methods/forgrad/","title":"FORGrad","text":"<p> View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>ForGrad is an enhancement for any attribution method by effectively filtering out high-frequency noise in gradient-based attribution maps, resulting in improved explainability scores and promoting the adoption of more computationally efficient techniques for model interpretability.</p> <p>Quote</p> <p>The application of an optimal low-pass filter to attribution maps improves gradient-based attribution methods significantly, resulting in higher explainability scores across multiple models and elevating gradient-based methods to a top ranking among state-of-the-art techniques, sparking renewed interest in simpler and more computationally efficient explainability approaches.</p> <p>-- Gradient strikes back: How filtering out high frequencies improves explanations (2023)<sup>1</sup></p> <p>In a more precise manner, to obtain an attribution map \\(\\varphi_\\sigma(x)\\), we apply a filter \\(w_\\sigma\\) with a cutoff value \\(\\sigma\\) to remove high frequencies, as shown in the equation:</p> \\[ \\varphi_\\sigma(x) = \\mathcal{F}^{-1}((\\mathcal{F} \\cdot \\varphi)(x) \\odot w_\\sigma) \\] <p>The parameter \\(\\sigma\\) controls the amount of frequencies retained and ranges between \\((0, W]\\), where \\(W\\) represents the dimension of the squared image. A value of \\(0\\) eliminates all frequencies, while \\(W\\) retains all frequencies. The paper presents a method to estimate the optimal cutoff, and for ImageNet images, the recommended default value for the optimal sigma is typically around 15.</p>"},{"location":"api/attributions/methods/forgrad/#example","title":"Example","text":"<pre><code>from xplique.attributions import Saliency\nfrom xplique.common import forgrad\n\n# load images, labels and model\n# ...\n\nmethod = Saliency(model)\nexplanations = method.explain(images, labels)\nexplanations_filtered = forgrad(explanations, sigma=15)\n</code></pre>"},{"location":"api/attributions/methods/forgrad/#notebooks","title":"Notebooks","text":"<ul> <li>FORGRad: Gradient strikes back with FORGrad</li> <li>Attribution Methods: Getting started</li> </ul>"},{"location":"api/attributions/methods/forgrad/#forgrad","title":"<code>forgrad(explanations:  tensorflow.python.framework.tensor.Tensor,  sigma:  int = 15) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>ForGRAD is a method that enhances any attributions explanations (particularly useful on gradients based attribution method) by eliminating high frequencies in the explanations. </p> <p>Parameters</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> List of explanations to filter. Explanation should be at least 3D (batch, height, width) and should have the same height and width.</p> </li> </ul> </li> <li> <p>sigma            : int = 15 </p> <ul> <li><p> Bandwith of the low pass filter. The higher the sigma, the more frequencies are kept.</p><p> Sigma should be positive and less than image size.</p><p> Default to paper recommendation, 15 for image size 224.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>filtered_explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Explanations low-pass filtered.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Gradient strikes back: How filtering out high frequencies improves explanations (2023) \u21a9</p> </li> </ol>"},{"location":"api/attributions/methods/grad_cam/","title":"GradCAM","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p>Grad-CAM is a technique for producing visual explanations that can be used on Convolutional Neural Network (CNN) which uses both gradients and the feature maps of the last convolutional layer.</p> <p>Quote</p> <p>Grad-CAM uses the gradients of any target concept (say logits for \u201cdog\u201d or even a caption), flowing into the final convolutional layer to produce a coarse localization map highlighting the important regions in the image for predicting the concept.</p> <p>-- Visual Explanations from Deep Networks via Gradient-based Localization (2016).</p> <p>More precisely, to obtain the localization map for a prediction \\(f(x)\\), we need to compute the weights \\(w_k\\) associated to each of the feature map channel \\(A^k \\in \\mathbb{R}^{W \\times H}\\). As we use the last convolutionnal layer, \\(k\\) will be the number of filters, \\(Z\\) is the number of pixels in each feature map (\\(Z = W \\times H\\), e.g. 7x7 for ResNet50).</p> \\[ w_k = \\frac{1}{Z} \\sum_i \\sum_j \\frac{\\partial f(x)}{\\partial A^k_{i,j}} \\] <p>We now use this weight to ponderate and aggregate the feature maps to obtain our grad-cam attribution \\(\\phi\\):</p> \\[ \\phi = \\text{max}(0, \\sum_k w_k A^k) \\] <p>Notice that \\(\\phi \\in \\mathbb{R}^{W \\times H}\\) and thus the size of the explanation depends on the size of the feature map (\\(W, H\\)) of the last feature map. In order to compare it to the original input \\(x\\), we upsample \\(\\phi\\) using bicubic interpolation.</p>"},{"location":"api/attributions/methods/grad_cam/#example","title":"Example","text":"<pre><code>from xplique.attributions import GradCAM\n\n# load images, labels and model\n# ...\n\nmethod = GradCAM(model)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/grad_cam/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>GradCAM: Going Further</li> </ul>"},{"location":"api/attributions/methods/grad_cam/#GradCAM","title":"<code>GradCAM</code>","text":"<p>Used to compute the Grad-CAM visualization method. </p>"},{"location":"api/attributions/methods/grad_cam/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  conv_layer:  Union[str, int, None] = None)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>conv_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for Grad-CAM algorithm.</p><p> If an int is provided it will be interpreted as a layer index.</p><p> If a string is provided it will look for the layer name.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/grad_cam/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Compute and resize explanations to match inputs shape. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>grad_cam            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Grad-CAM explanations, same shape as the inputs except for the channels.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Visual Explanations from Deep Networks via Gradient-based Localization (2016). \u21a9</p> </li> </ol>"},{"location":"api/attributions/methods/grad_cam_pp/","title":"Grad-CAM ++","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p>Grad-CAM++ is a technique for producing visual explanations that can be used on Convolutional Neural Network (CNN) which uses both gradients and the feature maps of the last convolutional layer.</p> <p>More precisely, to obtain the localization map for a prediction \\(f(x)\\), we need to compute the weights \\(w_k\\) associated to each of the feature map channel \\(A^k \\in \\mathbb{R}^{W \\times H}\\). As we use the last convolutionnal layer, \\(k\\) will be the number of filters, \\(Z\\) is the number of pixels in each feature map (\\(Z = W \\times H\\), e.g. 7x7 for ResNet50). once this weights are obtained, we use them to ponderate  and aggregate the feature maps to obtain our grad-cam++ attribution \\(\\phi\\):</p> \\[ \\phi = \\text{max}(0, \\sum_k w_k A^k) \\] <p>Notice that \\(\\phi \\in \\mathbb{R}^{W \\times H}\\) and thus the size of the explanation depends on the size of the feature map (\\(W, H\\)) of the last feature map. In order to compare it to the original input \\(x\\), we upsample \\(\\phi\\) using bicubic interpolation.</p>"},{"location":"api/attributions/methods/grad_cam_pp/#example","title":"Example","text":"<pre><code>from xplique.attributions import GradCAMPP\n\n# load images, labels and model\n# ...\n\nmethod = GradCAMPP(model)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/grad_cam_pp/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>GradCAMPP: Going Further</li> </ul>"},{"location":"api/attributions/methods/grad_cam_pp/#GradCAMPP","title":"<code>GradCAMPP</code>","text":"<p>Used to compute the Grad-CAM++ visualization method. </p>"},{"location":"api/attributions/methods/grad_cam_pp/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  conv_layer:  Union[str, int, None] = None)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>conv_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for Grad-CAM++ algorithm.</p><p> If an int is provided it will be interpreted as a layer index.</p><p> If a string is provided it will look for the layer name.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/grad_cam_pp/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Compute and resize explanations to match inputs shape. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>grad_cam            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Grad-CAM explanations, same shape as the inputs except for the channels.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Grad-CAM++: Improved Visual Explanations for Deep Convolutional Networks (2017). \u21a9</p> </li> </ol>"},{"location":"api/attributions/methods/gradient_input/","title":"Gradient \\(\\odot\\) Input","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p>Gradient \\(\\odot\\) Input is a visualization techniques based on the gradient of a class score relative to the input, element-wise with the input. This method was introduced by Shrikumar et al., 2016<sup>1</sup>, in an old version of their DeepLIFT paper<sup>2</sup>.</p> <p>Quote</p> <p>Gradient inputs was at first proposed as a technique to improve the sharpness of the attribution maps. The attribution is computed taking the (signed) partial derivatives of the output with respect to the input and multiplying them with the input itself.</p> <p>-- Towards better understanding of the gradient-based attribution methods for Deep Neural Networks (2017)<sup>3</sup></p> <p>A theoretical analysis conducted by Ancona et al, 2018<sup>3</sup> showed that Gradient \\(\\odot\\) Input is equivalent to \\(\\epsilon\\)-LRP and DeepLift methods under certain conditions: using a baseline of zero, and with all biases to zero.</p> <p>More precisely, the explanation \\(\\phi\\) for an input \\(x\\) and a classifier \\(f\\) is defined as</p> \\[ \\phi = x \\odot \\nabla_x f(x) \\] <p>with \\(\\odot\\) the Hadamard product.</p>"},{"location":"api/attributions/methods/gradient_input/#example","title":"Example","text":"<pre><code>from xplique.attributions import GradientInput\n\n# load images, labels and model\n# ...\n\nmethod = GradientInput(model)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/gradient_input/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started </li> <li>Gradient \\(\\odot\\) Input: Going Further </li> </ul>"},{"location":"api/attributions/methods/gradient_input/#GradientInput","title":"<code>GradientInput</code>","text":"<p>Used to compute elementwise product between the saliency maps of Simonyan et al. and the input (Gradient x Input). </p>"},{"location":"api/attributions/methods/gradient_input/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 64,  operator:  Optional[Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float]] = None,  reducer:  Optional[str] = 'mean')</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 64 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Optional[Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float]] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>reducer            : Optional[str] = 'mean' </p> <ul> <li><p> String, name of the reducer to use. Either \"min\", \"mean\", \"max\", \"sum\", or <code>None</code> to ignore.</p><p> Used only for images to obtain explanation with shape (n, h, w, 1).</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/gradient_input/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ],  targets:  Union[tensorflow.python.framework.tensor.Tensor, , None] = None) -&gt; tensorflow.python.framework.tensor.Tensor <p>Compute the explanations of the given inputs. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul>  <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, , None] = None  <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Explanation generated by the method.</p> </li> </ul> </li> </ul> <p></p>   <ol> <li> <p>Not Just a Black Box: Learning Important Features Through Propagating Activation Differences \u21a9</p> </li> <li> <p>Learning Important Features Through Propagating Activation Differences \u21a9</p> </li> <li> <p>Towards better understanding of gradient-based attribution methods for Deep Neural Networks \u21a9\u21a9</p> </li> </ol>","text":""},{"location":"api/attributions/methods/guided_backpropagation/","title":"Guided Backpropagation","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p>Guided-backprop is one of the first attribution method and was proposed in 2014. Its operation is similar to Saliency: it consists in backpropagating the output score with respect to the input,  however, at each non-linearity (the ReLUs), only the positive gradient of positive activations are backpropagated. We can see this as a filter on the backprop.</p> <p>More precisely, with \\(f\\) our classifier and \\(f_l(x)\\) the activation at layer \\(l\\), we usually have:</p> \\[ \\frac{\\partial f(x)}{\\partial f_{l}(x)} =  \\frac{\\partial f(x)}{\\partial \\text{ReLU}(f_{l}(x))} \\frac{\\partial \\text{ReLU}(f_l(x))}{\\partial f_{l}(x)} = \\frac{\\partial f(x)}{\\partial \\text{ReLU}(f_{l}(x))} \\odot \\mathbb{1}(f_{l}(x)) \\] <p>with \\(\\mathbb{1}(.)\\) the indicator function. With Guided-backprop, the backpropagation is modified such that : </p> \\[ \\frac{\\partial f(x)}{\\partial f_{l}(x)} =   \\frac{\\partial f(x)}{\\partial \\text{ReLU}(f_{l}(x))} \\odot \\mathbb{1}(f_{l}(x)) \\odot \\mathbb{1}(\\frac{\\partial f(x)}{\\partial \\text{ReLU}(f_{l}(x))}) \\]"},{"location":"api/attributions/methods/guided_backpropagation/#example","title":"Example","text":"<pre><code>from xplique.attributions import GuidedBackprop\n\n# load images, labels and model\n# ...\n\nmethod = GuidedBackprop(model)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/guided_backpropagation/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>Guided Backprop: Going Further</li> </ul>"},{"location":"api/attributions/methods/guided_backpropagation/#GuidedBackprop","title":"<code>GuidedBackprop</code>","text":"<p>Used to compute the Guided Backpropagation, which modifies the classic Saliency procedure on ReLU's non linearities, allowing only the positive gradients from positive activations to pass through. </p>"},{"location":"api/attributions/methods/guided_backpropagation/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  reducer:  Optional[str] = 'mean')</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>reducer            : Optional[str] = 'mean' </p> <ul> <li><p> String, name of the reducer to use. Either \"min\", \"mean\", \"max\", \"sum\", or <code>None</code> to ignore.</p><p> Used only for images to obtain explanation with shape (n, h, w, 1).</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/guided_backpropagation/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ],  targets:  Union[tensorflow.python.framework.tensor.Tensor, , None] = None) -&gt; tensorflow.python.framework.tensor.Tensor <p>Compute the explanations of the given inputs. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul>  <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, , None] = None  <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Explanation generated by the method.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/attributions/methods/hsic/","title":"Hsic Attribution Method","text":"<p>View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>The Hsic attribution method from Novello, Fel, Vigouroux<sup>1</sup> explains a neural network's prediction for a given input image by assessing the dependence between the output and patches of the input. Thanks to the sample efficiency of HSIC Estimator, this black box method requires fewer forward passes to produce relevant explanations.</p> <p>Let's consider two random variables which are the perturbation associated with each patch of the input image, \\(X_i, i \\in \\{1,...d\\}\\) with \\(d= \\text{grid_size}^2\\) image patches and the output \\(Y\\). Let \\(X^1_i,...,X^p_i\\) and \\(Y^1,...,Y^p\\) be \\(p\\) samples of \\(X_i\\) and \\(Y\\). HSIC attribution method requires selecting a kernel for the input and the output to construct an RKHS on which is computed the Maximum Mean Discrepancy, a dissimilarity metric between distributions. Let \\(k:\\mathbb{R}^2 \\rightarrow \\mathbb{R}\\) and \\(l:\\mathbb{R}^2 \\rightarrow \\mathbb{R}\\) the kernels selected for \\(X_i\\) and \\(Y\\), HSIC is estimated with an error \\(\\mathcal{O}(1/\\sqrt{p})\\) using the estimator  $$ \\mathcal{H}^p_{X_i, Y} = \\frac{1}{(p-1)^2} \\operatorname{tr} (KHLH), $$ where \\(H, L, K \\in \\mathbb{R}^{p \\times p}\\) and \\(K_{ij} = k(x_i, x_j), L_{i,j} = l(y_i, y_j)\\) and \\(H_{ij} = \\delta(i=j) - p^{-1}\\) where \\(\\delta(i=j) = 1\\) if \\(i=j\\) and \\(0\\) otherwise.</p> <p>In the paper Making Sense of Dependence: Efficient Black-box Explanations Using Dependence Measure,  the sampler <code>LatinHypercube</code> is used to sample the perturbations. Note however that the present implementation uses <code>TFSobolSequence</code> as default sampler because <code>LatinHypercube</code> requires scipy \\(\\geq\\) <code>1.7.0</code>. you can nevertheless use this sampler -- which is included in the library -- by specifying it during the init of your explainer. </p> <p>For the kernel \\(k\\) applied on \\(X_i\\), a modified Dirac kernel is used to enable an ANOVA-like decomposition property that allows assessing pairwise patch interactions (see the paper for more details). For the kernel \\(l\\) of output \\(Y\\), a Radial Basis Function (RBF) is used.</p> <p>Tip</p> <p>We recommend using a grid size of \\(7 \\times 7\\) to define the image patches. The paper uses a number of forwards of \\(1500\\) to obtain the most faithful explanations and \\(750\\) for a more budget - but still faithful - version.</p> <p>Info</p> <p>To explain small objects in images, it may be necessary to increase the <code>grid_size</code>, which also requires an increase in <code>nb_design</code>. However, increasing both may impact the memory usage and result in out of memory errors, hence, setting <code>estimator_batch_size</code> parameter enables a limited usage of the memory. Note that the classical <code>batch_size</code> correspond to the batch_size used in the model call, here <code>estimator_batch_size</code> is intern to the method estimator.</p>"},{"location":"api/attributions/methods/hsic/#example","title":"Example","text":"<p>Low budget version</p> <pre><code>from xplique.attributions import HsicAttributionMethod\n\n# load images, labels and model\n# ...\n\nexplainer = HsicAttributionMethod(model, grid_size=7, nb_design=750)\nexplanations = explainer(images, labels)\n</code></pre> <p>High budget version</p> <pre><code>from xplique.attributions import HsicAttributionMethod\n\n# load images, labels and model\n# ...\n\nexplainer = HsicAttributionMethod(model, grid_size=7, nb_design=1500)\nexplanations = explainer(images, labels)\n</code></pre> <p>Recommended version, (you need scipy \\(\\geq\\) <code>1.7.0</code>)</p> <pre><code>from xplique.attributions import HsicAttributionMethod\nfrom xplique.attributions.global_sensitivity_analysis import LatinHypercube\n\n# load images, labels and model\n# ...\n\nexplainer = HsicAttributionMethod(model, \n                                  grid_size=7, nb_design=1500,\n                                  sampler = LatinHypercube(binary=True))\nexplanations = explainer(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/hsic/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started </li> </ul>"},{"location":"api/attributions/methods/hsic/#HsicAttributionMethod","title":"<code>HsicAttributionMethod</code>","text":"<p>HSIC Attribution Method. Compute the dependance of each input dimension wrt the output using Hilbert-Schmidt Independance Criterion, a perturbation function on a grid and an adapted sampling as described in the original paper. </p>"},{"location":"api/attributions/methods/hsic/#__init__","title":"<code>__init__(self,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 model,  grid_size:  int = 8,  nb_design:  int = 500,  sampler:  Optional[xplique.attributions.global_sensitivity_analysis.samplers.Sampler] = None,  estimator:  Optional[xplique.attributions.global_sensitivity_analysis.hsic_estimators.HsicEstimator] = None,  perturbation_function:  Union[Callable, str, None] = 'inpainting',  batch_size:  int = 256,  estimator_batch_size:  int = None,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : model </p> <ul> <li><p> Model used for computing explanations.</p> </li> </ul> </li> <li> <p>grid_size            : int = 8 </p> <ul> <li><p> Cut the image in a grid of (grid_size, grid_size) to estimate an indice per cell.</p> </li> </ul> </li> <li> <p>nb_design            : int = 500 </p> <ul> <li><p> Number of design for the sampler.</p> </li> </ul> </li> <li> <p>sampler            : Optional[xplique.attributions.global_sensitivity_analysis.samplers.Sampler] = None </p> <ul> <li><p> Sampler used to generate the (quasi-)monte carlo samples, LHS or QMC.</p><p> For more option, see the sampler module. Note that the original paper uses LHS but here the default sampler is TFSobolSequence as LHS requires scipy 1.7.0.</p> </li> </ul> </li> <li> <p>estimator            : Optional[xplique.attributions.global_sensitivity_analysis.hsic_estimators.HsicEstimator] = None </p> <ul> <li><p> Estimator used to compute the HSIC score.</p> </li> </ul> </li> <li> <p>perturbation_function            : Union[Callable, str, None] = 'inpainting' </p> <ul> <li><p> Function to call to apply the perturbation on the input. Can also be string: 'inpainting', 'blurring', or 'amplitude'.</p> </li> </ul> </li> <li> <p>batch_size            : int = 256 </p> <ul> <li><p> Batch size to use for the forwards.</p> </li> </ul> </li> <li> <p>estimator_batch_size            : int = None </p> <ul> <li><p> Batch size to use in the estimator. It should only be set if HSIC exceeds the memory.</p><p> By default, a tensor of <code>grid_size</code>\u00b2 * <code>nb_design</code>\u00b2 is created.</p><p> <code>estimator_batch_size</code> is used over the <code>nb_design</code>\u00b2 dimension.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/hsic/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Compute the total Sobol' indices according to the explainer parameter (perturbation function, grid size...). Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None). </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Images to be explained, either tf.dataset, Tensor or numpy array.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape (N, W, H, C) or (N, W, H).</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> One-hot encoding for classification or direction {-1, +1} for regression.</p><p> Tensor or numpy array.</p><p> Expected shape (N, C) or (N).</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>attributions_maps            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> GSA Attribution Method explanations, same shape as the inputs except for the channels.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Making Sense of Dependence: Efficient Black-box Explanations Using Dependence Measure (2022) \u21a9</p> </li> </ol>"},{"location":"api/attributions/methods/integrated_gradients/","title":"Integrated Gradients","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p>Integrated Gradients is a visualization technique resulting of a theoretical search for an explanatory method that satisfies two axioms, Sensitivity and Implementation Invariance (Sundararajan et al<sup>1</sup>).</p> <p>Quote</p> <p>We consider the straightline path (in \\(R^n\\)) from the baseline \\(\\bar{x}\\) to the input \\(x\\), and compute the gradients at all points along the path. Integrated gradients are obtained by cumulating these gradients.</p> <p>-- Axiomatic Attribution for Deep Networks (2017)<sup>1</sup></p> <p>Rather than calculating only the gradient relative to the image, the method consists of averaging the gradient values along the path from a baseline state to the current value. The baseline state is often set to zero, representing the complete absence of features.</p> <p>More precisely, with \\(x_0\\) the baseline state, \\(x\\) the image and \\(f\\) our classifier,  the Integrated Gradient attribution is defined as</p> \\[\\phi = (x - x_0) \\cdot \\int_0^1{ \\nabla_x f(x_0 + \\alpha (x - x_0) ) d\\alpha }\\] <p>In order to approximate from a finite number of steps, the implementation here use the Trapezoidal rule<sup>3</sup> and not a left-Riemann summation, which allows for more accurate results and improved performance. (see the paper below for a comparison of the methods<sup>2</sup>).</p>"},{"location":"api/attributions/methods/integrated_gradients/#example","title":"Example","text":"<pre><code>from xplique.attributions import IntegratedGradients\n\n# load images, labels and model\n# ...\n\nmethod = IntegratedGradients(model, steps=50, baseline_value=0.0)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/integrated_gradients/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>Integrated Gradients: Going Further</li> </ul>"},{"location":"api/attributions/methods/integrated_gradients/#IntegratedGradients","title":"<code>IntegratedGradients</code>","text":"<p>Used to compute the Integrated Gradients, by cumulating the gradients along a path from a baseline to the desired point. </p>"},{"location":"api/attributions/methods/integrated_gradients/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  reducer:  Optional[str] = 'mean',  steps:  int = 50,  baseline_value:  float = 0.0)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>reducer            : Optional[str] = 'mean' </p> <ul> <li><p> String, name of the reducer to use. Either \"min\", \"mean\", \"max\", \"sum\", or <code>None</code> to ignore.</p><p> Used only for images to obtain explanation with shape (n, h, w, 1).</p> </li> </ul> </li> <li> <p>steps            : int = 50 </p> <ul> <li><p> Number of points to interpolate between the baseline and the desired point.</p> </li> </ul> </li> <li> <p>baseline_value            : float = 0.0 </p> <ul> <li><p> Scalar used to create the the baseline point.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/integrated_gradients/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ],  targets:  Union[tensorflow.python.framework.tensor.Tensor, , None] = None) -&gt; tensorflow.python.framework.tensor.Tensor <p>Compute the explanations of the given inputs. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul>  <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, , None] = None  <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Explanation generated by the method.</p> </li> </ul> </li> </ul> <p></p>   <ol> <li> <p>Axiomatic Attribution for Deep Networks \u21a9\u21a9</p> </li> <li> <p>Computing Linear Restrictions of Neural Networks \u21a9</p> </li> <li> <p>Trapezoidal rule \u21a9</p> </li> </ol>","text":""},{"location":"api/attributions/methods/kernel_shap/","title":"Kernel Shap","text":"<p> View colab tutorial |  View source</p> <p>By setting appropriately the perturbation function, the similarity kernel and the interpretable model in the LIME framework we can theoretically obtain the Shapley Values more efficiently. Therefore, KernelShap is a method based on LIME with specific attributes.</p> <p>Quote</p> <p>The exact computation of SHAP values is challenging. However, by combining insights from current additive feature attribution methods, we can approximate them. We describe two model-agnostic approximation methods, [...] and another that is novel (Kernel SHAP)</p> <p>-- A Unified Approach to Interpreting Model Predictions<sup>1</sup></p>"},{"location":"api/attributions/methods/kernel_shap/#example","title":"Example","text":"<pre><code>from xplique.attributions import KernelShap\n\n# load images, labels and model\n# define a custom map_to_interpret_space function\n# ...\n\nmethod = KernelShap(model, map_to_interpret_space=custom_map)\nexplanations = method.explain(images, labels)\n</code></pre> <p>The choice of the map function will have a great deal toward the quality of explanation. By default, the map function use the quickshift segmentation of scikit-images</p>"},{"location":"api/attributions/methods/kernel_shap/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>KernelShap: Going Further</li> </ul>"},{"location":"api/attributions/methods/kernel_shap/#KernelShap","title":"<code>KernelShap</code>","text":"<p>By setting appropriately the perturbation function, the similarity kernel and the interpretable model in the LIME framework we can theoretically obtain the Shapley Values more efficiently. Therefore, KernelShap is a method based on LIME with specific attributes. </p>"},{"location":"api/attributions/methods/kernel_shap/#__init__","title":"<code>__init__(self,  model:  Callable,  batch_size:  int = 64,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  map_to_interpret_space:  Optional[Callable] = None,  nb_samples:  int = 800,  ref_value:  Optional[numpy.ndarray] = None)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : Callable </p> <ul> <li><p> The model from which we want to obtain explanations.</p> </li> </ul> </li> <li> <p>batch_size            : int = 64 </p> <ul> <li><p> Number of perturbed samples to process at once, mandatory when nb_samples is huge.</p><p> Notice, it is different compare to WhiteBox explainers which batch the inputs.</p><p> Here inputs are process one by one.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>map_to_interpret_space            : Optional[Callable] = None </p> <ul> <li><p> Function which group features of an input corresponding to the same interpretable feature (e.g super-pixel).</p><p> It allows to transpose from (resp. to) the original input space to (resp. from) the interpretable space.</p> </li> </ul> </li> <li> <p>nb_samples            : int = 800 </p> <ul> <li><p> The number of perturbed samples you want to generate for each input sample.</p><p> Default to 800.</p> </li> </ul> </li> <li> <p>ref_value            : Optional[numpy.ndarray] = None </p> <ul> <li><p> It defines reference value which replaces each feature when the corresponding interpretable feature is set to 0.</p><p> It should be provided as: a ndarray of shape (1) if there is no channels in your input and (C,) otherwise.</p><p> The default ref value is set to (0.5,0.5,0.5) for inputs with 3 channels (corresponding to a grey pixel when inputs are normalized by 255) and to 0 otherwise.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/kernel_shap/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>This method attributes the output of the model with given targets to the inputs of the model using the approach described above, training an interpretable model and returning a representation of the interpretable model. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Interpretable coefficients, same shape as the inputs, except for the channels.</p><p> Coefficients of the interpretable model. Those coefficients having the size of the interpretable space will be given the same value to coefficient which were grouped together (e.g belonging to the same super-pixel).</p> </li> </ul> </li> </ul> <p></p> <p>Warning</p> <p>The computation time might be very long depending on the hyperparameters settings. A huge number of perturbed samples and a fine-grained mapping may lead to better results but it is long to compute.</p>"},{"location":"api/attributions/methods/kernel_shap/#parameters-in-depth","title":"Parameters in-depth","text":""},{"location":"api/attributions/methods/kernel_shap/#map_to_interpret_space","title":"<code>map_to_interpret_space</code>:","text":"<p>Function which group features of an input corresponding to the same interpretable feature (e.g super-pixel).</p> <p>It allows to transpose from (resp. to) the original input space to (resp. from) the interpretable space.</p> <p>The default mappings are:</p> <ul> <li>- the quickshift segmentation algorithm for inputs with \\((N, W, H, C)\\) shape, we assume here such shape is used to represent \\((W, H, C)\\) images.</li> <li>- the felzenszwalb segmentation algorithm for inputs with \\((N, W, H)\\) shape, we assume here such shape is used to represent \\((W, H)\\) images.</li> <li>- an identity mapping if inputs has shape \\((N, W)\\) or \\((N, T, W)\\), we assume here your inputs are tabular data or time-series data.</li> </ul> <p>To use your own custom map function you should use the following scheme:</p> <pre><code>def custom_map_to_interpret_space(inputs: tf.tensor) -&gt;\ntf.tensor:\n    **some grouping techniques**\n    return mappings\n</code></pre> <p><code>mappings</code> should have the same dimension as input except for channels.</p> <p>For instance you can use the scikit-image (as we did for the quickshift algorithm) library to defines super pixels on your images.</p> <p>Info</p> <p>The quality of your explanation relies strongly on this mapping.</p> <p>Warning</p> <p>Depending on the mapping you might have a huge number of <code>interpretable_features</code>  (e.g you map pixels 2 by 2 on a 299x299 image). Thus, the compuation time might be very long!</p> <ol> <li> <p>A Unified Approach to Interpreting Model Predictions \u21a9</p> </li> </ol>"},{"location":"api/attributions/methods/lime/","title":"LIME","text":"<p> View colab tutorial |  View source</p> <p>The Lime method use an interpretable model to provide an explanation. More specifically, you map inputs (\\(x \\in R^d\\)) to an interpretable space (e.g super-pixels) of size num_interpetable_features. From there you generate perturbed interpretable samples (\\(z' \\in \\{0,1\\}^{num\\_interpretable\\_samples}\\) where \\(1\\) means we keep this specific interpretable feature).</p> <p>Once you have your interpretable samples you can map them back to their original space (the perturbed samples \\(z \\in R^d\\)) and obtain the label prediction of your model for each perturbed samples.</p> <p>In the Lime method you define a similarity kernel which compute the similarity between an input and its perturbed representations (either in the original input space or in the interpretable space): \\(\\pi_x(z',z)\\).</p> <p>Finally, you train an interpretable model per input, using interpretable samples along the corresponding perturbed labels and it will draw interpretable samples weighted by the similarity kernel. Thus, you will have an interpretable explanation (i.e in the interpretable space) which can be broadcasted afterwards to the original space considering the mapping you used.</p> <p>Quote</p> <p>The overall goal of LIME is to identify an interpretable model over the interpretable representation that is locally faithful to the classifier.</p> <p>-- \"Why Should I Trust You?\": Explaining the Predictions of Any Classifier.<sup>1</sup></p>"},{"location":"api/attributions/methods/lime/#example","title":"Example","text":"<pre><code>from xplique.attributions import Lime\n\n# load images, labels and model\n# define a custom map_to_interpret_space function\n# ...\n\nmethod = Lime(model, map_to_interpret_space=custom_map)\nexplanations = method.explain(images, labels)\n</code></pre> <p>The choice of the interpretable model and the map function will have a great deal toward the quality of explanation. By default, the map function use the quickshift segmentation of scikit-images</p>"},{"location":"api/attributions/methods/lime/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>LIME: Going Further</li> </ul>"},{"location":"api/attributions/methods/lime/#Lime","title":"<code>Lime</code>","text":"<p>Used to compute the LIME method. </p>"},{"location":"api/attributions/methods/lime/#__init__","title":"<code>__init__(self,  model:  Callable,  batch_size:  Optional[int] = None,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  interpretable_model:  Any = Ridge(alpha=2),  similarity_kernel:  Optional[Callable[[tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], tensorflow.python.framework.tensor.Tensor]] = None,  pertub_func:  Optional[Callable[[Union[int, tensorflow.python.framework.tensor.Tensor], int], tensorflow.python.framework.tensor.Tensor]] = None,  map_to_interpret_space:  Optional[Callable[[tensorflow.python.framework.tensor.Tensor], tensorflow.python.framework.tensor.Tensor]] = None,  ref_value:  Optional[numpy.ndarray] = None,  nb_samples:  int = 150,  distance_mode:  str = 'euclidean',  kernel_width:  float = 45.0,  prob:  float = 0.5)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : Callable </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = None </p> <ul> <li><p> Number of perturbed samples to process at once, mandatory when nb_samples is huge.</p><p> Notice, it is different compare to WhiteBox explainers which batch the inputs.</p><p> Here inputs are process one by one.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>interpretable_model            : Any = Ridge(alpha=2) </p> <ul> <li><p> Model object to train interpretable model.</p><p> See the documentation for more information.</p> </li> </ul> </li> <li> <p>similarity_kernel            : Optional[Callable[[tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], tensorflow.python.framework.tensor.Tensor]] = None </p> <ul> <li><p> Function which considering an input, perturbed instances of these input and the interpretable version of those perturbed samples compute the similarities between the input and the perturbed samples.</p><p> See the documentation for more information.</p> </li> </ul> </li> <li> <p>pertub_func            : Optional[Callable[[Union[int, tensorflow.python.framework.tensor.Tensor], int], tensorflow.python.framework.tensor.Tensor]] = None </p> <ul> <li><p> Function which generate perturbed interpretable samples in the interpretation space from the number of interpretable features (e.g nb of super pixel) and the number of perturbed samples you want per original input.</p><p> See the documentation for more information.</p> </li> </ul> </li> <li> <p>ref_value            : Optional[numpy.ndarray] = None </p> <ul> <li><p> It defines reference value which replaces each feature when the corresponding interpretable feature is set to 0.</p><p> It should be provided as: a ndarray of shape (1) if there is no channels in your input and (C,) otherwise  The default ref value is set to (0.5,0.5,0.5) for inputs with 3 channels (corresponding to a grey pixel when inputs are normalized by 255) and to 0 otherwise.</p> </li> </ul> </li> <li> <p>map_to_interpret_space            : Optional[Callable[[tensorflow.python.framework.tensor.Tensor], tensorflow.python.framework.tensor.Tensor]] = None </p> <ul> <li><p> Function which group features of an input corresponding to the same interpretable feature (e.g super-pixel).</p><p> It allows to transpose from (resp. to) the original input space to (resp. from) the interpretable space.</p><p> See the documentation for more information.</p> </li> </ul> </li> <li> <p>nb_samples            : int = 150 </p> <ul> <li><p> The number of perturbed samples you want to generate for each input sample.</p><p> Default to 150.</p> </li> </ul> </li> <li> <p>prob            : float = 0.5 </p> <ul> <li><p> The probability argument for the default pertub function.</p> </li> </ul> </li> <li> <p>distance_mode            : str = 'euclidean' </p> <ul> <li><p> The distance mode used in the default similarity kernel, you can choose either \"euclidean\" or \"cosine\" (will compute cosine similarity).</p><p> Default value set to \"euclidean\".</p> </li> </ul> </li> <li> <p>kernel_width            : float = 45.0 </p> <ul> <li><p> Width of your kernel. It is important to make it evolving depending on your inputs size otherwise you will get all similarity close to 0 leading to poor performance or NaN values.</p><p> Default to 45 (i.e adapted for RGB images).</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/lime/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>This method attributes the output of the model with given targets to the inputs of the model using the approach described above, training an interpretable model and returning a representation of the interpretable model. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Interpretable coefficients, same shape as the inputs, except for the channels.</p><p> Coefficients of the interpretable model. Those coefficients having the size of the interpretable space will be given the same value to coefficient which were grouped together (e.g belonging to the same super-pixel).</p> </li> </ul> </li> </ul> <p></p> <p>Warning</p> <p>The computation time might be very long depending on the hyperparameters settings. A huge number of perturbed samples and a fine-grained mapping may lead to better results but it is long to compute.</p>"},{"location":"api/attributions/methods/lime/#parameters-in-depth","title":"Parameters in-depth","text":""},{"location":"api/attributions/methods/lime/#interpretable_model","title":"<code>interpretable_model</code>:","text":"<p>A Model object providing a <code>fit</code> method that train the model with the following inputs:</p> <ul> <li>- <code>interpretable_inputs</code>: 2D <code>ndarray</code> of shape (\\(nb\\_samples\\) x \\(num\\_interp\\_features\\)),</li> <li>- <code>expected_outputs</code>: 1D <code>ndarray</code> of shape (\\(nb\\_samples\\)),</li> <li>- <code>weights</code>: 1D <code>ndarray</code> of shape (\\(nb\\_samples\\))</li> </ul> <p>The model object should also provide a <code>predict</code> and <code>fit</code> method.</p> <p>It should also have a <code>coef_</code> attributes (the interpretable explanations) at least once <code>fit</code> is called.</p> <p>As interpretable model you can use linear models from scikit-learn.</p> <p>Warning</p> <p>Note that here <code>nb_samples</code> doesn't indicates the length of inputs but the number of perturbed samples we want to generate for each input.</p>"},{"location":"api/attributions/methods/lime/#similarity_kernel","title":"<code>similarity_kernel</code>:","text":"<p>Function which considering an input, perturbed instances of these input and the interpretable version of those perturbed samples compute the similarities between the input and the perturbed samples.</p> <p>Info</p> <p>The similarities can be computed in the original input space or in the interpretable space.</p> <p>You can provide a custom function. Note that to use a custom function, you have to follow the following scheme:</p> <pre><code>def custom_similarity(\n    original_input, interpret_samples , perturbed_samples\n) -&gt; tf.tensor (shape=(nb_samples,), dtype = tf.float32):\n    ** some tf actions **\n    return similarities\n</code></pre> <p>where:</p> <ul> <li>- <code>original_input</code> has shape among \\((W)\\), \\((W, H)\\), \\((W, H, C)\\)</li> <li>- <code>interpret_samples</code> is a <code>tf.tensor</code> of shape \\((nb\\_samples, num\\_interp\\_features)\\)</li> <li>- <code>perturbed_samples</code> is a <code>tf.tensor</code> of shape \\((nb\\_samples, *original\\_input.shape)\\)</li> </ul> <p>If it is possible you can add the <code>@tf.function</code> decorator.</p> <p>Warning</p> <p>Note that here <code>nb_samples</code> doesn't indicates the length of inputs but the number of perturbed samples we want to generate for each input.</p> <p>Info</p> <p>The default similarity kernel use the euclidean distance between the original input and the perturbed samples in the input space.</p>"},{"location":"api/attributions/methods/lime/#pertub_func","title":"<code>pertub_func</code>:","text":"<p>Function which generate perturbed interpretable samples in the interpretation space from the number of interpretable features (e.g nb of super pixel) and the number of perturbed samples you want per original input.</p> <p>The generated <code>interp_samples</code> belong to \\(\\{0,1\\}^{num\\_features}\\). Where \\(1\\) indicates that we keep the corresponding feature (e.g super pixel) in the mapping.</p> <p>To use your own custom pertub function you should use the following scheme:</p> <pre><code>@tf.function\ndef custom_pertub_function(num_features, nb_samples) -&gt;\ntf.tensor (shape=(nb_samples, num_interp_features), dtype=tf.int32):\n    ** some tf actions**\n    return perturbed_sample\n</code></pre> <p>Info</p> <p>The default pertub function provided keep a feature (e.g super pixel) with a probability 0.5. If you want to change it, define the <code>prob</code> value when initiating the explainer or define your own function.</p>"},{"location":"api/attributions/methods/lime/#map_to_interpret_space","title":"<code>map_to_interpret_space</code>:","text":"<p>Function which group features of an input corresponding to the same interpretable feature (e.g super-pixel).</p> <p>It allows to transpose from (resp. to) the original input space to (resp. from) the interpretable space.</p> <p>The default mappings are:</p> <ul> <li>- the quickshift segmentation algorithm for inputs with \\((N, W, H, C)\\) shape, we assume here such shape is used to represent \\((W, H, C)\\) images.</li> <li>- the felzenszwalb segmentation algorithm for inputs with \\((N, W, H)\\) shape, we assume here such shape is used to represent \\((W, H)\\) images.</li> <li>- an identity mapping if inputs has shape \\((N, W)\\) or \\((N, T, W)\\), we assume here your inputs are tabular data or time-series data.</li> </ul> <p>To use your own custom map function you should use the following scheme:</p> <pre><code>def custom_map_to_interpret_space(single_inp: tf.tensor) -&gt;\ntf.tensor:\n    **some grouping techniques**\n    return mapping\n</code></pre> <p><code>mapping</code> should have the same dimension as single input except for channels.</p> <p>For instance you can use the scikit-image (as we did for the quickshift algorithm) library to defines super pixels on your images.</p> <p>Info</p> <p>The quality of your explanation relies strongly on this mapping.</p> <p>Warning</p> <p>Depending on the mapping you might have a huge number of <code>interpretable_features</code>  (e.g you map pixels 2 by 2 on a 299x299 image). Thus, the compuation time might be very long!</p> <ol> <li> <p>\"Why Should I Trust You?\": Explaining the Predictions of Any Classifier. \u21a9</p> </li> </ol>"},{"location":"api/attributions/methods/occlusion/","title":"Occlusion sensitivity","text":"<p> View colab tutorial |  View source</p> <p>The Occlusion sensitivity method sweep a patch that occludes pixels over the images, and use the variations of the model prediction to deduce critical areas.<sup>1</sup></p> <p>Quote</p> <p>[...] this method, referred to as Occlusion, replacing one feature \\(x_i\\) at the time with a  baseline and measuring the effect of this perturbation on the target output.</p> <p>-- Towards better understanding of the gradient-based attribution methods for Deep Neural Networks (2017)<sup>2</sup></p> <p>with \\(S_c\\) the unormalized class score (layer before softmax) and \\(\\bar{x}\\) a baseline, the Occlusion sensitivity map \\(\\phi\\) is defined as :</p> \\[ \\phi_i = S_c(x) - S_c(x_{[x_i = \\bar{x}]}) \\]"},{"location":"api/attributions/methods/occlusion/#example","title":"Example","text":"<pre><code>from xplique.attributions import Occlusion\n\n# load images, labels and model\n# ...\n\nmethod = Occlusion(model, patch_size=(10, 10),\n                   patch_stride=(2, 2), occlusion_value=0.5)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/occlusion/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>Occlusion: Going Further</li> </ul>"},{"location":"api/attributions/methods/occlusion/#Occlusion","title":"<code>Occlusion</code>","text":"<p>Used to compute the Occlusion sensitivity method, sweep a patch that occludes pixels over the images and use the variations of the model prediction to deduce critical areas. </p>"},{"location":"api/attributions/methods/occlusion/#__init__","title":"<code>__init__(self,  model:  Callable,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  patch_size:  Union[int, Tuple[int, int]] = 3,  patch_stride:  Union[int, Tuple[int, int]] = 3,  occlusion_value:  float = 0.0)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : Callable </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of pertubed samples to explain at once.</p><p> Default to 32.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>patch_size            : Union[int, Tuple[int, int]] = 3 </p> <ul> <li><p> Size of the patches to apply, if integer then assume an hypercube.</p> </li> </ul> </li> <li> <p>patch_stride            : Union[int, Tuple[int, int]] = 3 </p> <ul> <li><p> Stride between two patches, if integer then assume an hypercube.</p> </li> </ul> </li> <li> <p>occlusion_value            : float = 0.0 </p> <ul> <li><p> Value used as occlusion.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/occlusion/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Compute Occlusion sensitivity for a batch of samples. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Occlusion sensitivity, same shape as the inputs, except for the channels.</p> </li> </ul> </li> </ul> <p></p> <p>Info</p> <p><code>patch_size</code> and <code>patch_stride</code> will define patch to apply to the original input. Thus, a combination of patches will generate pertubed samples of the original input (masked by patches with <code>occlusion_value</code> value). Consequently, the number of pertubed instances of an input depend on those parameters. Too little value of those two arguments on large image might lead to an incredible amount of pertubed samples and increase compuation time. On another hand too huge values might not be accurate enough.</p> <ol> <li> <p>Visualizing and Understanding Convolutional Networks (2014). \u21a9</p> </li> <li> <p>Towards better understanding of gradient-based attribution methods for Deep Neural Networks \u21a9</p> </li> </ol>"},{"location":"api/attributions/methods/rise/","title":"RISE","text":"<p>View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>The RISE method consist of probing the model with randomly masked versions of the input image and obtaining the corresponding outputs to deduce critical areas.</p> <p>Quote</p> <p>[...] we estimate the importance of pixels by dimming them in random combinations, reducing their intensities down to zero. We model this by multiplying an image with a [0,1] valued mask.</p> <p>-- RISE: Randomized Input Sampling for Explanation of Black-box Models (2018)<sup>1</sup></p> <p>with \\(f(x)\\) the prediction of a classifier, for an input \\(x\\) and \\(m  \\sim \\mathcal{M}\\) a mask with value in \\([0,1]\\) created from a low dimension (\\(m\\) is in \\({0, 1}^{w \\times h}\\) with \\(w \\ll W\\) and \\(h \\ll H\\) then upsampled, see the paper for more details).</p> <p>The RISE importance estimator is defined as:</p> \\[ \\phi_i = \\mathbb{E}( f(x \\odot m) | m_i = 1)  \\approx \\frac{1}{\\mathbb{E}(\\mathcal{M}) N} \\sum_{i=1}^N f(x \\odot m_i) m_i \\] <p>The most important parameters here are (1) the <code>grid_size</code> that control \\(w\\) and \\(h\\) and (2) <code>nb_samples</code> that control \\(N\\). The pourcentage of visible pixels \\(\\mathbb{E}(\\mathcal{M})\\) is controlled using the <code>preservation_probability</code> parameter.</p>"},{"location":"api/attributions/methods/rise/#example","title":"Example","text":"<pre><code>from xplique.attributions import Rise\n\n# load images, labels and model\n# ...\n\nmethod = Rise(model, nb_samples=4000, grid_size=7, preservation_probability=0.5)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/rise/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>RISE: Going Further</li> </ul>"},{"location":"api/attributions/methods/rise/#Rise","title":"<code>Rise</code>","text":"<p>Used to compute the RISE method, by probing the model with randomly masked versions of the input image and obtaining the corresponding outputs to deduce critical areas. </p>"},{"location":"api/attributions/methods/rise/#__init__","title":"<code>__init__(self,  model:  Callable,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  nb_samples:  int = 4000,  grid_size:  Union[int, Tuple[int]] = 7,  preservation_probability:  float = 0.5,  mask_value:  float = 0.0)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : Callable </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of pertubed samples to explain at once.</p><p> Default to 32.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>nb_samples            : int = 4000 </p> <ul> <li><p> Number of masks generated for Monte Carlo sampling.</p> </li> </ul> </li> <li> <p>grid_size            : Union[int, Tuple[int]] = 7 </p> <ul> <li><p> Size of the grid used to generate the scaled-down masks. Masks are then rescale to and cropped to input_size. Can be a tuple for different cutting depending on the dimension.</p><p> Ignored for tabular data.</p> </li> </ul> </li> <li> <p>preservation_probability            : float = 0.5 </p> <ul> <li><p> Probability of preservation for each pixel (or the percentage of non-masked pixels in each masks), also the expectation value of the mask.</p> </li> </ul> </li> <li> <p>mask_value            : float = 0.0 </p> <ul> <li><p> Value used as when applying masks.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/rise/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Compute RISE for a batch of samples. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> RISE maps, same shape as the inputs, except for the channels.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>RISE: Randomized Input Sampling for Explanation of Black-box Models (2018) \u21a9</p> </li> </ol>"},{"location":"api/attributions/methods/saliency/","title":"Saliency Maps","text":"<p> View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>Saliency is one of the most easy explanation method based on the gradient of a class score relative to the input.</p> <p>Quote</p> <p>An interpretation of computing the image-specific class saliency using the class score derivative is that the magnitude of the derivative indicates which pixels need to be changed the least to affect the class score the most. One can expect that such pixels correspond to the object location in the image.</p> <p>-- Deep Inside Convolutional Networks: Visualising Image Classification Models and Saliency Maps (2013)<sup>1</sup></p> <p>More precisely, for an image \\(x\\) the importance map \\(\\phi\\) according to a classifier \\(f\\) is defined as:</p> \\[ \\phi = | \\nabla_{x} f(x) | \\] <p>more precisely, in the image case, Xplique is faithful to the original method and returns the max on the axis of channels, with \\(\\phi_i \\in \\mathbb{R}^3\\) for RGB, the importance for the pixel \\(i\\) is given by \\(||\\phi_i||_{\\infty}\\)</p>"},{"location":"api/attributions/methods/saliency/#example","title":"Example","text":"<pre><code>from xplique.attributions import Saliency\n\n# load images, labels and model\n# ...\n\nmethod = Saliency(model)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/saliency/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>Saliency: Going Further</li> </ul>"},{"location":"api/attributions/methods/saliency/#Saliency","title":"<code>Saliency</code>","text":"<p>Used to compute the absolute gradient of the output relative to the input. </p>"},{"location":"api/attributions/methods/saliency/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  reducer:  Optional[str] = 'max')</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>reducer            : Optional[str] = 'max' </p> <ul> <li><p> String, name of the reducer to use. Either \"min\", \"mean\", \"max\", \"sum\", or <code>None</code> to ignore.</p><p> Used only for images to obtain explanation with shape (n, h, w, 1).</p><p> Maximum is taking by default to match the initial paper.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/saliency/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ],  targets:  Union[tensorflow.python.framework.tensor.Tensor, , None] = None) -&gt; tensorflow.python.framework.tensor.Tensor <p>Compute the explanations of the given inputs. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul>  <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, , None] = None  <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Explanation generated by the method.</p> </li> </ul> </li> </ul> <p></p>   <ol> <li> <p>Deep Inside Convolutional Networks: Visualising Image Classification Models and Saliency Maps \u21a9</p> </li> </ol>","text":""},{"location":"api/attributions/methods/smoothgrad/","title":"SmoothGrad","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p>SmoothGrad is a gradient-based explanation method, which, as the name suggests, averages the gradient at several points corresponding to small perturbations around the point of interest. The smoothing effect induced by the average help reducing the visual noise, and hence improve the explanations.</p> <p>Quote</p> <p>[...] The gradient at any given point will be less meaningful than a local average of gradient values. This suggests a new way to create improved sensitivity maps: instead of basing a visualization directly on the gradient, we could base it on a smoothing of the gradients with a Gaussian kernel.</p> <p>-- SmoothGrad: removing noise by adding noise (2017)<sup>1</sup></p> <p>More precisely, the explanation \\(\\phi\\) for an input \\(x\\) and a classifier \\(f\\) is defined as</p> \\[ \\phi = \\mathbb{E}_{\\delta ~\\sim~ \\mathcal{N}(0, \\sigma^2) }( \\nabla_x f(x + \\delta) )  \\approx \\frac{1}{N} \\sum_{i=0}^N \\nabla_x f(x + \\delta_i) \\] <p>The \\(\\sigma\\) in the formula is controlled using the <code>noise</code> parameter, and the expectation is estimated using \\(N\\) samples controlled by the <code>nb_samples</code> parameter.</p> <p>Tip</p> <p>It is recommended to have a noise level \\(\\sigma\\) at about 20% of the range of your inputs, i.e. \\(\\sigma=0.2\\) if your inputs are between \\([0, 1]\\) or \\(\\sigma=0.4\\) if your inputs are between \\([-1, 1]\\).</p>"},{"location":"api/attributions/methods/smoothgrad/#example","title":"Example","text":"<pre><code>from xplique.attributions import SmoothGrad\n\n# load images, labels and model\n# ...\n\nmethod = SmoothGrad(model, nb_samples=50, noise=0.15)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/smoothgrad/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>SmoothGrad: Going Further</li> </ul>"},{"location":"api/attributions/methods/smoothgrad/#SmoothGrad","title":"<code>SmoothGrad</code>","text":"<p>Used to compute the SmoothGrad, by averaging Saliency maps of noisy samples centered on the original sample. </p>"},{"location":"api/attributions/methods/smoothgrad/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  reducer:  Optional[str] = 'mean',  nb_samples:  int = 50,  noise:  float = 0.2)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>reducer            : Optional[str] = 'mean' </p> <ul> <li><p> String, name of the reducer to use. Either \"min\", \"mean\", \"max\", \"sum\", or <code>None</code> to ignore.</p><p> Used only for images to obtain explanation with shape (n, h, w, 1).</p> </li> </ul> </li> <li> <p>nb_samples            : int = 50 </p> <ul> <li><p> Number of noisy samples generated for the smoothing procedure.</p> </li> </ul> </li> <li> <p>noise            : float = 0.2 </p> <ul> <li><p> Scalar, noise used as standard deviation of a normal law centered on zero.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/smoothgrad/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ],  targets:  Union[tensorflow.python.framework.tensor.Tensor, , None] = None) -&gt; tensorflow.python.framework.tensor.Tensor <p>Compute the explanations of the given inputs. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul>  <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, , None] = None  <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Explanation generated by the method.</p> </li> </ul> </li> </ul> <p></p>   <ol> <li> <p>SmoothGrad: removing noise by adding noise (2017) \u21a9</p> </li> </ol>","text":""},{"location":"api/attributions/methods/sobol/","title":"Sobol Attribution Method","text":"<p>View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>The Sobol attribution method from Fel, Cad\u00e8ne &amp; al.<sup>1</sup> is an attribution method grounded in Sensitivity Analysis. Beyond modeling the individual contributions of image regions, Sobol indices provide an efficient way to capture higher-order interactions between image regions and their contributions to a neural network\u2019s prediction through the lens of variance.</p> <p>Quote</p> <p>The total Sobol index \\(ST_i\\) which measures the contribution of the variable \\(X_i\\) as well as its interactions of any order with any other input variables to the model output variance.</p> <p>-- Look at the Variance! Efficient Black-box Explanations with Sobol-based Sensitivity Analysis (2021)<sup>1</sup></p> <p>More precisely, the attribution score \\(\\phi_i\\) for an input variable \\(x_i\\), is defined as</p> \\[ \\phi_i = \\frac{\\mathbb{E}_{X \\sim i}(Var_{X_i}(f(x) | X_{\\sim i}))} {Var (f(X ))} \\] <p>Where \\(\\mathbb{E}_{X \\sim i}(Var_{X_i}(f(x) | X_{\\sim i}))\\) is the expected variance that would be left if all variables but \\(X_{\\sim i}\\) were to be fixed.</p> <p>In order to generate stochasticity(\\(X_i\\)), a perturbation function is used and uses perturbation masks to modulate the generated perturbation. The perturbation functions available are inpainting that modulates pixel regions to a baseline state, amplitude and blurring.</p> <p>The calculation of the indices also requires an estimator -- in practice this parameter does not change the results much -- <code>JansenEstimator</code> being recommended. </p> <p>Finally the exploration of the manifold exploration is made using a sampling method, several samplers are proposed: Quasi-Monte Carlo (<code>ScipySobolSequence</code>, recommended) using Scipy's sobol sequence, Latin hypercubes  -- <code>LHSAmpler</code> -- or Halton's sequences <code>HaltonSequence</code>.</p> <p>Tip</p> <p>For quick a faithful explanations, we recommend to use <code>grid_size</code> in \\([7, 12)\\), <code>nb_design</code> in \\(\\{16, 32, 64\\}\\) (more is useless), and a QMC sampler. (see <code>SobolAttributionMethod</code> documentation below for detail on those parameters).</p>"},{"location":"api/attributions/methods/sobol/#example","title":"Example","text":"<pre><code>from xplique.attributions import SobolAttributionMethod\nfrom xplique.attributions.global_sensitivity_analysis import (\n    JansenEstimator, GlenEstimator,\n    LHSampler, ScipySobolSequence,\n    HaltonSequence)\n\n# load images, labels and model\n# ...\n\n# default explainer (recommended)\nexplainer = SobolAttributionMethod(model, grid_size=8, nb_design=32)\nexplanations = method(images, labels) # one-hot encoded labels\n</code></pre> <p>If you want to change the estimator or the sampling:</p> <pre><code>from xplique.attributions import SobolAttributionMethod\nfrom xplique.attributions.global_sensitivity_analysis import (\n    JansenEstimator, GlenEstimator,\n    LHSampler, ScipySobolSequence,\n    HaltonSequence)\n\n# load images, labels and model\n# ...\n\nexplainer_lhs = SobolAttributionMethod(model, grid_size=8, nb_design=32, \n                                       sampler=LHSampler(), \n                                       estimator=GlenEstimator())\nexplanations_lhs = explainer_lhs(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/sobol/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started </li> </ul>"},{"location":"api/attributions/methods/sobol/#SobolAttributionMethod","title":"<code>SobolAttributionMethod</code>","text":"<p>Sobol' Attribution Method. Compute the total order Sobol' indices using a perturbation function on a grid and an adapted sampling as described in the original paper. </p>"},{"location":"api/attributions/methods/sobol/#__init__","title":"<code>__init__(self,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 model,  grid_size:  int = 8,  nb_design:  int = 32,  sampler:  Optional[xplique.attributions.global_sensitivity_analysis.replicated_designs.ReplicatedSampler] = None,  estimator:  Optional[xplique.attributions.global_sensitivity_analysis.sobol_estimators.SobolEstimator] = None,  perturbation_function:  Union[Callable, str, None] = 'inpainting',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 batch_size=256,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : model </p> <ul> <li><p> Model used for computing explanations.</p> </li> </ul> </li> <li> <p>grid_size            : int = 8 </p> <ul> <li><p> Cut the image in a grid of (grid_size, grid_size) to estimate an indice per cell.</p> </li> </ul> </li> <li> <p>nb_design            : int = 32 </p> <ul> <li><p> Must be a power of two. Number of design, the number of forward will be: nb_design * (grid_size**2 + 2). Generally not above 32.</p> </li> </ul> </li> <li> <p>sampler            : Optional[xplique.attributions.global_sensitivity_analysis.replicated_designs.ReplicatedSampler] = None </p> <ul> <li><p> Sampler used to generate the (quasi-)monte carlo samples, QMC (sobol sequence recommended). For more option, see the sampler module.</p> </li> </ul> </li> <li> <p>estimator            : Optional[xplique.attributions.global_sensitivity_analysis.sobol_estimators.SobolEstimator] = None </p> <ul> <li><p> Estimator used to compute the total order sobol' indices, Jansen recommended. For more option, see the estimator module.</p> </li> </ul> </li> <li> <p>perturbation_function            : Union[Callable, str, None] = 'inpainting' </p> <ul> <li><p> Function to call to apply the perturbation on the input. Can also be string: 'inpainting', 'blurring', or 'amplitude'.</p> </li> </ul> </li> <li> <p>batch_size            : batch_size=256 </p> <ul> <li><p> Batch size to use for the forwards.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/sobol/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Compute the total Sobol' indices according to the explainer parameter (perturbation function, grid size...). Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None). </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Images to be explained, either tf.dataset, Tensor or numpy array.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape (N, W, H, C) or (N, W, H).</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> One-hot encoding for classification or direction {-1, +1} for regression.</p><p> Tensor or numpy array.</p><p> Expected shape (N, C) or (N).</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>attributions_maps            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> GSA Attribution Method explanations, same shape as the inputs except for the channels.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Look at the Variance! Efficient Black-box Explanations with Sobol-based Sensitivity Analysis (2021) \u21a9\u21a9</p> </li> </ol>"},{"location":"api/attributions/methods/square_grad/","title":"Square Grad","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p>Similar to SmoothGrad, Square-Grad is a gradient-based explanation method, which, as the name suggests, averages the square of the gradient at several points corresponding to small perturbations around the point of interest. The smoothing effect induced by the average help reducing the visual noise, and hence improve the explanations.</p> <p>More precisely, the explanation \\(\\phi\\) for an input \\(x\\) and a classifier \\(f\\) is defined as</p> \\[ \\phi = \\mathbb{E}_{\\delta ~\\sim~ \\mathcal{N}(0, \\sigma^2) }( (\\nabla_x f(x + \\delta))^2 )  \\approx \\frac{1}{N} \\sum_{i=0}^N (\\nabla_x f(x + \\delta_i))^2 \\] <p>The \\(\\sigma\\) in the formula is controlled using the <code>noise</code> parameter, and the expectation is estimated using \\(N\\) samples controlled by the <code>nb_samples</code> parameter.</p> <p>Tip</p> <p>It is recommended to have a noise level \\(\\sigma\\) at about 20% of the range of your inputs, i.e. \\(\\sigma=0.2\\) if your inputs are between \\([0, 1]\\) or \\(\\sigma=0.4\\) if your inputs are between \\([-1, 1]\\).</p>"},{"location":"api/attributions/methods/square_grad/#example","title":"Example","text":"<pre><code>from xplique.attributions import SquareGrad\n\n# load images, labels and model\n# ...\n\nmethod = SquareGrad(model, nb_samples=50, noise=0.15)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/square_grad/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>SquareGrad: Going Further</li> </ul>"},{"location":"api/attributions/methods/square_grad/#SquareGrad","title":"<code>SquareGrad</code>","text":"<p>SquareGrad (or SmoothGrad^2) is an unpublished variant of classic SmoothGrad which squares each gradients of the noisy inputs before averaging. </p>"},{"location":"api/attributions/methods/square_grad/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  reducer:  Optional[str] = 'mean',  nb_samples:  int = 50,  noise:  float = 0.2)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>reducer            : Optional[str] = 'mean' </p> <ul> <li><p> String, name of the reducer to use. Either \"min\", \"mean\", \"max\", \"sum\", or <code>None</code> to ignore.</p><p> Used only for images to obtain explanation with shape (n, h, w, 1).</p> </li> </ul> </li> <li> <p>nb_samples            : int = 50 </p> <ul> <li><p> Number of noisy samples generated for the smoothing procedure.</p> </li> </ul> </li> <li> <p>noise            : float = 0.2 </p> <ul> <li><p> Scalar, noise used as standard deviation of a normal law centered on zero.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/square_grad/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ],  targets:  Union[tensorflow.python.framework.tensor.Tensor, , None] = None) -&gt; tensorflow.python.framework.tensor.Tensor <p>Compute the explanations of the given inputs. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul>  <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, , None] = None  <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Explanation generated by the method.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/attributions/methods/vargrad/","title":"VarGrad","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p>Similar to SmoothGrad, VarGrad is a gradient-based explanation method, which, as the name suggests, return the variance of the gradient at several points corresponding to small perturbations around the point of interest. The smoothing effect induced by the average help reducing the visual noise, and hence improve the explanations.</p> <p>More precisely, the explanation \\(\\phi\\) for an input \\(x\\) and a classifier \\(f\\) is defined as</p> \\[ \\phi = \\mathbb{V}_{\\delta ~\\sim~ \\mathcal{N}(0, \\sigma^2) }( \\nabla_x f(x + \\delta) ) \\approx \\frac{1}{N-1} \\sum_{i=0}^N (\\nabla_x f(x + \\delta_i) - \\hat{\\mu})^2 \\] <p>Where \\(\\hat{\\mu} = \\frac{1}{N} \\sum_{i=0}^N \\nabla_x f(x + \\delta_i)\\) is the empirical mean. The \\(\\sigma\\) in the formula is controlled using the <code>noise</code> parameter, and the expectation is estimated using \\(N\\) samples controlled by the <code>nb_samples</code> parameter.</p> <p>Tip</p> <p>It is recommended to have a noise level \\(\\sigma\\) at about 20% of the range of your inputs, i.e. \\(\\sigma=0.2\\) if your inputs are between \\([0, 1]\\) or \\(\\sigma=0.4\\) if your inputs are between \\([-1, 1]\\).</p>"},{"location":"api/attributions/methods/vargrad/#example","title":"Example","text":"<pre><code>from xplique.attributions import VarGrad\n\n# load images, labels and model\n# ...\n\nmethod = VarGrad(model, nb_samples=50, noise=0.15)\nexplanations = method.explain(images, labels)\n</code></pre>"},{"location":"api/attributions/methods/vargrad/#notebooks","title":"Notebooks","text":"<ul> <li>Attribution Methods: Getting started</li> <li>VarGrad: Going Further</li> </ul>"},{"location":"api/attributions/methods/vargrad/#VarGrad","title":"<code>VarGrad</code>","text":"<p>VarGrad is a variance analog to SmoothGrad. </p>"},{"location":"api/attributions/methods/vargrad/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  output_layer:  Union[str, int, None] = None,  batch_size:  Optional[int] = 32,  operator:  Union[xplique.commons.operators_operations.Tasks, str,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None,  reducer:  Optional[str] = 'mean',  nb_samples:  int = 50,  noise:  float = 0.2)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> The model from which we want to obtain explanations</p> </li> </ul> </li> <li> <p>output_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer to target for the outputs (e.g logits or after softmax).</p><p> If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  Default to the last layer.</p><p> It is recommended to use the layer before Softmax.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 32 </p> <ul> <li><p> Number of inputs to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>operator            : Union[xplique.commons.operators_operations.Tasks, str, Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float], None] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>reducer            : Optional[str] = 'mean' </p> <ul> <li><p> String, name of the reducer to use. Either \"min\", \"mean\", \"max\", \"sum\", or <code>None</code> to ignore.</p><p> Used only for images to obtain explanation with shape (n, h, w, 1).</p> </li> </ul> </li> <li> <p>nb_samples            : int = 50 </p> <ul> <li><p> Number of noisy samples generated for the smoothing procedure.</p> </li> </ul> </li> <li> <p>noise            : float = 0.2 </p> <ul> <li><p> Scalar, noise used as standard deviation of a normal law centered on zero.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/methods/vargrad/#explain","title":"<code>explain(self,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ],  targets:  Union[tensorflow.python.framework.tensor.Tensor, , None] = None) -&gt; tensorflow.python.framework.tensor.Tensor <p>Compute the explanations of the given inputs. Accept Tensor, numpy array or tf.data.Dataset (in that case targets is None) </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, ]  <ul> <li><p> Dataset, Tensor or Array. Input samples to be explained.</p><p> If Dataset, targets should not be provided (included in Dataset).</p><p> Expected shape among (N, W), (N, T, W), (N, H, W, C).</p><p> More information in the documentation.</p> </li> </ul>  <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, , None] = None  <ul> <li><p> Tensor or Array. One-hot encoding of the model's output from which an explanation is desired. One encoding per input and only one output at a time. Therefore, the expected shape is (N, output_size).</p><p> More information in the documentation.</p> </li> </ul>   <p>Return</p> <ul> <li> <p>explanations            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Explanation generated by the method.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/attributions/metrics/api_metrics/","title":"API: Metrics","text":"<ul> <li>Attribution Methods: Metrics </li> </ul>"},{"location":"api/attributions/metrics/api_metrics/#context","title":"Context","text":"<p>As the XAI field continues on being trendy, the quantity of materials at disposal to explain DL models keeps on growing. Especially, there is an increasing need to benchmark and evaluate those different approaches. Mainly, there is an urge to evaluate the quality of explanations provided by attribution methods.</p> <p>Info</p> <p>Note that, even though some work exists for other tasks, this challenge has been mainly tackled in the context of Computer Vision tasks.</p> <p>As pointed out by Petsiuk et al., most explainability approaches used to be evaluated in a human-centered way. For instance, an attribution method was considered good if it pointed at the same relevant pixels as the ones highlighted by human users. While this kind of evaluation allows giving some users trust, it can easily be biased. Therefore, the authors introduced two automatic evaluation metrics that rely solely on the drop or rise in the probability of a class as important pixels (defined by the saliency map) are removed or added. Those are not the only available metrics and we propose here to present the API we used as common ground.</p>"},{"location":"api/attributions/metrics/api_metrics/#common-api","title":"Common API","text":"<p>Info</p> <p>Metrics described on this page are metrics for attribution methods and explanations. Therefore, the user should first get familiar with the attributions methods API as many parameters are common between both API. For instance, <code>model</code>, <code>inputs</code>, <code>targets</code>, and <code>operator</code> should match for methods and their metrics.</p> <p>All metrics inherit from the base class <code>BaseAttributionMetric</code> which has the following <code>__init__</code> arguments:</p> <ul> <li><code>model</code>: The model from which we want to obtain explanations</li> <li><code>inputs</code>: Input samples to be explained</li> <li><code>targets</code>: Specify the kind of explanations we want depending on the task at end (e.g. a one-hot encoding of a class of interest, a difference to a ground-truth value..)</li> <li><code>batch_size</code>: an integer which allows to either process inputs per batch or process perturbed samples of an input per batch (inputs are therefore processed one by one). It is most of the time overwritten by the explanation method <code>batch_size</code>.</li> <li><code>activation</code>: A string that belongs to [None, 'sigmoid', 'softmax']. See the dedicated section for details</li> </ul> <p>Then we can distinguish two category of metrics:</p> <ul> <li>Those which only need the attribution outputs of an explainer: <code>ExplanationMetric</code>, namely those which evaluate Fidelity (MuFidelity, Deletion, Insertion)</li> <li>Those which need the explainer: <code>ExplainerMetric</code> (AverageStability)</li> </ul>"},{"location":"api/attributions/metrics/api_metrics/#explanationmetric","title":"<code>ExplanationMetric</code>","text":"<p>Those metrics are agnostic of the explainer used and rely only on the attributions mappings it gives.</p> <p>Tip</p> <p>Therefore, you can use them with other explainer than those provided in Xplique!</p> <p>All metrics inheriting from this class have another argument in their <code>__init__</code> method:</p> <ul> <li><code>operator</code>: Optional function wrapping the model. It can be seen as a metric which allows to evaluate model evolution. For more details, see the attribution's API Description section on <code>operator</code>.</li> </ul> <p>Info</p> <p>The <code>operator</code> used here should match the one used to compute the explanations!</p> <p>All metrics inheriting from this class have to define a method <code>evaluate</code> which will take as input the <code>attributions</code> given by an explainer. Those attributions should correspond to the <code>model</code>, <code>inputs</code> and <code>targets</code> used to build the metric object.</p>"},{"location":"api/attributions/metrics/api_metrics/#explainermetric","title":"<code>ExplainerMetric</code>","text":"<p>These metrics will not assess the quality of the explanations provided but (also) the explainer itself.</p> <p>All metrics inheriting from this class have to define a method <code>evaluate</code> which will take as input the <code>explainer</code> evaluated.</p> <p>Info</p> <p>It is even more important that <code>inputs</code> and <code>targets</code> be the same as defined in the attribution's API Description.</p> <p>Currently, there is only one Stability metric inheriting from this class:</p>"},{"location":"api/attributions/metrics/api_metrics/#activation","title":"Activation","text":"<p>This parameter specifies if an additional activation layer should be added once a model has been called on the inputs when you have to compute the metric. </p> <p>Indeed, most of the times it is recommended when you instantiate an explainer (i.e. an attribution methods) to provide a model which gives logits as explaining the logits is to explain the class, while explaining the softmax is to explain why this class rather than another.</p> <p>However, when you compute metrics some were thought to measure a \"drop of probability\" when you occlude the \"most relevant\" part of an input. Thus, once you get your explanations (computed from the logits), you might need to have access to a probability score of occluded inputs of a specific class, thus to have access to the logits after a <code>softmax</code> or <code>sigmoid</code> layer.</p> <p>Consequently, we add this <code>activation</code> parameter so one can provide a model that predicts logits but add an activation layer for the purpose of having probability when using a metric method.</p> <p>The default behavior is to compute the metric without adding any activation layer to the model.</p> <p>Note</p> <p>There does not appear to be a consensus on the activation function to be used for metrics. Some papers use logits values (e.g., with mu-fidelity), while others use sigmoid or softmax (with deletion and insertion). We can only observe that changing the activation function has an effect on the ranking of the best methods.</p>"},{"location":"api/attributions/metrics/api_metrics/#other-metrics","title":"Other Metrics","text":"<p>A Representatibity metric: MeGe is also available. Documentation about it should be added soon.</p>"},{"location":"api/attributions/metrics/api_metrics/#notebooks","title":"Notebooks","text":"<ul> <li> <p>Metrics: Getting started </p> </li> <li> <p>Metrics: With PyTorch models </p> </li> </ul>"},{"location":"api/attributions/metrics/avg_stability/","title":"Average Stability","text":"<p>Average Stability is a Stability metric measuring how similar are explanations of similar inputs.</p> <p>Quote</p> <p>[...]  We want to ensure that, if inputs are near each other and their model outputs are similar, then their explanations should be close to each other.</p> <p>-- Evaluating and Aggregating Feature-based Model Explanations (2020)<sup>1</sup></p> <p>Formally, given a predictor \\(f\\), an explanation function \\(g\\), a point \\(x\\), a radius \\(r\\) and a two distance metric: \\(\\rho\\) over the inputs and \\(D\\) over the explanations, the AverageStability is defined as:</p> \\[ S = \\underset{z : \\rho(x, z) \\leq r}{\\int} D(g(f, x), g(f, z))\\ dz \\] <p>Info</p> <p>The better the method, the smaller the score.</p>"},{"location":"api/attributions/metrics/avg_stability/#example","title":"Example","text":"<pre><code>from xplique.metrics import AverageStability\nfrom xplique.attributions import Saliency\n\n# load images, labels and model\n# ...\nexplainer = Saliency(model)\n\nmetric = AverageStability(model, inputs, labels)\nscore = metric.evaluate(explainer)\n</code></pre>"},{"location":"api/attributions/metrics/avg_stability/#AverageStability","title":"<code>AverageStability</code>","text":"<p>Used to compute the average sensitivity metric (or stability). This metric ensure that close inputs with similar predictions yields similar explanations. For each inputs we randomly sample noise to add to the inputs and compute the explanation for the noisy inputs. We then get the average distance between the original explanations and the noisy explanations. </p>"},{"location":"api/attributions/metrics/avg_stability/#__init__","title":"<code>__init__(self,  model:  Callable,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None,  batch_size:  Optional[int] = 64,  radius:  float = 0.1,  distance:  Union[str, Callable] = 'l2',  nb_samples:  int = 20)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : Callable </p> <ul> <li><p> Model used for computing metric.</p> </li> </ul> </li> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Input samples under study.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> One-hot encoded labels or regression target (e.g {+1, -1}), one for each sample.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 64 </p> <ul> <li><p> Number of samples to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>radius            : float = 0.1 </p> <ul> <li><p> Maximum value of the uniform noise added to the inputs before recalculating their explanations.</p> </li> </ul> </li> <li> <p>distance            : Union[str, Callable] = 'l2' </p> <ul> <li><p> Distance metric between the explanations.</p> </li> </ul> </li> <li> <p>nb_samples            : int = 20 </p> <ul> <li><p> Number of different neighbors points to try on each input to measure the stability.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/metrics/avg_stability/#evaluate","title":"<code>evaluate(self,  explainer:  Callable,  base_explanations:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None) -&gt; float</code>","text":"<p>Evaluate the fidelity score. </p> <p>Parameters</p> <ul> <li> <p>explainer            : Callable </p> <ul> <li><p> Explainer or Explanations associated to each inputs.</p> </li> </ul> </li> <li> <p>base_explanations            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Explanation for the inputs under study. Calculates them automatically if they are not provided.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>stability_score            : float </p> <ul> <li><p> Average distance between the explanations</p> </li> </ul> </li> </ul> <p></p> <p>Warning</p> <p>AverageStability will compute several time explanations for all the inputs (pertubed more or less severly). Thus, it might be very long to compute (especially if the explainer is already time consumming).</p> <ol> <li> <p>Evaluating and Aggregating Feature-based Model Explanations (2020) \u21a9</p> </li> </ol>"},{"location":"api/attributions/metrics/deletion/","title":"Deletion","text":"<p>The Deletion Fidelity metric measures how well a saliency-map\u2013based explanation localizes the important features.</p> <p>Quote</p> <p>The deletion metric measures the drop in the probability of a class as important pixels (given by the saliency map) are gradually removed from the image. A sharp drop, and thus a small area under the probability curve, are indicative of a good explanation.</p> <p>-- RISE: Randomized Input Sampling for Explanation of Black-box Models (2018)<sup>1</sup></p>"},{"location":"api/attributions/metrics/deletion/#score-interpretation","title":"Score interpretation","text":"<p>The interpretation of the score depends on your <code>operator</code>, which represents the metrics you use to evaluate your model. For metrics where the score increases with the performance of the model (such as accuracy).   If explanations are accurate, the score will quickly fall to the score of a random model.   Thus, in this case, a lower score represent a more accurate explanation.</p> <p>For metrics where the score decreases with the performance of the model (such as losses).    If explanations are accurate, the score will quickly rise to the score of a random model.   Thus, in this case, a higher score represent a more accurate explanation.</p>"},{"location":"api/attributions/metrics/deletion/#remarks","title":"Remarks","text":"<p>This metric only evaluate the order of importance between features.</p> <p>The parameters metric, steps and max_percentage_perturbed may drastically change the score :</p> <ul> <li> <p>For inputs with many features, increasing the number of steps will allow you to capture more efficiently the difference between attributions methods.</p> </li> <li> <p>The order of importance of features with low importance may not matter, hence, decreasing the max_percentage_perturbed, may make the score more relevant.</p> </li> </ul> <p>Sometimes, attributions methods also returns negative attributions, for those methods, do not take the absolute value before computing insertion and deletion metrics. Otherwise, negative attributions may have higher absolute values, and the order of importance between features will change. Therefore, take those previous remarks into account to get a relevant score.</p>"},{"location":"api/attributions/metrics/deletion/#example","title":"Example","text":"<pre><code>from xplique.metrics import Deletion\nfrom xplique.attributions import Saliency\n\n# load images, targets and model\n# ...\nexplainer = Saliency(model)\nexplanations = explainer(inputs, targets)\n\nmetric = Deletion(model, inputs, targets)\nscore = metric.evaluate(explanations)\n</code></pre>"},{"location":"api/attributions/metrics/deletion/#Deletion","title":"<code>Deletion</code>","text":"<p>The deletion metric measures the drop in the probability of a class as important pixels (given by the saliency map) are gradually removed from the image. A sharp drop, and thus a small area under the probability curve, are indicative of a good explanation. </p>"},{"location":"api/attributions/metrics/deletion/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None,  batch_size:  Optional[int] = 64,  baseline_mode:  Union[float, Callable] = 0.0,  steps:  int = 10,  max_percentage_perturbed:  float = 1.0,  operator:  Optional[Callable] = None,  activation:  Optional[str] = None)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> Model used for computing metric.</p> </li> </ul> </li> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Input samples under study.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> One-hot encoded labels or regression target (e.g {+1, -1}), one for each sample.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 64 </p> <ul> <li><p> Number of samples to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>baseline_mode            : Union[float, Callable] = 0.0 </p> <ul> <li><p> Value of the baseline state, will be called with the inputs if it is a function.</p> </li> </ul> </li> <li> <p>steps            : int = 10 </p> <ul> <li><p> Number of steps between the start and the end state.</p><p> Can be set to -1 for all possible steps to be computed.</p> </li> </ul> </li> <li> <p>max_percentage_perturbed            : float = 1.0 </p> <ul> <li><p> Maximum percentage of the input perturbed.</p> </li> </ul> </li> <li> <p>operator            : Optional[Callable] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>activation            : Optional[str] = None </p> <ul> <li><p> A string that belongs to [None, 'sigmoid', 'softmax']. Specify if we should add an activation layer once the model has been called. It is useful, for instance if you want to measure a 'drop of probability' by adding a sigmoid or softmax after getting your logits. If None does not add a layer to your model.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/metrics/deletion/#detailed_evaluate","title":"<code>detailed_evaluate(self,  explanations:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray]) -&gt; Dict[int, float]</code>","text":"<p>Evaluate model performance for successive perturbations of an input. Used to compute causal score. </p> <p>Parameters</p> <ul> <li> <p>explanations            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Explanation for the inputs, labels to evaluate.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>causal_score_dict            : Dict[int, float] </p> <ul> <li><p> Dictionary of scores obtain for different perturbations Keys are the steps, i.e the number of features perturbed Values are the scores, the score of the model     on the inputs with the corresponding number of features perturbed</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/attributions/metrics/deletion/#evaluate","title":"<code>evaluate(self,  explanations:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray]) -&gt; float</code>","text":"<p>Evaluate the causal score. </p> <p>Parameters</p> <ul> <li> <p>explanations            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Explanation for the inputs, labels to evaluate.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>causal_score            : float </p> <ul> <li><p> Metric score, area over the deletion (lower is better) or insertion (higher is better) curve.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>RISE: Randomized Input Sampling for Explanation of Black-box Models (2018) \u21a9</p> </li> </ol>"},{"location":"api/attributions/metrics/insertion/","title":"Insertion","text":"<p>The Insertion Fidelity metric measures how well a saliency-map\u2013based explanation can find elements that are minimal for the predictions.</p> <p>Quote</p> <p>The insertion metric, on the other hand, captures the importance of the pixels in terms of their ability to synthesize an image and is measured by the rise in the probability of the class of interest as pixels are added according to the generated importance map.</p> <p>-- RISE: Randomized Input Sampling for Explanation of Black-box Models (2018)<sup>1</sup></p>"},{"location":"api/attributions/metrics/insertion/#score-interpretation","title":"Score interpretation","text":"<p>The interpretation of the score depends on your <code>operator</code>, which represents the metrics you use to evaluate your model. For metrics where the score increases with the performance of the model (such as accuracy).   If explanations are accurate, the score will quickly rise to the score on non-perturbed input.   Thus, in this case, a higher score represent a more accurate explanation.</p> <p>For metrics where the score decreases with the performance of the model (such as losses).    If explanations are accurate, the score will quickly fall to the score on non-perturbed input.   Thus, in this case, a lower score represent a more accurate explanation.</p>"},{"location":"api/attributions/metrics/insertion/#remarks","title":"Remarks","text":"<p>This metric only evaluate the order of importance between features.</p> <p>The parameters metric, steps and max_percentage_perturbed may drastically change the score :</p> <ul> <li> <p>For inputs with many features, increasing the number of steps will allow you to capture more efficiently the difference between attributions methods.</p> </li> <li> <p>The order of importance of features with low importance may not matter, hence, decreasing the max_percentage_perturbed, may make the score more relevant.</p> </li> </ul> <p>Sometimes, attributions methods also returns negative attributions, for those methods, do not take the absolute value before computing insertion and deletion metrics. Otherwise, negative attributions may have higher absolute values, and the order of importance between features will change. Therefore, take those previous remarks into account to get a relevant score.</p>"},{"location":"api/attributions/metrics/insertion/#example","title":"Example","text":"<pre><code>from xplique.metrics import Insertion\nfrom xplique.attributions import Saliency\n\n# load images, labels and model\n# ...\nexplainer = Saliency(model)\nexplanations = explainer(inputs, labels)\n\nmetric = Insertion(model, inputs, labels)\nscore = metric.evaluate(explanations)\n</code></pre>"},{"location":"api/attributions/metrics/insertion/#Insertion","title":"<code>Insertion</code>","text":"<p>The insertion metric, on the other hand, captures the importance of the pixels in terms of their ability to synthesize an image and is measured by the rise in the probability of the class of interest as pixels are added according to the generated importance map. </p>"},{"location":"api/attributions/metrics/insertion/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None,  batch_size:  Optional[int] = 64,  baseline_mode:  Union[float, Callable] = 0.0,  steps:  int = 10,  max_percentage_perturbed:  float = 1.0,  operator:  Optional[Callable] = None,  activation:  Optional[str] = None)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> Model used for computing metric.</p> </li> </ul> </li> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Input samples under study.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> One-hot encoded labels or regression target (e.g {+1, -1}), one for each sample.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 64 </p> <ul> <li><p> Number of samples to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>baseline_mode            : Union[float, Callable] = 0.0 </p> <ul> <li><p> Value of the baseline state, will be called with the inputs if it is a function.</p> </li> </ul> </li> <li> <p>steps            : int = 10 </p> <ul> <li><p> Number of steps between the start and the end state.</p><p> Can be set to -1 for all possible steps to be computed.</p> </li> </ul> </li> <li> <p>max_percentage_perturbed            : float = 1.0 </p> <ul> <li><p> Maximum percentage of the input perturbed.</p> </li> </ul> </li> <li> <p>operator            : Optional[Callable] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>activation            : Optional[str] = None </p> <ul> <li><p> A string that belongs to [None, 'sigmoid', 'softmax']. Specify if we should add an activation layer once the model has been called. It is useful, for instance if you want to measure a 'drop of probability' by adding a sigmoid or softmax after getting your logits. If None does not add a layer to your model.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/metrics/insertion/#detailed_evaluate","title":"<code>detailed_evaluate(self,  explanations:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray]) -&gt; Dict[int, float]</code>","text":"<p>Evaluate model performance for successive perturbations of an input. Used to compute causal score. </p> <p>Parameters</p> <ul> <li> <p>explanations            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Explanation for the inputs, labels to evaluate.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>causal_score_dict            : Dict[int, float] </p> <ul> <li><p> Dictionary of scores obtain for different perturbations Keys are the steps, i.e the number of features perturbed Values are the scores, the score of the model     on the inputs with the corresponding number of features perturbed</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/attributions/metrics/insertion/#evaluate","title":"<code>evaluate(self,  explanations:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray]) -&gt; float</code>","text":"<p>Evaluate the causal score. </p> <p>Parameters</p> <ul> <li> <p>explanations            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Explanation for the inputs, labels to evaluate.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>causal_score            : float </p> <ul> <li><p> Metric score, area over the deletion (lower is better) or insertion (higher is better) curve.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>RISE: Randomized Input Sampling for Explanation of Black-box Models (2018) \u21a9</p> </li> </ol>"},{"location":"api/attributions/metrics/mu_fidelity/","title":"MuFidelity","text":"<p>MuFidelity is a fidelity metric measuring the correlation between important variables defined by the explanation method and the decline in the model score when these variables are reset to a baseline state.</p> <p>Quote</p> <p>[...]  when we set particular features \\(x_s\\) to a baseline value \\(x_0\\) the change in predictor\u2019s output should be proportional to the sum of attribution scores.</p> <p>-- Evaluating and Aggregating Feature-based Model Explanations (2020)<sup>1</sup></p> <p>Formally, given a predictor \\(f\\), an explanation function \\(g\\), a point \\(x \\in \\mathbb{R}^n\\) and a subset size \\(k\\) the MuFidelity metric is defined as:</p> \\[ \\mu F = \\underset{S \\subseteq \\{1, ..., d\\} \\\\ |S| = k}{Corr}( \\sum_{i \\in S} g(f, x)_i, f(x) - f(x_{[x_i = x_0 | i \\in S]})) \\] <p>Info</p> <p>The better the method, the higher the score.</p>"},{"location":"api/attributions/metrics/mu_fidelity/#example","title":"Example","text":"<pre><code>from xplique.metrics import MuFidelity\nfrom xplique.attributions import Saliency\n\n# load images, labels and model\n# ...\nexplainer = Saliency(model)\nexplanations = explainer(inputs, lablels)\n\nmetric = MuFidelity(model, inputs, labels)\nscore = metric.evaluate(explainations)\n</code></pre>"},{"location":"api/attributions/metrics/mu_fidelity/#MuFidelity","title":"<code>MuFidelity</code>","text":"<p>Used to compute the fidelity correlation metric. This metric ensure there is a correlation between a random subset of pixels and their attribution score. For each random subset created, we set the pixels of the subset at a baseline state and obtain the prediction score. This metric measures the correlation between the drop in the score and the importance of the explanation. </p>"},{"location":"api/attributions/metrics/mu_fidelity/#__init__","title":"<code>__init__(self,  model:  Callable,  inputs:  Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None,  batch_size:  Optional[int] = 64,  grid_size:  Optional[int] = 9,  subset_percent:  float = 0.2,  baseline_mode:  Union[Callable, float] = 0.0,  nb_samples:  int = 200,  operator:  Optional[Callable] = None,  activation:  Optional[str] = None)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : Callable </p> <ul> <li><p> Model used for computing metric.</p> </li> </ul> </li> <li> <p>inputs            : Union[tf.Dataset, tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Input samples under study.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> One-hot encoded labels or regression target (e.g {+1, -1}), one for each sample.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 64 </p> <ul> <li><p> Number of samples to explain at once, if None compute all at once.</p> </li> </ul> </li> <li> <p>grid_size            : Optional[int] = 9 </p> <ul> <li><p> If none, compute the original metric, else cut the image in (grid_size, grid_size) and each element of the subset will be a super pixel representing one element of the grid.</p><p> You should use this when dealing with medium / large size images.</p> </li> </ul> </li> <li> <p>subset_percent            : float = 0.2 </p> <ul> <li><p> Percent of the image that will be set to baseline.</p> </li> </ul> </li> <li> <p>baseline_mode            : Union[Callable, float] = 0.0 </p> <ul> <li><p> Value of the baseline state, will be called with the a single input if it is a function.</p> </li> </ul> </li> <li> <p>nb_samples            : int = 200 </p> <ul> <li><p> Number of different subsets to try on each input to measure the correlation.</p> </li> </ul> </li> <li> <p>operator            : Optional[Callable] = None </p> <ul> <li><p> Function g to explain, g take 3 parameters (f, x, y) and should return a scalar, with f the model, x the inputs and y the targets. If None, use the standard operator g(f, x, y) = f(x)[y].</p> </li> </ul> </li> <li> <p>activation            : Optional[str] = None </p> <ul> <li><p> A string that belongs to [None, 'sigmoid', 'softmax']. Specify if we should add an activation layer once the model has been called. It is useful, for instance if you want to measure a 'drop of probability' by adding a sigmoid or softmax after getting your logits. If None does not add a layer to your model.</p> </li> </ul> </li> </ul>"},{"location":"api/attributions/metrics/mu_fidelity/#evaluate","title":"<code>evaluate(self,  explanations:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray]) -&gt; float</code>","text":"<p>Evaluate the fidelity score. </p> <p>Parameters</p> <ul> <li> <p>explanations            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Explanation for the inputs, labels to evaluate.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>fidelity_score            : float </p> <ul> <li><p> Metric score, average correlation between the drop in score when variables are set to a baseline state and the importance of these variables according to the explanations.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Evaluating and Aggregating Feature-based Model Explanations (2020) \u21a9</p> </li> </ol>"},{"location":"api/concepts/cav/","title":"CAV","text":"<p>CAV or Concept Activation Vector represent a high-level concept as a vector that indicate the direction to take (for activations of a layer) to maximise this concept.</p> <p>Quote</p> <p>[...] CAV for a concept is simply a vector in the direction of the values (e.g., activations) of that concept\u2019s set of examples\u2026 we derive CAVs by training a linear classifier between a concept\u2019s examples and random counter examples and then taking the vector orthogonal to the decision boundary.</p> <p>-- Interpretability Beyond Feature Attribution: Quantitative Testing with Concept Activation Vectors (TCAV) (2018).<sup>1</sup></p> <p>For a layer \\(f_l\\) of a model, we seek the linear classifier \\(v_l \\in \\mathbb{R}^d\\) that separate the activations of the positive examples \\(\\{ f_l(x) : x \\in \\mathcal{P} \\}\\), and the activations of the random/negative examples \\(\\{ f_l(x) : x \\in \\mathcal{R} \\}\\).</p>"},{"location":"api/concepts/cav/#example","title":"Example","text":"<pre><code>from xplique.concepts import Cav\n\ncav_renderer = Cav(model, 'mixed4d', classifier='SGD', test_fraction=0.1)\ncav = cav_renderer(positive_examples, random_examples)\n</code></pre>"},{"location":"api/concepts/cav/#Cav","title":"<code>Cav</code>","text":"<p>Used to compute the Concept Activation Vector, which is a vector in the direction of the activations of that concept\u2019s set of examples. </p>"},{"location":"api/concepts/cav/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  target_layer:  Union[str, int],  classifier:  Union[str, Callable] = 'SGD',  test_fraction:  float = 0.2,  batch_size:  int = 64,  verbose:  bool = False)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> Model to extract concept from.</p> </li> </ul> </li> <li> <p>target_layer            : Union[str, int] </p> <ul> <li><p> Index of the target layer or name of the layer.</p> </li> </ul> </li> <li> <p>classifier            : 'SGD' or 'SVC' or Sklearn model, optional </p> <ul> <li><p> Default implementation use SGD with hinge classifier (linear SVM), SVC use libsvm but the computation time is longer.</p> </li> </ul> </li> <li> <p>test_fraction            : float = 0.2 </p> <ul> <li><p> Fraction of the dataset used for test</p> </li> </ul> </li> <li> <p>batch_size            : int = 64 </p> <ul> <li><p> Batch size during the activations extraction</p> </li> </ul> </li> <li> <p>verbose            : bool = False </p> <ul> <li><p> If true, display information while training the classifier</p> </li> </ul> </li> </ul>"},{"location":"api/concepts/cav/#fit","title":"<code>fit(self,  positive_dataset:  tensorflow.python.framework.tensor.Tensor,  negative_dataset:  tensorflow.python.framework.tensor.Tensor) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Compute and return the Concept Activation Vector (CAV) associated to the dataset and the layer targeted. </p> <p>Parameters</p> <ul> <li> <p>positive_dataset            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Dataset of positive samples : samples containing the concept.</p> </li> </ul> </li> <li> <p>negative_dataset            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Dataset of negative samples : samples without the concept</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>cav            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Vector of the same shape as the layer output</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Interpretability Beyond Feature Attribution: Quantitative Testing with Concept Activation Vectors (TCAV) (2018). \u21a9</p> </li> </ol>"},{"location":"api/concepts/craft/","title":"CRAFT","text":"<p> View colab Tensorflow tutorial |  View colab Pytorch tutorial | View source | \ud83d\udcf0 Paper</p> <p>CRAFT or Concept Recursive Activation FacTorization for Explainability is a method for automatically extracting human-interpretable concepts from deep networks.</p> <p>This concept activations factorization method aims to explain a trained model's decisions on a per-class and per-image basis by highlighting both \"what\" the model saw and \u201cwhere\u201d it saw it. Thus CRAFT generates post-hoc local and global explanations.</p> <p>It is made up from 3 ingredients:</p> <ol> <li>a method to recursively decompose concepts into sub-concepts</li> <li>a method to better estimate the importance of extracted concepts</li> <li>a method to use any attribution method to create concept attribution maps, using implicit differentiation</li> </ol> <p>CRAFT requires splitting the model in two parts: \\((g, h)\\) such that \\(f(x) = (g \\cdot h)(x)\\). To put it simply, \\(g\\) is the function that maps our input to the latent space (an inner layer of our model), and \\(h\\) is the function that maps the latent space to the output. The concepts will be extracted from this latent space.</p> <p>Info</p> <p>It is important to note that if the model contains a global average pooling layer, it is strongly recommended to provide CRAFT with the layer before the global average pooling.</p> <p>Warning</p> <p>Please keep in mind that the activations must be positives (after relu or any positive activation function)</p>"},{"location":"api/concepts/craft/#example","title":"Example","text":"<p>Use Craft to investigate a single class.</p> <pre><code>from xplique.concepts import CraftTf as Craft\n\n# Cut the model in two parts (as explained in the paper)\n# first part is g(.) our 'input_to_latent' model returning positive activations,\n# second part is h(.) our 'latent_to_logit' model\n\ng = tf.keras.Model(model.input, model.layers[-3].output)\nh = tf.keras.Model(model.layers[-2].input, model.layers[-1].output)\n\n# Create a Craft concept extractor from these 2 models\ncraft = Craft(input_to_latent_model = g,\n              latent_to_logit_model = h,\n              number_of_concepts = 10,\n              patch_size = 80,\n              batch_size = 64)\n\n# Use Craft to get the crops (crops), the embedding of the crops (crops_u),\n# and the concept bank (w)\ncrops, crops_u, w = craft.fit(images_preprocessed, class_id=rabbit_class_id)\n\n# Compute Sobol indices to understand which concept matters\nimportances = craft.estimate_importance()\n\n# Display those concepts by showing the 10 best crops for each concept\ncraft.plot_concepts_crops(nb_crops=10)\n</code></pre> <p>Use CraftManager to investigate multiple classes.</p> <pre><code>from xplique.concepts import CraftManagerTf as CraftManager\n\n\n# Cut the model in two parts (as explained in the paper)\n# first part is g(.) our 'input_to_latent' model returning positive activations,\n# second part is h(.) our 'latent_to_logit' model\n\ng = tf.keras.Model(model.input, model.layers[-3].output)\nh = tf.keras.Model(model.layers[-2].input, model.layers[-1].output)\n\n# CraftManager will create one instance of Craft per class of interest\n# to investigate\nlist_of_class_of_interest = [0, 491, 497, 569, 574] # list of class_ids\ncm = CraftManager(input_to_latent_model = g,\n                 latent_to_logit_model = h,\n                 inputs = inputs_preprocessed,\n                 labels = y,\n                 list_of_class_of_interest = list_of_class_of_interest,\n                 number_of_concepts = 10,\n                 patch_size = 80,\n                 batch_size = 64)\n\ncm.fit(nb_samples_per_class=50)\n\n# Compute Sobol indices to understand which concept matters\ncm.estimate_importance()\n\n# Display those concepts by showing the 10 best crops for each concept,\n# for the 1st class\ncm.plot_concepts_crops(class_id=0, nb_crops=10)\n</code></pre>"},{"location":"api/concepts/craft/#CraftTf","title":"<code>CraftTf</code>","text":"<p>Class implementing the CRAFT Concept Extraction Mechanism on Tensorflow. </p>"},{"location":"api/concepts/craft/#__init__","title":"<code>__init__(self,  input_to_latent_model:  Callable,  latent_to_logit_model:  Callable,  number_of_concepts:  int = 20,  batch_size:  int = 64,  patch_size:  int = 64)</code>","text":"<p>Parameters</p> <ul> <li> <p>input_to_latent_model            : Callable </p> <ul> <li><p> The first part of the model taking an input and returning positive activations, g(.) in the original paper.</p><p> Must be a Tensorflow model (tf.keras.engine.base_layer.Layer) accepting data of shape (n_samples, height, width, channels).</p> </li> </ul> </li> <li> <p>latent_to_logit_model            : Callable </p> <ul> <li><p> The second part of the model taking activation and returning logits, h(.) in the original paper.</p><p> Must be a Tensorflow model (tf.keras.engine.base_layer.Layer).</p> </li> </ul> </li> <li> <p>number_of_concepts            : int = 20 </p> <ul> <li><p> The number of concepts to extract. Default is 20.</p> </li> </ul> </li> <li> <p>batch_size            : int = 64 </p> <ul> <li><p> The batch size to use during training and prediction. Default is 64.</p> </li> </ul> </li> <li> <p>patch_size            : int = 64 </p> <ul> <li><p> The size of the patches to extract from the input data. Default is 64.</p> </li> </ul> </li> </ul>"},{"location":"api/concepts/craft/#check_if_fitted","title":"<code>check_if_fitted(self)</code>","text":"<p>Checks if the factorization model has been fitted to input data. </p> <p></p>"},{"location":"api/concepts/craft/#compute_subplots_layout_parameters","title":"<code>compute_subplots_layout_parameters(images:  numpy.ndarray,  cols:  int = 5,  img_size:  float = 2.0,  margin:  float = 0.3,  spacing:  float = 0.3)</code>","text":"<p>Compute layout parameters for subplots, to be used by the method fig.subplots_adjust() </p> <p>Parameters</p> <ul> <li> <p>images            : numpy.ndarray </p> <ul> <li><p> The images to display with subplots. Should be data of shape (n_samples, height, width, channels).</p> </li> </ul> </li> <li> <p>cols            : int = 5 </p> <ul> <li><p> Number of columns to configure for the subplots.</p><p> Defaults to 5.</p> </li> </ul> </li> <li> <p>img_size            : float = 2.0 </p> <ul> <li><p> Size of each subplots (in inch), considering we keep aspect ratio. Defaults to 2.</p> </li> </ul> </li> <li> <p>margin            : float = 0.3 </p> <ul> <li><p> The margin to use for the subplots. Defaults to 0.3.</p> </li> </ul> </li> <li> <p>spacing            : float = 0.3 </p> <ul> <li><p> The spacing to use for the subplots. Defaults to 0.3.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>layout_parameters </p> <ul> <li><p> A dictionary containing the layout description</p> </li> </ul> </li> <li> <p>rows </p> <ul> <li><p> The number of rows needed to display the images</p> </li> </ul> </li> <li> <p>figwidth </p> <ul> <li><p> The figures width in the subplots</p> </li> </ul> </li> <li> <p>figheight </p> <ul> <li><p> The figures height in the subplots</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/concepts/craft/#estimate_importance","title":"<code>estimate_importance(self,  inputs:  numpy.ndarray = None,  nb_design:  int = 32) -&gt; numpy.ndarray</code>","text":"<p>Estimates the importance of each concept for a given class, either globally on the whole dataset provided in the fit() method (in this case, inputs shall be set to None), or locally on a specific input image. </p> <p>Parameters</p> <ul> <li> <p>inputs            : numpy array or Tensor </p> <ul> <li><p> The input data on which to compute the importances.</p><p> If None, then the inputs provided in the fit() method will be used (global importance of the whole dataset).</p><p> Default is None.</p> </li> </ul> </li> <li> <p>nb_design            : int = 32 </p> <ul> <li><p> The number of design to use for the importance estimation. Default is 32.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>importances            : numpy.ndarray </p> <ul> <li><p> The Sobol total index (importance score) for each concept.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/concepts/craft/#fit","title":"<code>fit(self,  inputs:  numpy.ndarray,  class_id:  int = 0) -&gt; Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray]</code>","text":"<p>Fit the Craft model to the input data. </p> <p>Parameters</p> <ul> <li> <p>inputs            : numpy.ndarray </p> <ul> <li><p> Input data of shape (n_samples, height, width, channels).</p><p> (x1, x2, ..., xn) in the paper.</p> </li> </ul> </li> <li> <p>class_id            : int = 0 </p> <ul> <li><p> The class id of the inputs.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>crops            : Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray] </p> <ul> <li><p> The crops (X in the paper)</p> </li> </ul> </li> <li> <p>crops_u            : Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray] </p> <ul> <li><p> The concepts' values (U in the paper)</p> </li> </ul> </li> <li> <p>concept_bank_w            : Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray] </p> <ul> <li><p> The concept's basis (W in the paper)</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/concepts/craft/#plot_concept_attribution_legend","title":"<code>plot_concept_attribution_legend(self,  nb_most_important_concepts:  int = 6,  border_width:  int = 5)</code>","text":"<p>Plot a legend for the concepts attribution maps. </p> <p>Parameters</p> <ul> <li> <p>nb_most_important_concepts            : int = 6 </p> <ul> <li><p> The number of concepts to focus on. Default is 6.</p> </li> </ul> </li> <li> <p>border_width            : int = 5 </p> <ul> <li><p> Width of the border around each concept image, in pixels. Defaults to 5.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/concepts/craft/#plot_concept_attribution_map","title":"<code>plot_concept_attribution_map(self,  image:  numpy.ndarray,  most_important_concepts:  numpy.ndarray,  nb_most_important_concepts:  int = 5,  filter_percentile:  int = 90,  clip_percentile:  Optional[float] = 10,  alpha:  float = 0.65,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 **plot_kwargs)</code>","text":"<p>Display the concepts attribution map for a single image given in argument. </p> <p>Parameters</p> <ul> <li> <p>image            : numpy.ndarray </p> <ul> <li><p> The image to display.</p> </li> </ul> </li> <li> <p>most_important_concepts            : numpy.ndarray </p> <ul> <li><p> The concepts ids to display.</p> </li> </ul> </li> <li> <p>nb_most_important_concepts            : int = 5 </p> <ul> <li><p> The number of concepts to display. Default is 5.</p> </li> </ul> </li> <li> <p>filter_percentile            : int = 90 </p> <ul> <li><p> Percentile used to filter the concept heatmap.</p><p> (only show concept if excess N-th percentile). Defaults to 90.</p> </li> </ul> </li> <li> <p>clip_percentile            : Optional[float] = 10 </p> <ul> <li><p> Percentile value to use if clipping is needed when drawing the concept, e.g a value of 1 will perform a clipping between percentile 1 and 99.</p><p> This parameter allows to avoid outliers in case of too extreme values.</p><p> It is applied after the filter_percentile operation.</p><p> Default to 10.</p> </li> </ul> </li> <li> <p>alpha            : float = 0.65 </p> <ul> <li><p> The alpha channel value for the heatmaps. Defaults to 0.65.</p> </li> </ul> </li> <li> <p>plot_kwargs            : **plot_kwargs </p> <ul> <li><p> Additional parameters passed to <code>plt.imshow()</code>.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/concepts/craft/#plot_concept_attribution_maps","title":"<code>plot_concept_attribution_maps(self,  images:  numpy.ndarray,  importances:  numpy.ndarray = None,  nb_most_important_concepts:  int = 5,  filter_percentile:  int = 90,  clip_percentile:  Optional[float] = 10.0,  alpha:  float = 0.65,  cols:  int = 5,  img_size:  float = 2.0,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 **plot_kwargs)</code>","text":"<p>Display the concepts attribution maps for the images given in argument. </p> <p>Parameters</p> <ul> <li> <p>images            : numpy.ndarray </p> <ul> <li><p> The images to display.</p> </li> </ul> </li> <li> <p>importances            : numpy.ndarray = None </p> <ul> <li><p> The importances computed by the estimate_importance() method.</p><p> If None is provided, then the global importances will be used, otherwise the local importances set in this parameter will be used.</p> </li> </ul> </li> <li> <p>nb_most_important_concepts            : int = 5 </p> <ul> <li><p> The number of concepts to focus on. Default is 5.</p> </li> </ul> </li> <li> <p>filter_percentile            : int = 90 </p> <ul> <li><p> Percentile used to filter the concept heatmap (only show concept if excess N-th percentile). Defaults to 90.</p> </li> </ul> </li> <li> <p>clip_percentile            : Optional[float] = 10.0 </p> <ul> <li><p> Percentile value to use if clipping is needed when drawing the concept, e.g a value of 1 will perform a clipping between percentile 1 and 99.</p><p> This parameter allows to avoid outliers in case of too extreme values.</p><p> It is applied after the filter_percentile operation.</p><p> Default to 10.</p> </li> </ul> </li> <li> <p>alpha            : float = 0.65 </p> <ul> <li><p> The alpha channel value for the heatmaps. Defaults to 0.65.</p> </li> </ul> </li> <li> <p>cols            : int = 5 </p> <ul> <li><p> Number of columns. Default to 3.</p> </li> </ul> </li> <li> <p>img_size            : float = 2.0 </p> <ul> <li><p> Size of each subplots (in inch), considering we keep aspect ratio.</p> </li> </ul> </li> <li> <p>plot_kwargs            : **plot_kwargs </p> <ul> <li><p> Additional parameters passed to <code>plt.imshow()</code>.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/concepts/craft/#plot_concepts_crops","title":"<code>plot_concepts_crops(self,  nb_crops:  int = 10,  nb_most_important_concepts:  int = None,  verbose:  bool = False) -&gt; None</code>","text":"<p>Display the crops for each concept. </p> <p>Parameters</p> <ul> <li> <p>nb_crops            : int = 10 </p> <ul> <li><p> The number of crops (patches) to display per concept. Defaults to 10.</p> </li> </ul> </li> <li> <p>nb_most_important_concepts            : int = None </p> <ul> <li><p> The number of concepts to display. If provided, only display nb_most_important_concepts, otherwise display them all.</p><p> Default is None.</p> </li> </ul> </li> <li> <p>verbose            : bool = False </p> <ul> <li><p> If True, then print the importance value of each concept, otherwise no textual output will be printed.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/concepts/craft/#plot_concepts_importances","title":"<code>plot_concepts_importances(self,  importances:  numpy.ndarray = None,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 display_importance_order: xplique.concepts.craft.DisplayImportancesOrder = ,  nb_most_important_concepts:  int = None,  verbose:  bool = False) <p>Plot a bar chart displaying the importance value of each concept. </p> <p>Parameters</p> <ul> <li> <p>importances            : numpy.ndarray = None </p> <ul> <li><p> The importances computed by the estimate_importance() method.</p><p> Default is None, in this case the importances computed on the whole dataset will be used.</p> </li> </ul> </li> <li> <p>display_importance_order            : 0&gt; </p> <ul> <li><p> Selects the order in which the concepts will be displayed, either following the global importance on the whole dataset (same order for all images) or the local importance of the concepts for a single image sample (local importance).</p> </li> </ul> </li> <li> <p>nb_most_important_concepts            : int = None </p> <ul> <li><p> The number of concepts to display. If None is provided, then all the concepts will be displayed unordered, otherwise only nb_most_important_concepts will be displayed, ordered by importance.</p><p> Default is None.</p> </li> </ul> </li> <li> <p>verbose            : bool = False </p> <ul> <li><p> If True, then print the importance value of each concept, otherwise no textual output will be printed.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/concepts/craft/#plot_image_concepts","title":"<code>plot_image_concepts(self,  img:  numpy.ndarray,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 display_importance_order: xplique.concepts.craft.DisplayImportancesOrder = ,  nb_most_important_concepts:  int = 5,  filter_percentile:  int = 90,  clip_percentile:  Optional[float] = 10,  alpha:  float = 0.65,  filepath:  Optional[str] = None,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 **plot_kwargs) <p>All in one method displaying several plots for the image <code>id</code> given in argument: - the concepts attribution map for this image - the best crops for each concept (displayed around the heatmap) - the importance of each concept </p> <p>Parameters</p> <ul> <li> <p>img            : numpy.ndarray </p> <ul> <li><p> The image to display.</p> </li> </ul> </li> <li> <p>display_importance_order            : 0&gt; </p> <ul> <li><p> Selects the order in which the concepts will be displayed, either following the global importance on the whole dataset (same order for all images) or the local importance of the concepts for a single image sample (local importance).</p><p> Default to GLOBAL.</p> </li> </ul> </li> <li> <p>nb_most_important_concepts            : int = 5 </p> <ul> <li><p> The number of concepts to display. Default is 5.</p> </li> </ul> </li> <li> <p>filter_percentile            : int = 90 </p> <ul> <li><p> Percentile used to filter the concept heatmap (only show concept if excess N-th percentile). Defaults to 90.</p> </li> </ul> </li> <li> <p>clip_percentile            : Optional[float] = 10 </p> <ul> <li><p> Percentile value to use if clipping is needed when drawing the concept, e.g a value of 1 will perform a clipping between percentile 1 and 99.</p><p> This parameter allows to avoid outliers in case of too extreme values.</p><p> Default to 10.</p> </li> </ul> </li> <li> <p>alpha            : float = 0.65 </p> <ul> <li><p> The alpha channel value for the heatmaps. Defaults to 0.65.</p> </li> </ul> </li> <li> <p>filepath            : Optional[str] = None </p> <ul> <li><p> Path the file will be saved at. If None, the function will call plt.show().</p> </li> </ul> </li> <li> <p>plot_kwargs            : **plot_kwargs </p> <ul> <li><p> Additional parameters passed to <code>plt.imshow()</code>.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/concepts/craft/#transform","title":"<code>transform(self,  inputs:  numpy.ndarray,  activations:  numpy.ndarray = None) -&gt; numpy.ndarray</code> <p>Transforms the inputs data into its concept representation. </p> <p>Parameters</p> <ul> <li> <p>inputs            : numpy.ndarray </p> <ul> <li><p> The input data to be transformed.</p> </li> </ul> </li> <li> <p>activations            : numpy.ndarray = None </p> <ul> <li><p> Pre-computed activations of the input data. If not provided, the activations will be computed using the input_to_latent_model model on the inputs.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>coeffs_u            : numpy.ndarray </p> <ul> <li><p> The concepts' values of the inputs (U in the paper).</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/concepts/craft/#CraftManagerTf","title":"<code>CraftManagerTf</code>","text":"<p>Class implementing the CraftManager on Tensorflow. This manager creates one CraftTf instance per class to explain. </p>"},{"location":"api/concepts/craft/#__init__","title":"<code>__init__(self,  input_to_latent_model:  Callable,  latent_to_logit_model:  Callable,  inputs:  numpy.ndarray,  labels:  numpy.ndarray,  list_of_class_of_interest:  Optional[list] = None,  number_of_concepts:  int = 20,  batch_size:  int = 64,  patch_size:  int = 64)</code> <p>Parameters</p> <ul> <li> <p>input_to_latent_model            : Callable </p> <ul> <li><p> The first part of the model taking an input and returning positive activations, g(.) in the original paper.</p><p> Must return positive activations.</p> </li> </ul> </li> <li> <p>latent_to_logit_model            : Callable </p> <ul> <li><p> The second part of the model taking activation and returning logits, h(.) in the original paper.</p> </li> </ul> </li> <li> <p>inputs            : numpy.ndarray </p> <ul> <li><p> Input data of shape (n_samples, height, width, channels).</p><p> (x1, x2, ..., xn) in the paper.</p> </li> </ul> </li> <li> <p>labels            : numpy.ndarray </p> <ul> <li><p> Labels of the inputs of shape (n_samples, class_id)</p> </li> </ul> </li> <li> <p>list_of_class_of_interest            : Optional[list] = None </p> <ul> <li><p> A list of the classes id to explain. The manager will instanciate one CraftTf object per element of this list.</p> </li> </ul> </li> <li> <p>number_of_concepts            : int = 20 </p> <ul> <li><p> The number of concepts to extract. Default is 20.</p> </li> </ul> </li> <li> <p>batch_size            : int = 64 </p> <ul> <li><p> The batch size to use during training and prediction. Default is 64.</p> </li> </ul> </li> <li> <p>patch_size            : int = 64 </p> <ul> <li><p> The size of the patches (crops) to extract from the input data. Default is 64.</p> </li> </ul> </li> </ul>","text":""},{"location":"api/concepts/craft/#compute_predictions","title":"<code>compute_predictions(self)</code> <p>Compute the predictions for the current dataset, using the 2 models input_to_latent_model and latent_to_logit_model chained. </p> <p>Return</p> <ul> <li> <p>y_preds </p> <ul> <li><p> the predictions</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/concepts/craft/#estimate_importance","title":"<code>estimate_importance(self,  nb_design:  int = 32,  verbose:  bool = False)</code> <p>Estimates the importance of each concept for all the classes of interest. </p> <p>Parameters</p> <ul> <li> <p>nb_design            : int = 32 </p> <ul> <li><p> The number of design to use for the importance estimation. Default is 32.</p> </li> </ul> </li> <li> <p>verbose            : bool = False </p> <ul> <li><p> If True, then print the current class CRAFT is estimating importances for, otherwise no textual output will be printed.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/concepts/craft/#fit","title":"<code>fit(self,  nb_samples_per_class:  Optional[int] = None,  verbose:  bool = False)</code> <p>Fit the Craft models on their respective class of interest. </p> <p>Parameters</p> <ul> <li> <p>nb_samples_per_class            : Optional[int] = None </p> <ul> <li><p> Number of samples to use to fit the Craft model.</p><p> Default is None, which means that all the samples will be used.</p> </li> </ul> </li> <li> <p>verbose            : bool = False </p> <ul> <li><p> If True, then print the current class CRAFT is fitting, otherwise no textual output will be printed.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/concepts/craft/#plot_concepts_crops","title":"<code>plot_concepts_crops(self,  class_id:  int,  nb_crops:  int = 10,  nb_most_important_concepts:  int = None)</code> <p>Display the crops for each concept. </p> <p>Parameters</p> <ul> <li> <p>class_id            : int </p> <ul> <li><p> The class to explain.</p> </li> </ul> </li> <li> <p>nb_crops            : int = 10 </p> <ul> <li><p> The number of crops (patches) to display per concept. Defaults to 10.</p> </li> </ul> </li> <li> <p>nb_most_important_concepts            : int = None </p> <ul> <li><p> The number of concepts to display. If provided, only display nb_most_important_concepts, otherwise display them all.</p><p> Default is None.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/concepts/craft/#plot_concepts_importances","title":"<code>plot_concepts_importances(self,  class_id:  int,  nb_most_important_concepts:  int = 5,  verbose:  bool = False)</code> <p>Plot a bar chart displaying the importance value of each concept. </p> <p>Parameters</p> <ul> <li> <p>class_id            : int </p> <ul> <li><p> The class to explain.</p> </li> </ul> </li> <li> <p>nb_most_important_concepts            : int = 5 </p> <ul> <li><p> The number of concepts to focus on. Default is 5.</p> </li> </ul> </li> <li> <p>verbose            : bool = False </p> <ul> <li><p> If True, then print the importance value of each concept, otherwise no textual output will be printed.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/concepts/craft/#plot_image_concepts","title":"<code>plot_image_concepts(self,  img:  numpy.ndarray,  class_id:  int,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 display_importance_order: xplique.concepts.craft.DisplayImportancesOrder = ,  nb_most_important_concepts:  int = 5,  filter_percentile:  int = 90,  clip_percentile:  Optional[float] = 10,  alpha:  float = 0.65,  filepath:  Optional[str] = None) <p>All in one method displaying several plots for the image <code>id</code> given in argument: - the concepts attribution map for this image - the best crops for each concept (displayed around the heatmap) - the importance of each concept </p> <p>Parameters</p> <ul> <li> <p>img            : numpy.ndarray </p> <ul> <li><p> The image to explain.</p> </li> </ul> </li> <li> <p>class_id            : int </p> <ul> <li><p> The class to explain.</p> </li> </ul> </li> <li> <p>display_importance_order            : 0&gt; </p> <ul> <li><p> Selects the order in which the concepts will be displayed, either following the global importance on the whole dataset (same order for all images) or the local importance of the concepts for a single image sample (local importance).</p><p> Default to GLOBAL.</p> </li> </ul> </li> <li> <p>nb_most_important_concepts            : int = 5 </p> <ul> <li><p> The number of concepts to focus on. Default is 5.</p> </li> </ul> </li> <li> <p>filter_percentile            : int = 90 </p> <ul> <li><p> Percentile used to filter the concept heatmap (only show concept if excess N-th percentile). Defaults to 90.</p> </li> </ul> </li> <li> <p>clip_percentile            : Optional[float] = 10 </p> <ul> <li><p> Percentile value to use if clipping is needed when drawing the concept, e.g a value of 1 will perform a clipping between percentile 1 and 99.</p><p> This parameter allows to avoid outliers in case of too extreme values.</p><p> Default to 10.</p> </li> </ul> </li> <li> <p>alpha            : float = 0.65 </p> <ul> <li><p> The alpha channel value for the heatmaps. Defaults to 0.65.</p> </li> </ul> </li> <li> <p>filepath            : Optional[str] = None </p> <ul> <li><p> Path the file will be saved at. If None, the function will call plt.show().</p> </li> </ul> </li> </ul> <p></p>   <ol> <li> <p>CRAFT: Concept Recursive Activation FacTorization for Explainability (2023). \u21a9</p> </li> </ol>","text":""},{"location":"api/concepts/tcav/","title":"TCAV","text":"<p>TCAV or Testing with Concept Activation Vector consist consists in using a concept activation vector (CAV) to quantify the relationship between this concept and a class.</p> <p>This is done by using the directional derivative of the concept vector on several samples of a given class and measuring the percentage of positive (a positive directional derivative indicating that an infinitesimal addition of the concept increases the probability of the class).</p> <p>For a Concept Activation Vector \\(v_l\\) of a layer \\(f_l\\) of a model, and \\(f_{c}\\) the logit of the class \\(c\\), we measure the directional derivative \\(S_c(x) = v_l \\cdot \\frac{ \\partial{f_c(x)} } { \\partial{f_l}(x) }\\).</p> <p>The TCAV score is the percentage of elements of the class \\(c\\) for which the \\(S_c\\) is positive.</p> \\[ TCAV_c = \\frac{|x \\in \\mathcal{X}^c : S_c(x) &gt; 0 |}{ | \\mathcal{X}^c | } \\]"},{"location":"api/concepts/tcav/#example","title":"Example","text":"<pre><code>from xplique.concepts import Tcav\n\ntcav_renderer = Tcav(model, 'mixed4d') # you can also pass the layer index (e.g -1)\ntcav_score = tcav_renderer(samples, class_index, cav)\n</code></pre>"},{"location":"api/concepts/tcav/#Tcav","title":"<code>Tcav</code>","text":"<p>Used to Test a Concept Activation Vector, using the sign of the directional derivative of a concept vector relative to a class. </p>"},{"location":"api/concepts/tcav/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  target_layer:  Union[str, int],  batch_size:  Optional[int] = 64)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> Model to extract concept from.</p> </li> </ul> </li> <li> <p>target_layer            : Union[str, int] </p> <ul> <li><p> Index of the target layer or name of the layer.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = 64 </p> <ul> <li><p> Batch size during the predictions.</p> </li> </ul> </li> </ul>"},{"location":"api/concepts/tcav/#directional_derivative","title":"<code>directional_derivative(multi_head_model:  keras.src.engine.training.Model,  inputs:  tensorflow.python.framework.tensor.Tensor,  label:  int,  cav:  tensorflow.python.framework.tensor.Tensor) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Compute the gradient of the label relative to the activations of the CAV layer. </p> <p>Parameters</p> <ul> <li> <p>multi_head_model            : keras.src.engine.training.Model </p> <ul> <li><p> Model reconfigured, first output is the activations of the CAV layer, and the second output is the prediction layer.</p> </li> </ul> </li> <li> <p>inputs            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Input sample on which to test the influence of the concept.</p> </li> </ul> </li> <li> <p>label            : int </p> <ul> <li><p> Index of the class to test.</p> </li> </ul> </li> <li> <p>cav            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Concept Activation Vector, same shape as the activations output.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>directional_derivative            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Directional derivative values of each samples.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/concepts/tcav/#score","title":"<code>score(self,  inputs:  tensorflow.python.framework.tensor.Tensor,  label:  int,  cav:  tensorflow.python.framework.tensor.Tensor) -&gt; float</code>","text":"<p>Compute and return the TCAV score of the CAV associated to class tested. </p> <p>Parameters</p> <ul> <li> <p>inputs            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Input sample on which to test the influence of the concept.</p> </li> </ul> </li> <li> <p>label            : int </p> <ul> <li><p> Index of the class to test.</p> </li> </ul> </li> <li> <p>cav            : tensorflow.python.framework.tensor.Tensor </p> <ul> <li><p> Concept Activation Vector, see CAV module.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>tcav            : float </p> <ul> <li><p> Percentage of sample for which increasing the concept has a positive impact on the class logit.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Interpretability Beyond Feature Attribution: Quantitative Testing with Concept Activation Vectors (TCAV) (2018). \u21a9</p> </li> </ol>"},{"location":"api/example_based/api_example_based/","title":"API: Example-based","text":"<ul> <li>Example-based Methods: Getting started </li> <li>Example-based: Prototypes </li> </ul>"},{"location":"api/example_based/api_example_based/#context","title":"Context","text":"<p>Quote</p> <p>While saliency maps have stolen the show for the last few years in the XAI field, their ability to reflect models' internal processes has been questioned. Although less in the spotlight, example-based XAI methods have continued to improve. It encompasses methods that use samples as explanations for a machine learning model's predictions. This aligns with the psychological mechanisms of human reasoning and makes example-based explanations natural and intuitive for users to understand. Indeed, humans learn and reason by forming mental representations of concepts based on examples.</p> <p>-- Natural Example-Based Explainability: a Survey (2023)<sup>1</sup></p> <p>As mentioned by our team members in the quote above, example-based methods are an alternative to saliency maps and can be more aligned with some users' expectations. Thus, we have been working on implementing some of those methods in Xplique that have been put aside in the previous developments.</p> <p>While not being exhaustive we tried to cover a range of methods that are representative of the field and that belong to different families: similar examples, contrastive (counter-factuals and semi-factuals) examples, and prototypes (as concepts based methods have a dedicated sections).</p> <p>At present, we made the following choices: - Focus on methods that are natural example methods (post-hoc and non-generative, see the paper above for more details). - Try to unify the four families of approaches with a common API.</p> <p>Info</p> <p>We are in the early stages of development and are looking for feedback on the API design and the methods we have chosen to implement. Also, we are counting on the community to furnish the collection of methods available. If you are willing to contribute reach us on the GitHub repository (with an issue, pull request, ...).</p>"},{"location":"api/example_based/api_example_based/#common-api","title":"Common API","text":"<pre><code>projection = ProjectionMethod(model)\n\nexplainer = ExampleMethod(\n    cases_dataset=cases_dataset, \n    k=k,\n    projection=projection,\n    case_returns=case_returns,\n    distance=distance,\n)\n\noutputs_dict = explainer.explain(inputs, targets)\n</code></pre> <p>We tried to keep the API as close as possible to the one of the attribution methods to keep a consistent experience for the users.</p> <p>The <code>BaseExampleMethod</code> is an abstract base class designed for example-based methods used to explain classification models. It provides examples from a dataset (usually the training dataset) to help understand a model's predictions. Examples are projected from the input space to a search space using a projection function. The projection function defines the search space. Then, examples are selected using a search method within the search space. For all example-based methods, one can define the <code>distance</code> that will be used by the search method. </p> <p>We can broadly categorize example-based methods into four families: similar examples, counter-factuals, semi-factuals, and prototypes.</p> <ul> <li>Similar Examples: This method involves finding instances in the dataset that are similar to a given instance. The similarity is often determined based on the feature space, and these examples can help in understanding the model's decision by showing what other data points resemble the instance in question.</li> <li>Counter Factuals: Counterfactual explanations identify the minimal changes needed to an instance's features to change the model's prediction to a different, specified outcome. They help answer \"what-if\" scenarios by showing how altering certain aspects of the input would lead to a different decision.</li> <li>Semi Factuals: Semifactual explanations describe hypothetical situations where most features of an instance remain the same except for one or a few features, without changing the overall outcome. They highlight which features could vary without altering the prediction.</li> <li>Prototypes: Prototypes are representative examples from the dataset that summarize typical cases within a certain category or cluster. They act as archetypal instances that the model uses to make predictions, providing a reference point for understanding model behavior. Additional documentation can be found in the Prototypes API documentation.</li> </ul> Table of example-based methods available Method Family Documentation Tutorial <code>SimilarExamples</code> Similar Examples SimilarExamples <code>Cole</code> Similar Examples Cole <code>NaiveCounterFactuals</code> Counter Factuals NaiveCounterFactuals <code>LabelAwareCounterFactuals</code> Counter Factuals LabelAwareCounterFactuals <code>KLEORSimMiss</code> Semi Factuals KLEOR <code>KLEORGlobalSim</code> Semi Factuals KLEOR <code>ProtoGreedy</code> Prototypes ProtoGreedy <code>ProtoDash</code> Prototypes ProtoDash <code>MMDCritic</code> Prototypes MMDCritic"},{"location":"api/example_based/api_example_based/#parameters","title":"Parameters","text":"<p><code>DatasetOrTensor = Union[tf.Tensor, np.ndarray, \"torch.Tensor\", tf.data.Dataset, \"torch.utils.data.DataLoader\"]</code></p> <ul> <li>cases_dataset (<code>DatasetOrTensor</code>): The dataset used to train the model, examples are extracted from this dataset. All datasets (cases, labels, and targets) should be of the same type. Supported types are: <code>tf.data.Dataset</code>, <code>torch.utils.data.DataLoader</code>, <code>tf.Tensor</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>. For datasets with multiple columns, the first column is assumed to be the cases. While the second column is assumed to be the labels, and the third the targets. Warning: datasets tend to reshuffle at each iteration, ensure the datasets are not reshuffle as we use index in the dataset.</li> <li>labels_dataset (<code>Optional[DatasetOrTensor]</code>): Labels associated with the examples in the cases dataset. It should have the same type as <code>cases_dataset</code>.</li> <li>targets_dataset (<code>Optional[DatasetOrTensor]</code>): Targets associated with the <code>cases_dataset</code> for dataset projection, often the one-hot encoding of a model's predictions. See <code>projection</code> for detail. It should have the same type as <code>cases_dataset</code>. It is not be necessary for all projections. Furthermore, projections which requires it compute it internally by default.</li> <li>k (<code>int</code>): The number of examples to retrieve per input.</li> <li>projection (<code>Union[Projection, Callable]</code>): A projection or callable function that projects samples from the input space to the search space. The search space should be relevant for the model. (see Projections)</li> <li>case_returns (<code>Union[List[str], str]</code>): Elements to return in <code>self.explain()</code>. Default is <code>\"examples\"</code>. <code>\"all\"</code> indicates that every possible output should be returned.</li> <li>batch_size (<code>Optional[int]</code>): Number of samples processed simultaneously for projection and search. Ignored if <code>cases_dataset</code> is a batched <code>tf.data.Dataset</code> or a batched <code>torch.utils.data.DataLoader</code> is provided.</li> </ul> <p>Tips</p> <p>If the elements of your dataset are tuples (cases, labels), you can pass this dataset directly to the <code>cases_dataset</code>.</p> <p>Tips</p> <p>Apart from contrastive explanations, in the case of classification, the built-in Projections compute <code>targets</code> online and the <code>targets_dataset</code> is not necessary.</p>"},{"location":"api/example_based/api_example_based/#properties","title":"Properties","text":"<ul> <li>search_method_class (<code>Type[BaseSearchMethod]</code>): Abstract property to define the search method class to use. Must be implemented in subclasses. (see Search Methods)</li> <li>k (<code>int</code>): Getter and setter for the <code>k</code> parameter.</li> <li>returns (<code>Union[List[str], str]</code>): Getter and setter for the <code>returns</code> parameter. Defines the elements to return in <code>self.explain()</code>.</li> </ul>"},{"location":"api/example_based/api_example_based/#explainself-inputs-targets","title":"<code>explain(self, inputs, targets)</code>","text":"<p>Returns the relevant examples to explain the (inputs, targets). Projects inputs using <code>self.projection</code> and finds examples using the <code>self.search_method</code>.</p> <ul> <li>inputs (<code>Union[tf.Tensor, np.ndarray]</code>): Input samples to be explained. Shape: (n, ...) where n is the number of samples.</li> <li>targets (<code>Optional[Union[tf.Tensor, np.ndarray]]</code>): Targets associated with the <code>inputs</code> for projection. Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes. Not used in all projection. Used in contrastive methods to know the predicted classes of the provided samples.</li> </ul> <p>Returns: Dictionary with elements listed in <code>self.returns</code>.</p> <p>Info</p> <p>The <code>__call__</code> method is an alias for the <code>explain</code> method.</p>"},{"location":"api/example_based/api_example_based/#projections","title":"Projections","text":"<p>Projections are functions that map input samples to a search space where examples are retrieved with a <code>search_method</code>. The search space should be relevant for the model (e.g. projecting the inputs into the latent space of the model).</p> <p>Info</p> <p>If one decides to use the identity function as a projection, the search space will be the input space, thus rather explaining the dataset than the model.</p> <p>The <code>Projection</code> class is a base class for projections. It involves two parts: <code>space_projection</code> and <code>weights</code>. The samples are first projected to a new space and then weighted. </p> <p>Warning</p> <p>If both parts are <code>None</code>, the projection acts as an identity function. In general, we advise that one part should involve the model to ensure meaningful distance calculations with respect to the model.</p> <p>To know more about projections and their importance, you can refer to the Projections section.</p>"},{"location":"api/example_based/api_example_based/#search-methods","title":"Search Methods","text":"<p>Info</p> <p>The search methods are hidden to the user and only used internally. However, they help to understand how the API works.</p> <p>Search methods are used to retrieve examples from the <code>cases_dataset</code> that are relevant to the input samples.</p> <p>Warning</p> <p>In an search method, the <code>cases_dataset</code> is the dataset that has been projected with a <code>Projection</code> object (see the previous section). The search methods are used to find examples in this projected space.</p> <p>Each example-based method has its own search method. The search method is defined in the <code>search_method_class</code> property of the <code>ExampleMethod</code> class.</p> <ol> <li> <p>Natural Example-Based Explainability: a Survey (2023) \u21a9</p> </li> </ol>"},{"location":"api/example_based/projections/","title":"Projections","text":"<p>In example-based explainability, one often needs to define a notion of similarity (distance) between samples. However, the original feature space may not be the most suitable space to define this similarity. For instance, in the case of images, two images can be very similar in terms of their pixel values but very different in terms of their semantic content. In addition, computing distances in the original feature space does not take into account the model's whatsoever, questioning the explainability of the method.</p> <p>To address these issues, one can project the samples into a new space where the distances between samples are more meaningful with respect to the model's decision. Two approaches are commonly used to define this projection space: (1) use a latent space and (2) use a feature weighting scheme.</p> <p>Consequently, we defined the general <code>Projection</code> class that will be used as a base class for all projection methods. This class allows one to use one or both of the aforementioned approaches. Indeed, one can instantiate a <code>Projection</code> object with a <code>space_projection</code> method, that define a projection from the feature space to a space of interest, and a<code>get_weights</code> method, that defines the feature weighting scheme. The <code>Projection</code> class will then project a sample with the <code>space_projection</code> method and weight the projected sample's features with the <code>get_weights</code> method.</p> <p>In addition, we provide concrete implementations of the <code>Projection</code> class: <code>LatentSpaceProjection</code>, <code>AttributionProjection</code>, and <code>HadamardProjection</code>.</p>"},{"location":"api/example_based/projections/#Projection","title":"<code>Projection</code>","text":"<p>Base class used by <code>BaseExampleMethod</code> to project samples to a meaningful space for the model to explain. </p>"},{"location":"api/example_based/projections/#__init__","title":"<code>__init__(self,  get_weights:  Union[Callable, tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None,  space_projection:  Optional[Callable] = None,  device:  Optional[str] = None,  mappable:  bool = False,  requires_targets:  bool = False)</code>","text":"<p>Parameters</p> <ul> <li> <p>get_weights            : Union[Callable, tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Either a Tensor or a Callable.</p><p> - In the case of a Tensor, weights are applied in the projected space.</p><p> - In the case of a callable, a function is expected.</p><p> It should take inputs and targets as parameters and return the weights (Tensor).</p><p> Weights should have the same shape as the input (possible difference on channels).</p><p> The inputs of <code>get_weights()</code> correspond to the projected inputs.</p><p>  Example of <code>get_weights()</code> function: <code>def get_weights_example(projected_inputs: Union(tf.Tensor, np.ndarray),                         targets: Optional[Union[tf.Tensor, np.ndarray]] = None):     '''     Example of function to get weights,     projected_inputs are the elements for which weights are computed.&lt;/p&gt;&lt;p&gt;     targets are optional additional parameters for weights computation.&lt;/p&gt;&lt;p&gt;     '''     weights = ...  # do some magic with inputs and targets, it should use the model.&lt;/p&gt;&lt;p&gt;     return weights</code></p> </li> </ul> </li> <li> <p>space_projection            : Optional[Callable] = None </p> <ul> <li><p> Callable that take samples and return a Tensor in the projected space.</p><p> An example of projected space is the latent space of a model. See <code>LatentSpaceProjection</code></p> </li> </ul> </li> <li> <p>device            : Optional[str] = None </p> <ul> <li><p> Device to use for the projection, if None, use the default device.</p> </li> </ul> </li> <li> <p>mappable            : bool = False </p> <ul> <li><p> If True, the projection can be applied to a <code>tf.data.Dataset</code> through <code>Dataset.map</code>.</p><p> Otherwise, the dataset projection will be done through a loop.</p><p> It is not the case for wrapped PyTorch models.</p><p> If you encounter errors in the <code>project_dataset</code> method, you can set it to <code>False</code>.</p> </li> </ul> </li> </ul>"},{"location":"api/example_based/projections/#project","title":"<code>project(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code>","text":"<p>Project samples in a space meaningful for the model, either by weights the inputs, projecting in a latent space or both. This function should be called at the init and for each explanation. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Additional parameter for <code>self.get_weights</code> function.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>projected_samples </p> <ul> <li><p> The samples projected in the new space.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/projections/#project_dataset","title":"<code>project_dataset(self,  cases_dataset:  tf.Dataset,  targets_dataset:  Optional[tf.Dataset] = None) -&gt; Optional[tf.Dataset]</code>","text":"<p>Apply the projection to a dataset through <code>Dataset.map</code> </p> <p>Parameters</p> <ul> <li> <p>cases_dataset            : tf.Dataset </p> <ul> <li><p> Dataset of samples to be projected.</p> </li> </ul> </li> <li> <p>targets_dataset            : Optional[tf.Dataset] = None </p> <ul> <li><p> Dataset of targets for the samples.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>projected_dataset            : Optional[tf.Dataset] </p> <ul> <li><p> The projected dataset.</p> </li> </ul> </li> </ul> <p></p> <p>Info</p> <p>The <code>__call__</code> method is an alias for the <code>project</code> method.</p>"},{"location":"api/example_based/projections/#defining-a-custom-projection","title":"Defining a custom projection","text":"<p>To define a custom projection, one needs to implement the <code>space_projection</code> and/or <code>get_weights</code> methods. The <code>space_projection</code> method should return the projected sample, and the <code>get_weights</code> method should return the weights of the features of the projected sample.</p> <p>Info</p> <p>The <code>get_weights</code> method should take as input the original sample once it has been projected using the <code>space_projection</code> method.</p> <p>For the sake of clarity, we provide an example of a custom projection that projects the samples into a latent space (the final convolution block of the ResNet50 model) and weights the features with the gradients of the model's output with respect to the inputs once they have gone through the layers until the final convolutional layer.</p> <pre><code>import tensorflow as tf\nfrom xplique.attributions import Saliency\nfrom xplique.example_based.projections import Projection\n\n# load the model\nmodel = tf.keras.applications.ResNet50(weights=\"imagenet\", include_top=True)\n\nlatent_layer = model.get_layer(\"conv5_block3_out\") # output of the final convolutional block\nfeatures_extractor = tf.keras.Model(\n    model.input, latent_layer.output, name=\"features_extractor\"\n)\n\n# reconstruct the second part of the InceptionV3 model\nsecond_input = tf.keras.Input(shape=latent_layer.output.shape[1:])\n\nx = second_input\nlayer_found = False\nfor layer in model.layers:\n    if layer_found:\n        x = layer(x)\n    if layer == latent_layer:\n        layer_found = True\n\npredictor = tf.keras.Model(\n    inputs=second_input,\n    outputs=x,\n    name=\"predictor\"\n)\n\n# build the custom projection\nspace_projection = features_extractor\nget_weights = Saliency(predictor)\n\ncustom_projection = Projection(space_projection=space_projection, get_weights=get_weights, mappable=False)\n\n# build random samples\nrdm_imgs = tf.random.normal((5, 224, 224, 3))\nrdm_targets = tf.random.uniform(shape=[5], minval=0, maxval=1000, dtype=tf.int32)\nrdm_targets = tf.one_hot(rdm_targets, depth=1000)\n\n# project the samples\nprojected_samples = custom_projection(rdm_imgs, rdm_targets)\n</code></pre>"},{"location":"api/example_based/projections/#LatentSpaceProjection","title":"<code>LatentSpaceProjection</code>","text":"<p>Projection that project inputs in the model latent space. It does not have weighting. </p>"},{"location":"api/example_based/projections/#__init__","title":"<code>__init__(self,  model:  Union[keras.src.engine.training.Model, ForwardRef('torch.nn.Module')],  latent_layer:  Union[str, int] = -1,  device:  Union[ForwardRef('torch.device'), str] = None,  mappable:  bool = True)</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : Union[keras.src.engine.training.Model, ForwardRef('torch.nn.Module')] </p> <ul> <li><p> The model from which we want to obtain explanations.</p><p> It will be splitted if a <code>latent_layer</code> is provided.</p><p> Otherwise, it should be a <code>tf.keras.Model</code>.</p><p> It is recommended to split it manually and provide the first part of the model directly.</p> </li> </ul> </li> <li> <p>latent_layer            : Union[str, int] = -1 </p> <ul> <li><p> Layer used to split the <code>model</code>.</p><p>  If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  To separate after the last convolution, <code>\"last_conv\"</code> can be used.</p><p> Otherwise, <code>-1</code> could be used for the last layer before softmax.</p> </li> </ul> </li> <li> <p>device            : Union[ForwardRef('torch.device'), str] = None </p> <ul> <li><p> Device to use for the projection, if None, use the default device.</p><p> Only used for PyTorch models. Ignored for TensorFlow models.</p> </li> </ul> </li> <li> <p>mappable            : bool = True </p> <ul> <li><p> Used only if not <code>latent_layer</code> is provided. Thus if the model is already splitted.</p><p> If the model can be placed in a <code>tf.data.Dataset</code> mapping function.</p><p> It is not the case for wrapped PyTorch models.</p><p> If you encounter errors in the <code>project_dataset</code> method, you can set it to <code>False</code>.</p> </li> </ul> </li> </ul>"},{"location":"api/example_based/projections/#project","title":"<code>project(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code>","text":"<p>Project samples in a space meaningful for the model, either by weights the inputs, projecting in a latent space or both. This function should be called at the init and for each explanation. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Additional parameter for <code>self.get_weights</code> function.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>projected_samples </p> <ul> <li><p> The samples projected in the new space.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/projections/#project_dataset","title":"<code>project_dataset(self,  cases_dataset:  tf.Dataset,  targets_dataset:  Optional[tf.Dataset] = None) -&gt; Optional[tf.Dataset]</code>","text":"<p>Apply the projection to a dataset through <code>Dataset.map</code> </p> <p>Parameters</p> <ul> <li> <p>cases_dataset            : tf.Dataset </p> <ul> <li><p> Dataset of samples to be projected.</p> </li> </ul> </li> <li> <p>targets_dataset            : Optional[tf.Dataset] = None </p> <ul> <li><p> Dataset of targets for the samples.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>projected_dataset            : Optional[tf.Dataset] </p> <ul> <li><p> The projected dataset.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/projections/#AttributionProjection","title":"<code>AttributionProjection</code>","text":"<p>Projection build on an attribution function to provide local projections. This class is used as the projection of the <code>Cole</code> similar examples method. </p>"},{"location":"api/example_based/projections/#__init__","title":"<code>__init__(self,  model:  Union[keras.src.engine.training.Model, ForwardRef('torch.nn.Module')],  attribution_method:  xplique.attributions.base.BlackBoxExplainer = ,  latent_layer:  Union[str, int, None] = None,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 **attribution_kwargs) <p>Parameters</p> <ul> <li> <p>model            : Union[keras.src.engine.training.Model, ForwardRef('torch.nn.Module')] </p> <ul> <li><p> The model from which we want to obtain explanations.</p> </li> </ul> </li> <li> <p>latent_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer used to split the model, the first part will be used for projection and the second to compute the attributions. By default, the model is not split.</p><p> For such split, the <code>model</code> should be a <code>tf.keras.Model</code>.</p><p>  If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  The method as described in the paper apply the separation on the last convolutional layer.</p><p> To do so, the <code>\"last_conv\"</code> parameter will extract it.</p><p> Otherwise, <code>-1</code> could be used for the last layer before softmax.</p> </li> </ul> </li> <li> <p>attribution_method            : xplique.attributions.base.BlackBoxExplainer =   <ul> <li><p> Class of the attribution method to use for projection.</p><p> It should inherit from <code>xplique.attributions.base.BlackBoxExplainer</code>.</p><p> Ignored if a projection is given.</p> </li> </ul>  <li> <p>attribution_kwargs            : **attribution_kwargs </p> <ul> <li><p> Parameters to be passed at the construction of the <code>attribution_method</code>.</p> </li> </ul> </li>","text":""},{"location":"api/example_based/projections/#project","title":"<code>project(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code> <p>Project samples in a space meaningful for the model, either by weights the inputs, projecting in a latent space or both. This function should be called at the init and for each explanation. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Additional parameter for <code>self.get_weights</code> function.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>projected_samples </p> <ul> <li><p> The samples projected in the new space.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/projections/#project_dataset","title":"<code>project_dataset(self,  cases_dataset:  tf.Dataset,  targets_dataset:  Optional[tf.Dataset] = None) -&gt; Optional[tf.Dataset]</code> <p>Apply the projection to a dataset through <code>Dataset.map</code> </p> <p>Parameters</p> <ul> <li> <p>cases_dataset            : tf.Dataset </p> <ul> <li><p> Dataset of samples to be projected.</p> </li> </ul> </li> <li> <p>targets_dataset            : Optional[tf.Dataset] = None </p> <ul> <li><p> Dataset of targets for the samples.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>projected_dataset            : Optional[tf.Dataset] </p> <ul> <li><p> The projected dataset.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/projections/#HadamardProjection","title":"<code>HadamardProjection</code>","text":"<p>Projection build on an the latent space and the gradient. This class is used as the projection of the <code>Cole</code> similar examples method. </p>"},{"location":"api/example_based/projections/#__init__","title":"<code>__init__(self,  model:  Union[keras.src.engine.training.Model, ForwardRef('torch.nn.Module'), None] = None,  latent_layer:  Union[str, int, None] = None,  operator:  Optional[Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float]] = None,  device:  Union[ForwardRef('torch.device'), str] = None,  features_extractor:  Optional[keras.src.engine.training.Model] = None,  predictor:  Optional[keras.src.engine.training.Model] = None,  mappable:  bool = True)</code> <p>Parameters</p> <ul> <li> <p>model            : Union[keras.src.engine.training.Model, ForwardRef('torch.nn.Module'), None] = None </p> <ul> <li><p> The model from which we want to obtain explanations.</p><p> It can be splitted manually outside of the projection and provided as two models: the <code>feature_extractor</code> and the <code>predictor</code>. In this case, <code>model</code> should be <code>None</code>.</p><p> It is recommended to split it manually.</p> </li> </ul> </li> <li> <p>latent_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer used to split the model, the first part will be used for projection and the second to compute the attributions. By default, the model is not split.</p><p> For such split, the <code>model</code> should be a <code>tf.keras.Model</code>.</p><p> Ignored if <code>model</code> is <code>None</code>, hence if a splitted model is provided through: the <code>feature_extractor</code> and the <code>predictor</code>.</p><p>  If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  The method as described in the paper apply the separation on the last convolutional layer.</p><p> To do so, the <code>\"last_conv\"</code> parameter will extract it.</p><p> Otherwise, <code>-1</code> could be used for the last layer before softmax.</p> </li> </ul> </li> <li> <p>operator            : Optional[Callable[[keras.src.engine.training.Model, tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor], float]] = None </p> <ul> <li><p> Operator to use to compute the explanation, if None use standard predictions.</p><p> The default operator is the classification operator with online targets computations.</p><p> For more information, refer to the Attribution documentation.</p> </li> </ul> </li> <li> <p>device            : Union[ForwardRef('torch.device'), str] = None </p> <ul> <li><p> Device to use for the projection, if None, use the default device.</p><p> Only used for PyTorch models. Ignored for TensorFlow models.</p> </li> </ul> </li> <li> <p>features_extractor            : Optional[keras.src.engine.training.Model] = None </p> <ul> <li><p> The feature extraction part of the model. Mapping inputs to the latent space.</p><p> Used to provided the first part of a splitted model.</p><p> It cannot be provided if a <code>model</code> is provided. It should be provided with a <code>predictor</code>.</p> </li> </ul> </li> <li> <p>predictor            : Optional[keras.src.engine.training.Model] = None </p> <ul> <li><p> The prediction part of the model. Mapping the latent space to the outputs.</p><p> Used to provided the second part of a splitted model.</p><p> It cannot be provided if a <code>model</code> is provided.</p><p> It should be provided with a <code>features_extractor</code>.</p> </li> </ul> </li> <li> <p>mappable            : bool = True </p> <ul> <li><p> If the model parts can be placed in a <code>tf.data.Dataset</code> mapping function.</p><p> It is not the case for wrapped PyTorch models.</p><p> If you encounter errors in the <code>project_dataset</code> method, you can set it to <code>False</code>.</p><p> Used only for a splitted model. Thgus if <code>model</code> is <code>None</code>.</p> </li> </ul> </li> </ul>","text":""},{"location":"api/example_based/projections/#project","title":"<code>project(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code> <p>Project samples in a space meaningful for the model, either by weights the inputs, projecting in a latent space or both. This function should be called at the init and for each explanation. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Additional parameter for <code>self.get_weights</code> function.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>projected_samples </p> <ul> <li><p> The samples projected in the new space.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/projections/#project_dataset","title":"<code>project_dataset(self,  cases_dataset:  tf.Dataset,  targets_dataset:  Optional[tf.Dataset] = None) -&gt; Optional[tf.Dataset]</code> <p>Apply the projection to a dataset through <code>Dataset.map</code> </p> <p>Parameters</p> <ul> <li> <p>cases_dataset            : tf.Dataset </p> <ul> <li><p> Dataset of samples to be projected.</p> </li> </ul> </li> <li> <p>targets_dataset            : Optional[tf.Dataset] = None </p> <ul> <li><p> Dataset of targets for the samples.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>projected_dataset            : Optional[tf.Dataset] </p> <ul> <li><p> The projected dataset.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/counterfactuals/label_aware_counter_factuals/","title":"Label Aware Counterfactuals","text":"<p> View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>Note</p> <p>The paper referenced here is not exactly the one we implemented. However, it is probably the closest in essence of what we implemented.</p> <p>In contrast to the Naive Counterfactuals approach, the Label Aware CounterFactuals leverage an a priori knowledge of the Counterfactuals' (CFs) targets to guide the search for the CFs (e.g. one is looking for a CF of the digit 8 in MNIST dataset within the digit 0 instances).</p> <p>Warning</p> <p>Consequently, for this class, when a user call the <code>explain</code> method, the user is expected to provide both the <code>targets</code> corresponding to the input samples and <code>cf_expected_classes</code> a one-hot encoding of the label expected for the CFs. But in most cases, the <code>targets</code> can be set to <code>None</code> as they are computed internally by projections.</p> <p>Info</p> <p>One can use the <code>Projection</code> object to compute the distances between the samples (e.g. search for the CF in the latent space of a model).</p>"},{"location":"api/example_based/counterfactuals/label_aware_counter_factuals/#example","title":"Example","text":"<pre><code>from xplique.example_based import LabelAwareCounterFactuals\nfrom xplique.example_based.projections import LatentSpaceProjection\n\n# load the training dataset and the model\ncases_dataset = ... # load the training dataset\ntargets_dataset = ... # load the one-hot encoding of predicted labels of the training dataset\nmodel = ...\n\n# load the test samples\ntest_samples = ... # load the test samples to search for\ntest_cf_expacted_classes = ... # WARNING: provide the one-hot encoding of the expected label of the CFs\n\n# parameters\nk = 5  # number of example for each input\ncase_returns = \"all\"  # elements returned by the explain function\ndistance = \"euclidean\"\nlatent_layer = \"last_conv\"  # where to split your model for the projection\n\n# construct a projection with your model\nprojection = LatentSpaceProjection(model, latent_layer=latent_layer)\n\n# instantiate the LabelAwareCounterfactuals object\nlacf = LabelAwareCounterFactuals(\n    cases_dataset=cases_dataset,\n    targets_dataset=targets_dataset,\n    k=k,\n    projection=projection,\n    case_returns=case_returns,\n    distance=distance,\n)\n\n# search the CFs for the test samples\noutput_dict = lacf.explain(\n    inputs=test_samples,\n    targets=None,  # not necessary for this projection\n    cf_expected_classes=test_cf_expacted_classes,\n)\n</code></pre>"},{"location":"api/example_based/counterfactuals/label_aware_counter_factuals/#notebooks","title":"Notebooks","text":"<ul> <li>Example-based Methods: Getting started</li> </ul>"},{"location":"api/example_based/counterfactuals/label_aware_counter_factuals/#LabelAwareCounterFactuals","title":"<code>LabelAwareCounterFactuals</code>","text":"<p>This method will search the counterfactuals of a query within an expected class. This class should be provided with the query when calling the explain method. </p>"},{"location":"api/example_based/counterfactuals/label_aware_counter_factuals/#__init__","title":"<code>__init__(self,  cases_dataset:  ~DatasetOrTensor,  targets_dataset:  ~DatasetOrTensor,  labels_dataset:  Optional[~DatasetOrTensor] = None,  k:  int = 1,  projection:  Union[xplique.example_based.projections.base.Projection, Callable] = None,  case_returns:  Union[List[str], str] = 'examples',  batch_size:  Optional[int] = None,  distance:  Union[int, str, Callable] = 'euclidean')</code>","text":"<p>Parameters</p> <ul> <li> <p>cases_dataset            : ~DatasetOrTensor </p> <ul> <li><p> The dataset used to train the model, examples are extracted from this dataset.</p><p> All datasets (cases, labels, and targets) should be of the same type.</p><p> Supported types are: <code>tf.data.Dataset</code>, <code>torch.utils.data.DataLoader</code>, <code>tf.Tensor</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>.</p><p> For datasets with multiple columns, the first column is assumed to be the cases.</p><p> While the second column is assumed to be the labels, and the third the targets.</p><p> Warning: datasets tend to reshuffle at each iteration, ensure the datasets are not reshuffle as we use index in the dataset.</p> </li> </ul> </li> <li> <p>targets_dataset            : ~DatasetOrTensor </p> <ul> <li><p> Targets associated with the <code>cases_dataset</code> for dataset projection, oftentimes the one-hot encoding of a model's predictions. See <code>projection</code> for detail.</p><p> They are also used to know the prediction of the model on the dataset.</p><p> It should have the same type as <code>cases_dataset</code>.</p> </li> </ul> </li> <li> <p>labels_dataset            : Optional[~DatasetOrTensor] = None </p> <ul> <li><p> Labels associated with the examples in the <code>cases_dataset</code>.</p><p> It should have the same type as <code>cases_dataset</code>.</p> </li> </ul> </li> <li> <p>k            : int = 1 </p> <ul> <li><p> The number of examples to retrieve per input.</p> </li> </ul> </li> <li> <p>projection            : Union[xplique.example_based.projections.base.Projection, Callable] = None </p> <ul> <li><p> Projection or Callable that project samples from the input space to the search space.</p><p> The search space should be a space where distances are relevant for the model.</p><p> It should not be <code>None</code>, otherwise, the model is not involved thus not explained.</p><p>  Example of Callable: <code>def custom_projection(inputs: tf.Tensor, np.ndarray):     '''     Example of projection,     inputs are the elements to project.&lt;/p&gt;&lt;p&gt;     '''     projected_inputs = # do some magic on inputs, it should use the model.&lt;/p&gt;&lt;p&gt;     return projected_inputs</code></p> </li> </ul> </li> <li> <p>case_returns            : Union[List[str], str] = 'examples' </p> <ul> <li><p> String or list of string with the elements to return in <code>self.explain()</code>.</p><p> See the base class returns property for more details.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = None </p> <ul> <li><p> Number of samples treated simultaneously for projection and search.</p><p> Ignored if <code>cases_dataset</code> is a batched <code>tf.data.Dataset</code> or a batched <code>torch.utils.data.DataLoader</code> is provided.</p> </li> </ul> </li> <li> <p>distance            : Union[int, str, Callable] = 'euclidean' </p> <ul> <li><p> Distance for the FilterKNN search method.</p><p> Distance function for examples search. It can be an integer, a string in {\"manhattan\", \"euclidean\", \"cosine\", \"chebyshev\", \"inf\"}, or a Callable, by default \"euclidean\".</p> </li> </ul> </li> </ul>"},{"location":"api/example_based/counterfactuals/label_aware_counter_factuals/#explain","title":"<code>explain(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None,  cf_expected_classes:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] = None)</code>","text":"<p>Return the relevant CF examples to explain the inputs. The CF examples are searched within cases for which the target is the one provided in <code>cf_targets</code>. It projects inputs with <code>self.projection</code> in the search space and find examples with the <code>self.search_method</code>. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Tensor or Array. One-hot encoded labels or regression target (e.g {+1, -1}), one for each sample. If not provided, the model's predictions are used.</p><p> Targets associated to the <code>inputs</code> for projection.  Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes.</p><p> It is used in the <code>projection</code>. But <code>projection</code> can compute it internally.</p> </li> </ul> </li> <li> <p>cf_expected_classes            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] = None </p> <ul> <li><p> Tensor or Array. One-hot encoding of the target class for the counterfactuals.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/counterfactuals/label_aware_counter_factuals/#filter_fn","title":"<code>filter_fn(self,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 __,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 cf_expected_classes,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 cases_targets) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Filter function to mask the cases for which the target is different from the target(s) expected for the counterfactuals. </p> <p>Parameters</p> <ul> <li> <p>cf_expected_classes            : cf_expected_classes </p> <ul> <li><p> The one-hot encoding of the target class for the counterfactuals.</p> </li> </ul> </li> <li> <p>cases_targets            : cases_targets </p> <ul> <li><p> The one-hot encoding of the target class for the cases.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/counterfactuals/naive_counter_factuals/","title":"Naive CounterFactuals","text":"<p> View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>Note</p> <p>The paper referenced here is not exactly the one we implemented as we use a \"naive\" version of it. However, it is probably the closest in essence of what we implemented.</p> <p>We define here a \"naive\" counterfactual method that is based on the Nearest Unlike Neighbor (NUN) concept introduced by Dasarathy in 1991[^1]. In essence, the NUN of a sample \\((x, y)\\) is the closest sample in the training dataset which has a different label than \\(y\\).</p> <p>Thus, in this naive approach to counterfactuals, we yield the \\(k\\) nearest training instances that have a different label than the target of the input sample in a greedy fashion. </p> <p>As it is mentioned in the API documentation, by setting a <code>Projection</code> object, one will map the inputs to a space where the distance function is meaningful.</p>"},{"location":"api/example_based/counterfactuals/naive_counter_factuals/#example","title":"Example","text":"<pre><code>from xplique.example_based import NaiveCounterFactuals\nfrom xplique.example_based.projections import LatentSpaceProjection\n\n# load the training dataset and the model\ncases_dataset = ... # load the training dataset\ntargets_dataset = ... # load the one-hot encoding of predicted labels of the training dataset\nmodel = ...\n\n# load the test samples\ntest_samples = ... # load the test samples to search for\ntest_targets = ... # compute a one hot encoding of the model's prediction on the samples\n\n# parameters\nk = 5  # number of example for each input\ncase_returns = \"all\"  # elements returned by the explain function\ndistance = \"euclidean\"\nlatent_layer = \"last_conv\"  # where to split your model for the projection\n\n# construct a projection with your model\nprojection = LatentSpaceProjection(model, latent_layer=latent_layer)\n\n# instantiate the NaiveCounterFactuals object\nncf = NaiveCounterFactuals(\n    cases_dataset=cases_dataset,\n    targets_dataset=targets_dataset,\n    k=k,\n    projection=projection,\n    case_returns=case_returns,\n    distance=distance,\n)\n\n# search the CFs for the test samples\noutput_dict = ncf.explain(\n    inputs=test_samples,\n    targets=test_targets,\n)\n</code></pre>"},{"location":"api/example_based/counterfactuals/naive_counter_factuals/#notebooks","title":"Notebooks","text":"<ul> <li>Example-based Methods: Getting started</li> </ul>"},{"location":"api/example_based/counterfactuals/naive_counter_factuals/#NaiveCounterFactuals","title":"<code>NaiveCounterFactuals</code>","text":"<p>This class allows to search for counterfactuals by searching for the closest sample to a query in a projection space that do not have the same model's prediction.  It is a naive approach as it follows a greedy approach. </p>"},{"location":"api/example_based/counterfactuals/naive_counter_factuals/#__init__","title":"<code>__init__(self,  cases_dataset:  ~DatasetOrTensor,  targets_dataset:  ~DatasetOrTensor,  labels_dataset:  Optional[~DatasetOrTensor] = None,  k:  int = 1,  projection:  Union[xplique.example_based.projections.base.Projection, Callable] = None,  case_returns:  Union[List[str], str] = 'examples',  batch_size:  Optional[int] = None,  distance:  Union[int, str, Callable] = 'euclidean')</code>","text":"<p>Parameters</p> <ul> <li> <p>cases_dataset            : ~DatasetOrTensor </p> <ul> <li><p> The dataset used to train the model, examples are extracted from this dataset.</p><p> All datasets (cases, labels, and targets) should be of the same type.</p><p> Supported types are: <code>tf.data.Dataset</code>, <code>torch.utils.data.DataLoader</code>, <code>tf.Tensor</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>.</p><p> For datasets with multiple columns, the first column is assumed to be the cases.</p><p> While the second column is assumed to be the labels, and the third the targets.</p><p> Warning: datasets tend to reshuffle at each iteration, ensure the datasets are not reshuffle as we use index in the dataset.</p> </li> </ul> </li> <li> <p>targets_dataset            : ~DatasetOrTensor </p> <ul> <li><p> Targets associated with the <code>cases_dataset</code> for dataset projection, oftentimes the one-hot encoding of a model's predictions. See <code>projection</code> for detail.</p><p> They are also used to know the prediction of the model on the dataset.</p><p> It should have the same type as <code>cases_dataset</code>.</p> </li> </ul> </li> <li> <p>labels_dataset            : Optional[~DatasetOrTensor] = None </p> <ul> <li><p> Labels associated with the examples in the <code>cases_dataset</code>.</p><p> It should have the same type as <code>cases_dataset</code>.</p> </li> </ul> </li> <li> <p>k            : int = 1 </p> <ul> <li><p> The number of examples to retrieve per input.</p> </li> </ul> </li> <li> <p>projection            : Union[xplique.example_based.projections.base.Projection, Callable] = None </p> <ul> <li><p> Projection or Callable that project samples from the input space to the search space.</p><p> The search space should be a space where distances are relevant for the model.</p><p> It should not be <code>None</code>, otherwise, the model is not involved thus not explained.   Example of Callable: <code>def custom_projection(inputs: tf.Tensor, np.ndarray, targets: tf.Tensor, np.ndarray = None):     '''     Example of projection,     inputs are the elements to project.&lt;/p&gt;&lt;p&gt;     targets are optional parameters to orientated the projection.&lt;/p&gt;&lt;p&gt;     '''     projected_inputs = # do some magic on inputs, it should use the model.&lt;/p&gt;&lt;p&gt;     return projected_inputs</code></p> </li> </ul> </li> <li> <p>case_returns            : Union[List[str], str] = 'examples' </p> <ul> <li><p> String or list of string with the elements to return in <code>self.explain()</code>.</p><p> See the base class returns property for more details.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = None </p> <ul> <li><p> Number of samples treated simultaneously for projection and search.</p><p> Ignored if <code>cases_dataset</code> is a batched <code>tf.data.Dataset</code> or a batched <code>torch.utils.data.DataLoader</code> is provided.</p> </li> </ul> </li> <li> <p>distance            : Union[int, str, Callable] = 'euclidean' </p> <ul> <li><p> Distance function for examples search. It can be an integer, a string in {\"manhattan\", \"euclidean\", \"cosine\", \"chebyshev\", \"inf\"}, or a Callable, by default \"euclidean\".</p> </li> </ul> </li> </ul>"},{"location":"api/example_based/counterfactuals/naive_counter_factuals/#explain","title":"<code>explain(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code>","text":"<p>Return the relevant examples to explain the (inputs, targets). It projects inputs with <code>self.projection</code> in the search space and find examples with the <code>self.search_method</code>. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Targets associated to the <code>inputs</code> for projection.</p><p> Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes.</p><p> It is used in the <code>projection</code>. But <code>projection</code> can compute it internally.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/counterfactuals/naive_counter_factuals/#filter_fn","title":"<code>filter_fn(self,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 _,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 __,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 targets,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 cases_targets) -&gt; tensorflow.python.framework.tensor.Tensor</code>","text":"<p>Filter function to mask the cases for which the model's prediction is different from the model's prediction on the inputs. </p> <p></p> <p>[^1] Nearest unlike neighbor (NUN): an aid to decision making</p>"},{"location":"api/example_based/prototypes/api_prototypes/","title":"Prototypes","text":"<p>A prototype in AI explainability is a representative example from the data that shows how the model makes decisions (Poch\u00e9 et al., 2023). It helps explain a prediction by pointing to a similar example the model learned from, making the decision more understandable. Imagine you're training a model to recognize dogs. After the model learns, you can ask it to show a \"prototype\" for the dog category, which would be an actual image from the training set that best represents what a typical dog looks like.</p> <p>Info</p> <p>Using the identity projection, one is looking for the dataset prototypes. In contrast, using the latent space of a model as a projection, one is looking for prototypes relevant for the model.</p>"},{"location":"api/example_based/prototypes/api_prototypes/#common-api","title":"Common API","text":"<pre><code># only for model explanations, define a projection based on the model\nprojection = ProjectionMethod(model)\n\n# construct the explainer (it computes the global prototypes)\nexplainer = PrototypesMethod(\n    cases_dataset=cases_dataset, \n    nb_global_prototypes=nb_global_prototypes,\n    nb_local_prototypes=nb_local_prototypes,\n    projection=projection,\n    case_returns=case_returns,\n    distance=distance,\n)\n\n# compute global explanation\nglobal_prototypes_dict = explainer.get_global_prototypes()\n\n# compute local explanation\nlocal_prototypes_dict = explainer(inputs)\n</code></pre> Table of methods available <p>The following prototypes methods are implemented:</p> Method Name and Documentation link Tutorial Available with TF Available with PyTorch* ProtoGreedy \u2714 \u2714 ProtoDash \u2714 \u2714 MMDCritic \u2714 \u2714 <p>Info</p> <p>Prototypes, share a common API with other example-based methods. Thus, to understand some parameters, we recommend reading the dedicated documentation.</p>"},{"location":"api/example_based/prototypes/api_prototypes/#specificity-of-prototypes","title":"Specificity of prototypes","text":"<p>The search method class related to a <code>Prototypes</code> class includes the following additional parameters:  </p> <ul> <li><code>nb_global_prototypes</code> which represents the total number of prototypes desired to represent the entire dataset. </li> <li> <p><code>nb_local_prototypes</code> which represents the number of prototypes closest to the input and allows for a local explanation. This attribute is equivalent to \\(k\\) in the other exemple based methods.</p> </li> <li> <p><code>kernel_fn</code>, and <code>gamma</code> which are related to the kernel used to compute the MMD distance.</p> </li> </ul> <p>The prototype class has a <code>get_global_prototypes()</code> method, which calculates all the prototypes in the base dataset; these are called the global prototypes. The <code>explain</code> method then provides a local explanation, i.e., finds the prototypes closest to the input given as a parameter.</p>"},{"location":"api/example_based/prototypes/api_prototypes/#implemented-methods","title":"Implemented methods","text":"<p>The library implements three methods, <code>MMDCritic</code>, <code>ProtoGreedy</code> and <code>ProtoDash</code> from Data summarization with knapsack constraint (Lin et al., 2011). This class of prototype methods involves finding a subset of prototypes \\(\\mathcal{P}\\) that maximizes the coverage set function \\(F(\\mathcal{P})\\) under the constraint that its selection cost \\(C(\\mathcal{P})\\) (e.g., the number of selected prototypes \\(|\\mathcal{P}|= nb\\_global\\_prototypes\\)) should be less than a given budget.  Submodularity and monotonicity of \\(F(\\mathcal{P})\\) are necessary to guarantee that a greedy algorithm has a constant factor guarantee of optimality (Lin et al., 2011).</p>"},{"location":"api/example_based/prototypes/api_prototypes/#method-comparison","title":"Method comparison","text":"<ul> <li>Compared to <code>MMDCritic</code>, both <code>ProtoGreedy</code> and <code>Protodash</code> additionally determine the weights for each of the selected prototypes. </li> <li><code>ProtoGreedy</code> and <code>Protodash</code> works for any symmetric positive definite kernel which is not the case for <code>MMDCritic</code>. </li> <li><code>MMDCritic</code> and <code>ProtoGreedy</code> select the next element that maximizes the increment of the scoring function while <code>Protodash</code> maximizes a tight lower bound on the increment of the scoring function (it maximizes the gradient of \\(F(\\mathcal{P},w)\\)).</li> <li><code>ProtoDash</code> is much faster than <code>ProtoGreedy</code> without compromising on the quality of the solution. The complexity of <code>ProtoGreedy</code> is \\(O(n(n+m^4))\\) comparing to \\(O(n(n+m^2)+m^4)\\) for <code>ProtoDash</code>. </li> <li>The approximation guarantee for <code>ProtoGreedy</code> is \\((1-e^{-\\gamma})\\), where \\(\\gamma\\) is submodularity ratio of \\(F(\\mathcal{P})\\), comparing to \\((1-e^{-1})\\) for <code>MMDCritic</code>.</li> </ul>"},{"location":"api/example_based/prototypes/api_prototypes/#what-is-mmd","title":"What is MMD?","text":"<p>The commonality among these three methods is their utilization of the Maximum Mean Discrepancy (MMD) statistic as a measure of similarity between points and potential prototypes. MMD is a statistic for comparing two distributions (similar to KL-divergence). However, it is a non-parametric statistic, i.e., it does not assume a specific parametric form for the probability distributions being compared. It is defined as follows:</p> \\[ \\begin{align*} \\text{MMD}(P, Q) &amp;= \\left\\| \\mathbb{E}_{X \\sim P}[\\varphi(X)] - \\mathbb{E}_{Y \\sim Q}[\\varphi(Y)] \\right\\|_\\mathcal{H} \\end{align*} \\] <p>where \\(\\varphi(\\cdot)\\) is a mapping function of the data points. If we want to consider all orders of moments of the distributions, the mapping vectors \\(\\varphi(X)\\) and \\(\\varphi(Y)\\) will be infinite-dimensional. Thus, we cannot calculate them directly. However, if we have a kernel that gives the same result as the inner product of these two mappings in Hilbert space (\\(k(x, y) = \\langle \\varphi(x), \\varphi(y) \\rangle_\\mathcal{H}\\)), then the \\(MMD^2\\) can be computed using only the kernel and without explicitly using \\(\\varphi(X)\\) and \\(\\varphi(Y)\\) (this is called the kernel trick):</p> \\[ \\begin{align*} \\text{MMD}^2(P, Q) &amp;= \\langle \\mathbb{E}_{X \\sim P}[\\varphi(X)], \\mathbb{E}_{X' \\sim P}[\\varphi(X')] \\rangle_\\mathcal{H} + \\langle \\mathbb{E}_{Y \\sim Q}[\\varphi(Y)], \\mathbb{E}_{Y' \\sim Q}[\\varphi(Y')] \\rangle_\\mathcal{H} \\\\ &amp;\\quad - 2\\langle \\mathbb{E}_{X \\sim P}[\\varphi(X)], \\mathbb{E}_{Y \\sim Q}[\\varphi(Y)] \\rangle_\\mathcal{H} \\\\ &amp;= \\mathbb{E}_{X, X' \\sim P}[k(X, X')] + \\mathbb{E}_{Y, Y' \\sim Q}[k(Y, Y')] - 2\\mathbb{E}_{X \\sim P, Y \\sim Q}[k(X, Y)] \\end{align*} \\]"},{"location":"api/example_based/prototypes/api_prototypes/#how-to-choose-the-kernel","title":"How to choose the kernel ?","text":"<p>The choice of the kernel for selecting prototypes depends on the specific problem and the characteristics of your data. Several kernels can be used, including:</p> <ul> <li>Gaussian</li> <li>Laplace</li> <li>Polynomial</li> <li>Linear...</li> </ul> <p>If we consider any exponential kernel (Gaussian kernel, Laplace, ...), we automatically consider all the moments for the distribution, as the Taylor expansion of the exponential considers infinite-order moments. It is better to use a non-linear kernel to capture non-linear relationships in your data. If the problem is linear, it is better to choose a linear kernel such as the dot product kernel, since it is computationally efficient and often requires fewer hyperparameters to tune.</p> <p>Warning</p> <p>For <code>MMDCritic</code>, the kernel must satisfy a condition ensuring the submodularity of the set function (the Gaussian kernel respects this constraint). In contrast, for <code>ProtoDash</code> and <code>ProtoGreedy</code>, any kernel can be used, as these methods rely on weak submodularity instead of full submodularity.</p> <p>Info</p> <p>The default kernel used is Gaussian kernel. This kernel distance assigns higher similarity to points that are close in feature space and gradually decreases similarity as points move further apart. It is a good choice when your data has complexity. However, it can be sensitive to the choice of hyperparameters, such as the width \\(\\sigma\\) of the Gaussian kernel, which may need to be carefully fine-tuned.</p>"},{"location":"api/example_based/prototypes/mmd_critic/","title":"MMDCritic","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p><code>MMDCritic</code> finds prototypes and criticisms by maximizing two separate objectives based on the Maximum Mean Discrepancy (MMD).</p> <p>Quote</p> <p>MMD-critic uses the MMD statistic as a measure of similarity between points and potential prototypes, and efficiently selects prototypes that maximize the statistic. In addition to prototypes, MMD-critic selects criticism samples i.e. samples that are not well-explained by the prototypes using a regularized witness function score.</p> <p>-- Efficient Data Representation by Selecting Prototypes with Importance Weights (2019).</p> <p>First, to find prototypes \\(\\mathcal{P}\\), a greedy algorithm is used to maximize \\(F(\\mathcal{P})\\) s.t. \\(|\\mathcal{P}| \\le m_p\\) where \\(F(\\mathcal{P})\\) is defined as: \\begin{equation}     F(\\mathcal{P})=\\frac{2}{|\\mathcal{P}|\\cdot n}\\sum_{i,j=1}^{|\\mathcal{P}|,n}\\kappa(p_i,x_j)-\\frac{1}{|\\mathcal{P}|^2}\\sum_{i,j=1}^{|\\mathcal{P}|}\\kappa(p_i,p_j), \\end{equation} where \\(m_p\\) the number of prototypes to be found. They used diagonal dominance conditions on the kernel to ensure monotonocity and submodularity of \\(F(\\mathcal{P})\\). </p> <p>Second, to find criticisms \\(\\mathcal{C}\\), the same greedy algorithm is used to select points that maximize another objective function \\(J(\\mathcal{C})\\). </p> <p>Warning</p> <p>For <code>MMDCritic</code>, the kernel must satisfy a condition that ensures the submodularity of the set function. The Gaussian kernel meets this requirement and it is recommended. If you wish to choose a different kernel, it must satisfy the condition described by Kim et al., 2016.</p>"},{"location":"api/example_based/prototypes/mmd_critic/#example","title":"Example","text":"<pre><code>from xplique.example_based import MMDCritic\nfrom xplique.example_based.projections import LatentSpaceProjection\n\n# load the training dataset and the model\ncases_dataset = ... # load the training dataset\nmodel = ...\n\n# load the test samples\ntest_samples = ... # load the test samples to search for\n\n# parameters\ncase_returns = \"all\"  # elements returned by the explain function\nlatent_layer = \"last_conv\"  # where to split your model for the projection\nnb_global_prototypes = 5\nnb_local_prototypes = 1\nkernel_fn = None  # the default rbf kernel will be used, the distance will be based on this\n\n# construct a projection with your model\nprojection = LatentSpaceProjection(model, latent_layer=latent_layer)\n\nmmd = MMDCritic(\n    cases_dataset=cases_dataset,\n    nb_global_prototypes=nb_global_prototypes,\n    nb_local_prototypes=nb_local_prototypes,\n    projection=projection,\n    case_returns=case_returns,\n)\n\n# compute global explanation\nglobal_prototypes = mmd.get_global_prototypes()\n\n# compute local explanation\nlocal_prototypes = mmd.explain(test_samples)\n</code></pre>"},{"location":"api/example_based/prototypes/mmd_critic/#notebooks","title":"Notebooks","text":"<ul> <li>Example-based: Prototypes</li> </ul>"},{"location":"api/example_based/prototypes/mmd_critic/#MMDCritic","title":"<code>MMDCritic</code>","text":""},{"location":"api/example_based/prototypes/mmd_critic/#__init__","title":"<code>__init__(self,  cases_dataset:  ~DatasetOrTensor,  labels_dataset:  Optional[~DatasetOrTensor] = None,  targets_dataset:  Optional[~DatasetOrTensor] = None,  nb_global_prototypes:  int = 1,  nb_local_prototypes:  int = 1,  projection:  Union[xplique.example_based.projections.base.Projection, Callable] = None,  case_returns:  Union[List[str], str] = 'examples',  batch_size:  Optional[int] = None,  distance:  Union[int, str, Callable, None] = None,  kernel_fn:   = None,  gamma:  float = None)","text":""},{"location":"api/example_based/prototypes/mmd_critic/#explain","title":"<code>explain(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code> <p>Return the relevant examples to explain the (inputs, targets). It projects inputs with <code>self.projection</code> in the search space and find examples with the <code>self.search_method</code>. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Targets associated to the <code>inputs</code> for projection.</p><p> Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes.</p><p> It is used in the <code>projection</code>. But <code>projection</code> can compute it internally.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/prototypes/mmd_critic/#format_search_output","title":"<code>format_search_output(self,  search_output:  Dict[str, tensorflow.python.framework.tensor.Tensor],  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray])</code> <p>Format the output of the <code>search_method</code> to match the expected returns in <code>self.returns</code>. </p> <p>Parameters</p> <ul> <li> <p>search_output            : Dict[str, tensorflow.python.framework.tensor.Tensor] </p> <ul> <li><p> Dictionary with the required outputs from the <code>search_method</code>.</p> </li> </ul> </li> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/prototypes/mmd_critic/#get_global_prototypes","title":"<code>get_global_prototypes(self) -&gt; Dict[str, tensorflow.python.framework.tensor.Tensor]</code> <p>Provide the global prototypes computed at the initialization. Prototypes and their labels are extracted from the indices. The weights of the prototypes and their indices are also returned.  </p> <p>Return</p> <ul> <li> <p>prototypes_dict            : Dict[str, tf.Tensor] </p> <ul> <li><p> A dictionary with the following - 'prototypes': The prototypes found by the method.</p><p> - 'prototype_labels': The labels of the prototypes.</p><p> - 'prototype_weights': The weights of the prototypes.</p><p> - 'prototype_indices': The indices of the prototypes.</p> </li> </ul> </li> </ul> <p></p>   <ol> <li> <p>Visual Explanations from Deep Networks via Gradient-based Localization (2016). \u21a9</p> </li> </ol>","text":""},{"location":"api/example_based/prototypes/proto_dash/","title":"ProtoDash","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p><code>ProtoDash</code> associated non-negative weights to prototypes which are indicative of their importance. This approach allows for identifying both prototypes and criticisms (the least weighted examples among prototypes) by maximmizing the same weighted objective function.</p> <p>Quote</p> <p>Our work notably generalizes the recent work by Kim et al. (2016) where in addition to selecting prototypes, we also associate non-negative weights which are indicative of their importance. This extension provides a single coherent framework under which both prototypes and criticisms (i.e. outliers) can be found. Furthermore, our framework works for any symmetric positive definite kernel thus addressing one of the key open questions laid out in Kim et al. (2016).</p> <p>-- Efficient Data Representation by Selecting Prototypes with Importance Weights (2019).</p> <p>More precisely, the weighted objective \\(F(\\mathcal{P},w)\\) is defined as: \\begin{equation}  F(\\mathcal{P},w)=\\frac{2}{n}\\sum_{i,j=1}^{|\\mathcal{P}|,n}w_i\\kappa(p_i,x_j)-\\sum_{i,j=1}^{|\\mathcal{P}|}w_iw_j\\kappa(p_i,p_j), \\end{equation} where \\(w\\) are non-negative weights for each prototype. The problem then consist on finding a subset \\(\\mathcal{P}\\) with a corresponding \\(w\\) that maximizes \\(J(\\mathcal{P}) \\equiv \\max_{w:supp(w)\\in \\mathcal{P},w\\ge 0} J(\\mathcal{P},w)\\) s.t. \\(|\\mathcal{P}| \\leq m=m_p+m_c\\). </p> <p>Info</p> <p>For ProtoDash, any kernel can be used, as these methods rely on weak submodularity instead of full submodularity.</p>"},{"location":"api/example_based/prototypes/proto_dash/#example","title":"Example","text":"<pre><code>from xplique.example_based import ProtoDash\nfrom xplique.example_based.projections import LatentSpaceProjection\n\n# load the training dataset and the model\ncases_dataset = ... # load the training dataset\nmodel = ...\n\n# load the test samples\ntest_samples = ... # load the test samples to search for\n\n# parameters\ncase_returns = \"all\"  # elements returned by the explain function\nlatent_layer = \"last_conv\"  # where to split your model for the projection\nnb_global_prototypes = 5\nnb_local_prototypes = 1\nkernel_fn = None  # the default rbf kernel will be used, the distance will be based on this\n\n# construct a projection with your model\nprojection = LatentSpaceProjection(model, latent_layer=latent_layer)\n\nprotodash = ProtoDash(\n    cases_dataset=cases_dataset,\n    nb_global_prototypes=nb_global_prototypes,\n    nb_local_prototypes=nb_local_prototypes,\n    projection=projection,\n    case_returns=case_returns,\n)\n\n# compute global explanation\nglobal_prototypes = protodash.get_global_prototypes()\n\n# compute local explanation\nlocal_prototypes = protodash.explain(test_samples)\n</code></pre>"},{"location":"api/example_based/prototypes/proto_dash/#notebooks","title":"Notebooks","text":"<ul> <li>Example-based: Prototypes</li> </ul>"},{"location":"api/example_based/prototypes/proto_dash/#ProtoDash","title":"<code>ProtoDash</code>","text":""},{"location":"api/example_based/prototypes/proto_dash/#__init__","title":"<code>__init__(self,  cases_dataset:  ~DatasetOrTensor,  labels_dataset:  Optional[~DatasetOrTensor] = None,  targets_dataset:  Optional[~DatasetOrTensor] = None,  nb_global_prototypes:  int = 1,  nb_local_prototypes:  int = 1,  projection:  Union[xplique.example_based.projections.base.Projection, Callable] = None,  case_returns:  Union[List[str], str] = 'examples',  batch_size:  Optional[int] = None,  distance:  Union[int, str, Callable, None] = None,  kernel_fn:   = None,  gamma:  float = None)","text":""},{"location":"api/example_based/prototypes/proto_dash/#explain","title":"<code>explain(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code> <p>Return the relevant examples to explain the (inputs, targets). It projects inputs with <code>self.projection</code> in the search space and find examples with the <code>self.search_method</code>. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Targets associated to the <code>inputs</code> for projection.</p><p> Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes.</p><p> It is used in the <code>projection</code>. But <code>projection</code> can compute it internally.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/prototypes/proto_dash/#format_search_output","title":"<code>format_search_output(self,  search_output:  Dict[str, tensorflow.python.framework.tensor.Tensor],  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray])</code> <p>Format the output of the <code>search_method</code> to match the expected returns in <code>self.returns</code>. </p> <p>Parameters</p> <ul> <li> <p>search_output            : Dict[str, tensorflow.python.framework.tensor.Tensor] </p> <ul> <li><p> Dictionary with the required outputs from the <code>search_method</code>.</p> </li> </ul> </li> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/prototypes/proto_dash/#get_global_prototypes","title":"<code>get_global_prototypes(self) -&gt; Dict[str, tensorflow.python.framework.tensor.Tensor]</code> <p>Provide the global prototypes computed at the initialization. Prototypes and their labels are extracted from the indices. The weights of the prototypes and their indices are also returned.  </p> <p>Return</p> <ul> <li> <p>prototypes_dict            : Dict[str, tf.Tensor] </p> <ul> <li><p> A dictionary with the following - 'prototypes': The prototypes found by the method.</p><p> - 'prototype_labels': The labels of the prototypes.</p><p> - 'prototype_weights': The weights of the prototypes.</p><p> - 'prototype_indices': The indices of the prototypes.</p> </li> </ul> </li> </ul> <p></p>   <ol> <li> <p>Visual Explanations from Deep Networks via Gradient-based Localization (2016). \u21a9</p> </li> </ol>","text":""},{"location":"api/example_based/prototypes/proto_greedy/","title":"ProtoGreedy","text":"<p>View colab tutorial | View source | \ud83d\udcf0 Paper</p> <p><code>ProtoGreedy</code> associated non-negative weights to prototypes which are indicative of their importance. This approach allows for identifying both prototypes and criticisms (the least weighted examples among prototypes) by maximizing the same weighted objective function.</p> <p>Quote</p> <p>Our work notably generalizes the recent work by Kim et al. (2016) where in addition to selecting prototypes, we also associate non-negative weights which are indicative of their importance. This extension provides a single coherent framework under which both prototypes and criticisms (i.e. outliers) can be found. Furthermore, our framework works for any symmetric positive definite kernel thus addressing one of the key open questions laid out in Kim et al. (2016).</p> <p>-- Efficient Data Representation by Selecting Prototypes with Importance Weights (2019).</p> <p>More precisely, the weighted objective \\(F(\\mathcal{P},w)\\) is defined as: \\begin{equation}  F(\\mathcal{P},w)=\\frac{2}{n}\\sum_{i,j=1}^{|\\mathcal{P}|,n}w_i\\kappa(p_i,x_j)-\\sum_{i,j=1}^{|\\mathcal{P}|}w_iw_j\\kappa(p_i,p_j), \\end{equation} where \\(w\\) are non-negative weights for each prototype. The problem then consist on finding a subset \\(\\mathcal{P}\\) with a corresponding \\(w\\) that maximizes \\(J(\\mathcal{P}) \\equiv \\max_{w:supp(w)\\in \\mathcal{P},w\\ge 0} J(\\mathcal{P},w)\\) s.t. \\(|\\mathcal{P}| \\leq m=m_p+m_c\\). </p> <p>Info</p> <p>For ProtoGreedy, any kernel can be used, as these methods rely on weak submodularity instead of full submodularity.</p>"},{"location":"api/example_based/prototypes/proto_greedy/#example","title":"Example","text":"<pre><code>from xplique.example_based import ProtoGreedy\nfrom xplique.example_based.projections import LatentSpaceProjection\n\n# load the training dataset and the model\ncases_dataset = ... # load the training dataset\nmodel = ...\n\n# load the test samples\ntest_samples = ... # load the test samples to search for\n\n# parameters\ncase_returns = \"all\"  # elements returned by the explain function\nlatent_layer = \"last_conv\"  # where to split your model for the projection\nnb_global_prototypes = 5\nnb_local_prototypes = 1\nkernel_fn = None  # the default rbf kernel will be used, the distance will be based on this\n\n# construct a projection with your model\nprojection = LatentSpaceProjection(model, latent_layer=latent_layer)\n\nprotogreedy = ProtoGreedy(\n    cases_dataset=cases_dataset,\n    nb_global_prototypes=nb_global_prototypes,\n    nb_local_prototypes=nb_local_prototypes,\n    projection=projection,\n    case_returns=case_returns,\n)\n\n# compute global explanation\nglobal_prototypes = protogreedy.get_global_prototypes()\n\n# compute local explanation\nlocal_prototypes = protogreedy.explain(test_samples)\n</code></pre>"},{"location":"api/example_based/prototypes/proto_greedy/#notebooks","title":"Notebooks","text":"<ul> <li>Example-based: Prototypes</li> </ul>"},{"location":"api/example_based/prototypes/proto_greedy/#ProtoGreedy","title":"<code>ProtoGreedy</code>","text":""},{"location":"api/example_based/prototypes/proto_greedy/#__init__","title":"<code>__init__(self,  cases_dataset:  ~DatasetOrTensor,  labels_dataset:  Optional[~DatasetOrTensor] = None,  targets_dataset:  Optional[~DatasetOrTensor] = None,  nb_global_prototypes:  int = 1,  nb_local_prototypes:  int = 1,  projection:  Union[xplique.example_based.projections.base.Projection, Callable] = None,  case_returns:  Union[List[str], str] = 'examples',  batch_size:  Optional[int] = None,  distance:  Union[int, str, Callable, None] = None,  kernel_fn:   = None,  gamma:  float = None)","text":""},{"location":"api/example_based/prototypes/proto_greedy/#explain","title":"<code>explain(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code> <p>Return the relevant examples to explain the (inputs, targets). It projects inputs with <code>self.projection</code> in the search space and find examples with the <code>self.search_method</code>. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Targets associated to the <code>inputs</code> for projection.</p><p> Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes.</p><p> It is used in the <code>projection</code>. But <code>projection</code> can compute it internally.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/prototypes/proto_greedy/#format_search_output","title":"<code>format_search_output(self,  search_output:  Dict[str, tensorflow.python.framework.tensor.Tensor],  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray])</code> <p>Format the output of the <code>search_method</code> to match the expected returns in <code>self.returns</code>. </p> <p>Parameters</p> <ul> <li> <p>search_output            : Dict[str, tensorflow.python.framework.tensor.Tensor] </p> <ul> <li><p> Dictionary with the required outputs from the <code>search_method</code>.</p> </li> </ul> </li> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>","text":""},{"location":"api/example_based/prototypes/proto_greedy/#get_global_prototypes","title":"<code>get_global_prototypes(self) -&gt; Dict[str, tensorflow.python.framework.tensor.Tensor]</code> <p>Provide the global prototypes computed at the initialization. Prototypes and their labels are extracted from the indices. The weights of the prototypes and their indices are also returned.  </p> <p>Return</p> <ul> <li> <p>prototypes_dict            : Dict[str, tf.Tensor] </p> <ul> <li><p> A dictionary with the following - 'prototypes': The prototypes found by the method.</p><p> - 'prototype_labels': The labels of the prototypes.</p><p> - 'prototype_weights': The weights of the prototypes.</p><p> - 'prototype_indices': The indices of the prototypes.</p> </li> </ul> </li> </ul> <p></p>   <ol> <li> <p>Visual Explanations from Deep Networks via Gradient-based Localization (2016). \u21a9</p> </li> </ol>","text":""},{"location":"api/example_based/semifactuals/kleor/","title":"KLEOR","text":"<p> View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>KLEOR for Knowledge-Light Explanation-Oriented Retrieval was introduced by Cummins &amp; Bridge in 2006. It is a method that use counterfactuals, Nearest Unlike Neighbor (NUN), to guide the selection of a semi-factual (SF) example.</p> <p>Given a distance function \\(dist\\), the NUN of a sample \\((x, y)\\) is the closest sample in the training dataset which has a different label than \\(y\\).</p> <p>The KLEOR method actually have three variants including:</p> <ul> <li>The Sim-Miss approach</li> <li>The Global-Sim approach</li> </ul> <p>In the Sim-Miss approach, the SF of the sample \\((x,y)\\) is the closest training sample from the corresponding NUN which has the same label as \\(y\\).</p> <p>Denoting the training dataset as \\(\\mathcal{D}\\):</p> \\[Sim-Miss(x, y, NUN(x,y), \\mathcal{D}) = arg \\\\ min_{(x',y') \\in \\mathcal{D} \\\\ | \\\\ y'=y} dist(x', NUN(x,y))\\] <p>In the Global-Sim approach, they add an additional constraint that the SF should lie between the sample \\((x,y)\\) and the NUN that is: \\(dist(x, SF) &lt; dist(x, NUN(x,y))\\).</p> <p>We extended to the \\(k\\) nearest neighbors of the NUN for both approaches.</p> <p>Info</p> <p>In our implementation, we rather consider the labels predicted by the model \\(\\hat{y}\\) (i.e. the targets) rather than \\(y\\)!</p> <p>Tips</p> <p>As KLEOR methods use counterfactuals, they can also return them. Therefore, it is possible to obtain both semi-factuals and counterfactuals with an unique method. To do so \"nuns\" and \"nuns_labels\" should be added to the <code>cases_returns</code> list.</p>"},{"location":"api/example_based/semifactuals/kleor/#examples","title":"Examples","text":"<pre><code>from xplique.example_based import KLEORGlobalSim  # or KLEORSimMiss\nfrom xplique.example_based.projections import LatentSpaceProjection\n\n# load the training dataset and the model\ncases_dataset = ... # load the training dataset\ntargets_dataset = ... # load the one-hot encoding of predicted labels of the training dataset\nmodel = ...\n\n# load the test samples\ntest_samples = ... # load the test samples to search for\ntest_targets = ... # compute a one hot encoding of the model's prediction on the samples\n\n# parameters\nk = 1  # number of example for each input\ncase_returns = \"all\"  # elements returned by the explain function\ndistance = \"euclidean\"\nlatent_layer = \"last_conv\"  # where to split your model for the projection\n\n# construct a projection with your model\nprojection = LatentSpaceProjection(model, latent_layer=latent_layer)\n\n# instantiate the KLEORGlobalSim object (could be KLEORSimMiss, the code do not change)\nsf_explainer = KLEORGlobalSim(\n    cases_dataset=cases_dataset,\n    targets_dataset=targets_dataset,\n    k=k,\n    projection=projection,\n    case_returns=case_returns,\n    distance=distance,\n)\n\n# search the SFs for the test samples\nsf_output_dict = sf_explainer.explain(\n    inputs=test_samples,\n    targets=test_targets,\n)\n\n# get the semi-factuals\nsemifactuals = sf_output_dict[\"examples\"]\n\n# get the counterfactuals\ncounterfactuals = sf_output_dict[\"nuns\"]\n</code></pre>"},{"location":"api/example_based/semifactuals/kleor/#notebooks","title":"Notebooks","text":"<ul> <li>Example-based Methods: Getting started</li> </ul>"},{"location":"api/example_based/semifactuals/kleor/#KLEORSimMiss","title":"<code>KLEORSimMiss</code>","text":"<p>The KLEORSimMiss method search for Semi-Factuals examples by searching for the Nearest Unlike Neighbor (NUN) of the query. The NUN is the closest example to the query that has a different prediction than the query. Then, the method search for the K-Nearest Neighbors (KNN) of the NUN that have the same prediction as the query. </p>"},{"location":"api/example_based/semifactuals/kleor/#__init__","title":"<code>__init__(self,  cases_dataset:  ~DatasetOrTensor,  targets_dataset:  ~DatasetOrTensor,  labels_dataset:  Optional[~DatasetOrTensor] = None,  k:  int = 1,  projection:  Union[xplique.example_based.projections.base.Projection, Callable] = None,  case_returns:  Union[List[str], str] = 'examples',  batch_size:  Optional[int] = None,  distance:  Union[int, str, Callable] = 'euclidean')</code>","text":""},{"location":"api/example_based/semifactuals/kleor/#explain","title":"<code>explain(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code>","text":"<p>Return the relevant examples to explain the (inputs, targets). It projects inputs with <code>self.projection</code> in the search space and find examples with the <code>self.search_method</code>. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Targets associated to the <code>inputs</code> for projection.</p><p> Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes.</p><p> It is used in the <code>projection</code>. But <code>projection</code> can compute it internally.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/semifactuals/kleor/#format_search_output","title":"<code>format_search_output(self,  search_output:  Dict[str, tensorflow.python.framework.tensor.Tensor],  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray])</code>","text":"<p>Format the output of the <code>search_method</code> to match the expected returns in <code>self.returns</code>. </p> <p>Parameters</p> <ul> <li> <p>search_output            : Dict[str, tensorflow.python.framework.tensor.Tensor] </p> <ul> <li><p> Dictionary with the required outputs from the <code>search_method</code>.</p> </li> </ul> </li> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/semifactuals/kleor/#KLEORGlobalSim","title":"<code>KLEORGlobalSim</code>","text":"<p>The KLEORGlobalSim method search for Semi-Factuals examples by searching for the Nearest Unlike Neighbor (NUN) of the query. The NUN is the closest example to the query that has a different prediction than the query. Then, the method search for the K-Nearest Neighbors (KNN) of the NUN that have the same prediction as the query. </p>"},{"location":"api/example_based/semifactuals/kleor/#__init__","title":"<code>__init__(self,  cases_dataset:  ~DatasetOrTensor,  targets_dataset:  ~DatasetOrTensor,  labels_dataset:  Optional[~DatasetOrTensor] = None,  k:  int = 1,  projection:  Union[xplique.example_based.projections.base.Projection, Callable] = None,  case_returns:  Union[List[str], str] = 'examples',  batch_size:  Optional[int] = None,  distance:  Union[int, str, Callable] = 'euclidean')</code>","text":""},{"location":"api/example_based/semifactuals/kleor/#explain","title":"<code>explain(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code>","text":"<p>Return the relevant examples to explain the (inputs, targets). It projects inputs with <code>self.projection</code> in the search space and find examples with the <code>self.search_method</code>. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Targets associated to the <code>inputs</code> for projection.</p><p> Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes.</p><p> It is used in the <code>projection</code>. But <code>projection</code> can compute it internally.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/semifactuals/kleor/#format_search_output","title":"<code>format_search_output(self,  search_output:  Dict[str, tensorflow.python.framework.tensor.Tensor],  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray])</code>","text":"<p>Format the output of the <code>search_method</code> to match the expected returns in <code>self.returns</code>. </p> <p>Parameters</p> <ul> <li> <p>search_output            : Dict[str, tensorflow.python.framework.tensor.Tensor] </p> <ul> <li><p> Dictionary with the required outputs from the <code>search_method</code>.</p> </li> </ul> </li> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/example_based/similar_examples/cole/","title":"COLE: Contributions Oriented Local Explanations","text":"<p> View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>COLE for Contributions Oriented Local Explanations was introduced by Kenny &amp; Keane in 2019.</p> <p>Quote</p> <p>Our method COLE is based on the premise that the contributions of features in a model\u2019s classification represent the most sensible basis to inform case-based explanations.</p> <p>-- COLE paper<sup>1</sup></p> <p>The core idea of the COLE approach is to use attribution maps to define a relevant search space for the K-Nearest Neighbors (KNN) search.</p> <p>More specifically, the COLE approach is based on the following steps:</p> <ul> <li> <p>(1) Given an input sample \\(x\\), compute the attribution map \\(A(x)\\)</p> </li> <li> <p>(2) Consider the projection space defined by: \\(p: x \\rightarrow A(x) \\odot x\\) (\\(\\odot\\) denotes the element-wise product)</p> </li> <li> <p>(3) Perform a KNN search in the projection space to find the most similar training samples</p> </li> </ul> <p>Info</p> <p>In the original paper, the authors focused on Multi-Layer Perceptrons (MLP) and three attribution methods (Hadamard, LPR, Integrated Gradient, and DeepLift). We decided to implement a COLE method that generalizes to a more broader range of Neural Networks and attribution methods (see API Attributions documentation to see the list of methods available).</p> <p>Tips</p> <p>The original paper shown that the hadamard product between the latent space and the gradient was the best method. Hence we optimized the code for this method. Setting the <code>attribution_method</code> argument to <code>\"gradient\"</code> will run much faster.</p>"},{"location":"api/example_based/similar_examples/cole/#example","title":"Example","text":"<pre><code>from xplique.example_based import Cole\n\n# load the training dataset and the model\ncases_dataset = ... # load the training dataset\nmodel = ... # load the model\n\n# load the test samples\ntest_samples = ... # load the test samples to search for\n\n# parameters\nk = 3\ncase_returns = \"all\"  # elements returned by the explain function\ndistance = \"euclidean\"\nattribution_method = \"gradient\",\nlatent_layer = \"last_conv\"  # where to split your model for the projection\n\n# instantiate the Cole object\ncole = Cole(\n    cases_dataset=cases_dataset,\n    model=model,\n    k=k,\n    attribution_method=attribution_method,\n    latent_layer=latent_layer,\n    case_returns=case_returns,\n    distance=distance,\n)\n\n# search the most similar samples with the COLE method\nsimilar_samples = cole.explain(\n    inputs=test_samples,\n    targets=None,  # not necessary with default operator, they are computed internally\n)\n</code></pre>"},{"location":"api/example_based/similar_examples/cole/#notebooks","title":"Notebooks","text":"<ul> <li>Example-based Methods: Getting started</li> </ul>"},{"location":"api/example_based/similar_examples/cole/#Cole","title":"<code>Cole</code>","text":"<p>Cole is a similar examples method that gives the most similar examples to a query in some specific projection space. Cole uses the model to build a search space so that distances are meaningful for the model. It uses attribution methods to weight inputs. Those attributions may be computed in the latent space for high-dimensional data like images. </p>"},{"location":"api/example_based/similar_examples/cole/#__init__","title":"<code>__init__(self,  cases_dataset:  ~DatasetOrTensor,  model:  Union[keras.src.engine.training.Model, ForwardRef('torch.nn.Module')],  labels_dataset:  Optional[~DatasetOrTensor] = None,  targets_dataset:  Optional[~DatasetOrTensor] = None,  k:  int = 1,  distance:  Union[str, Callable] = 'euclidean',  case_returns:  Union[List[str], str, None] = 'examples',  batch_size:  Optional[int] = None,  latent_layer:  Union[str, int, None] = None,  attribution_method:  Union[str, Type[xplique.attributions.base.BlackBoxExplainer]] = 'gradient',\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 **attribution_kwargs)</code>","text":"<p>Parameters</p> <ul> <li> <p>cases_dataset            : ~DatasetOrTensor </p> <ul> <li><p> The dataset used to train the model, examples are extracted from this dataset.</p><p> All datasets (cases, labels, and targets) should be of the same type.</p><p> Supported types are: <code>tf.data.Dataset</code>, <code>torch.utils.data.DataLoader</code>, <code>tf.Tensor</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>.</p><p> For datasets with multiple columns, the first column is assumed to be the cases.</p><p> While the second column is assumed to be the labels, and the third the targets.</p><p> Warning: datasets tend to reshuffle at each iteration, ensure the datasets are not reshuffle as we use index in the dataset.</p> </li> </ul> </li> <li> <p>labels_dataset            : Optional[~DatasetOrTensor] = None </p> <ul> <li><p> Labels associated with the examples in the <code>cases_dataset</code>.</p><p> It should have the same type as <code>cases_dataset</code>.</p> </li> </ul> </li> <li> <p>targets_dataset            : Optional[~DatasetOrTensor] = None </p> <ul> <li><p> Targets associated with the <code>cases_dataset</code> for dataset projection, oftentimes the one-hot encoding of a model's predictions. See <code>projection</code> for detail.</p><p> It should have the same type as <code>cases_dataset</code>.</p><p> It is not be necessary for all projections.</p><p> Furthermore, projections which requires it compute it internally by default.</p> </li> </ul> </li> <li> <p>k            : int = 1 </p> <ul> <li><p> The number of examples to retrieve per input.</p> </li> </ul> </li> <li> <p>distance            : Union[str, Callable] = 'euclidean' </p> <ul> <li><p> Distance function for examples search. It can be an integer, a string in {\"manhattan\", \"euclidean\", \"cosine\", \"chebyshev\", \"inf\"}, or a Callable, by default \"euclidean\".</p> </li> </ul> </li> <li> <p>case_returns            : Union[List[str], str, None] = 'examples' </p> <ul> <li><p> String or list of string with the elements to return in <code>self.explain()</code>.</p><p> See the base class returns property for details.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = None </p> <ul> <li><p> Number of samples treated simultaneously for projection and search.</p><p> Ignored if <code>cases_dataset</code> is a batched <code>tf.data.Dataset</code> or a batched <code>torch.utils.data.DataLoader</code> is provided.</p> </li> </ul> </li> <li> <p>latent_layer            : Union[str, int, None] = None </p> <ul> <li><p> Layer used to split the model, the first part will be used for projection and the second to compute the attributions. By default, the model is not split.</p><p> For such split, the <code>model</code> should be a <code>tf.keras.Model</code>.</p><p>  If an <code>int</code> is provided it will be interpreted as a layer index.</p><p> If a <code>string</code> is provided it will look for the layer name.</p><p>  The method as described in the paper apply the separation on the last convolutional layer.</p><p> To do so, the <code>\"last_conv\"</code> parameter will extract it.</p><p> Otherwise, <code>-1</code> could be used for the last layer before softmax.</p> </li> </ul> </li> <li> <p>attribution_method            : Union[str, Type[xplique.attributions.base.BlackBoxExplainer]] = 'gradient' </p> <ul> <li><p> Class of the attribution method to use for projection.</p><p> It should inherit from <code>xplique.attributions.base.BlackBoxExplainer</code>.</p><p> It can also be <code>\"gradient\"</code> to make the hadamard product between with the gradient.</p><p> It was deemed the best method in the original paper, and we optimized it for speed.</p><p> By default, it is set to <code>\"gradient\"</code>.</p> </li> </ul> </li> <li> <p>attribution_kwargs            : **attribution_kwargs </p> <ul> <li><p> Parameters to be passed for the construction of the <code>attribution_method</code>.</p> </li> </ul> </li> </ul>"},{"location":"api/example_based/similar_examples/cole/#explain","title":"<code>explain(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code>","text":"<p>Return the relevant examples to explain the (inputs, targets). It projects inputs with <code>self.projection</code> in the search space and find examples with the <code>self.search_method</code>. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Targets associated to the <code>inputs</code> for projection.</p><p> Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes.</p><p> It is used in the <code>projection</code>. But <code>projection</code> can compute it internally.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Twin-Systems to Explain Artificial Neural Networks using Case-Based Reasoning: Comparative Tests of Feature-Weighting Methods in ANN-CBR Twins for XAI (2019) \u21a9</p> </li> </ol>"},{"location":"api/example_based/similar_examples/similar_examples/","title":"Similar-Examples","text":"<p> View colab tutorial |  View source</p> <p>We designate here as Similar Examples all methods that given an input sample, search for the most similar training samples given a distance function <code>distance</code>. Furthermore, one can define the search space using a <code>projection</code> function (see Projections). This function should map an input sample to the search space where the distance function is defined and meaningful (e.g. the latent space of a Convolutional Neural Network). Then, a K-Nearest Neighbors (KNN) search is performed to find the most similar samples in the search space.</p>"},{"location":"api/example_based/similar_examples/similar_examples/#example","title":"Example","text":"<pre><code>from xplique.example_based import SimilarExamples\n\ncases_dataset = ... # load the training dataset\ntargets = ... # load the one-hot encoding of predicted labels of the training dataset\n\n# parameters\nk = 5\ndistance = \"euclidean\"\ncase_returns = [\"examples\", \"nuns\"]\n\n# define the projection function\ndef custom_projection(inputs: tf.Tensor, np.ndarray, targets: tf.Tensor, np.ndarray = None):\n    '''\n    Example of projection,\n    inputs are the elements to project.\n    targets are optional parameters to orientate the projection.\n    '''\n    projected_inputs = # do some magic on inputs, it should use the model.\n    return projected_inputs\n\n# instantiate the SimilarExamples object\nsim_ex = SimilarExamples(\n    cases_dataset=cases_dataset,\n    targets_dataset=targets,\n    k=k,\n    projection=custom_projection,\n    distance=distance,\n)\n\n# load the test samples and targets\ntest_samples = ... # load the test samples to search for\ntest_targets = ... # load the one-hot encoding of the test samples' predictions\n\n# search the most similar samples with the SimilarExamples method\nsimilar_samples = sim_ex.explain(test_samples, test_targets)\n</code></pre>"},{"location":"api/example_based/similar_examples/similar_examples/#notebooks","title":"Notebooks","text":"<ul> <li>Example-based Methods: Getting started</li> </ul>"},{"location":"api/example_based/similar_examples/similar_examples/#SimilarExamples","title":"<code>SimilarExamples</code>","text":"<p>Class for similar example-based method. This class allows to search the k Nearest Neighbor of an input in the projected space (defined by the projection method) using the distance defined by the distance method provided. </p>"},{"location":"api/example_based/similar_examples/similar_examples/#__init__","title":"<code>__init__(self,  cases_dataset:  ~DatasetOrTensor,  labels_dataset:  Optional[~DatasetOrTensor] = None,  targets_dataset:  Optional[~DatasetOrTensor] = None,  k:  int = 1,  projection:  Union[xplique.example_based.projections.base.Projection, Callable] = None,  case_returns:  Union[List[str], str] = 'examples',  batch_size:  Optional[int] = None,  distance:  Union[int, str, Callable] = 'euclidean')</code>","text":"<p>Parameters</p> <ul> <li> <p>cases_dataset            : ~DatasetOrTensor </p> <ul> <li><p> The dataset used to train the model, examples are extracted from this dataset.</p><p> All datasets (cases, labels, and targets) should be of the same type.</p><p> Supported types are: <code>tf.data.Dataset</code>, <code>torch.utils.data.DataLoader</code>, <code>tf.Tensor</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>.</p><p> For datasets with multiple columns, the first column is assumed to be the cases.</p><p> While the second column is assumed to be the labels, and the third the targets.</p><p> Warning: datasets tend to reshuffle at each iteration, ensure the datasets are not reshuffle as we use index in the dataset.</p> </li> </ul> </li> <li> <p>labels_dataset            : Optional[~DatasetOrTensor] = None </p> <ul> <li><p> Labels associated with the examples in the <code>cases_dataset</code>.</p><p> It should have the same type as <code>cases_dataset</code>.</p> </li> </ul> </li> <li> <p>targets_dataset            : Optional[~DatasetOrTensor] = None </p> <ul> <li><p> Targets associated with the <code>cases_dataset</code> for dataset projection, oftentimes the one-hot encoding of a model's predictions. See <code>projection</code> for detail.</p><p> It should have the same type as <code>cases_dataset</code>.</p><p> It is not be necessary for all projections.</p><p> Furthermore, projections which requires it compute it internally by default.</p> </li> </ul> </li> <li> <p>k            : int = 1 </p> <ul> <li><p> The number of examples to retrieve per input.</p> </li> </ul> </li> <li> <p>projection            : Union[xplique.example_based.projections.base.Projection, Callable] = None </p> <ul> <li><p> Projection or Callable that project samples from the input space to the search space.</p><p> The search space should be a space where distances are relevant for the model.</p><p> It should not be <code>None</code>, otherwise, the model is not involved thus not explained.</p><p>  Example of Callable: <code>def custom_projection(inputs: tf.Tensor, np.ndarray, targets: tf.Tensor, np.ndarray = None):     '''     Example of projection,     inputs are the elements to project.&lt;/p&gt;&lt;p&gt;     targets are optional parameters to orientated the projection.&lt;/p&gt;&lt;p&gt;     '''     projected_inputs = # do some magic on inputs, it should use the model.&lt;/p&gt;&lt;p&gt;     return projected_inputs</code></p> </li> </ul> </li> <li> <p>case_returns            : Union[List[str], str] = 'examples' </p> <ul> <li><p> String or list of string with the elements to return in <code>self.explain()</code>.</p><p> See the base class returns property for more details.</p> </li> </ul> </li> <li> <p>batch_size            : Optional[int] = None </p> <ul> <li><p> Number of samples treated simultaneously for projection and search.</p><p> Ignored if <code>cases_dataset</code> is a batched <code>tf.data.Dataset</code> or a batched <code>torch.utils.data.DataLoader</code> is provided.</p> </li> </ul> </li> <li> <p>distance            : Union[int, str, Callable] = 'euclidean' </p> <ul> <li><p> Distance for the knn search method. It can be an integer, a string in {\"manhattan\", \"euclidean\", \"cosine\", \"chebyshev\", \"inf\"}, or a Callable, by default \"euclidean\".</p> </li> </ul> </li> </ul>"},{"location":"api/example_based/similar_examples/similar_examples/#explain","title":"<code>explain(self,  inputs:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray],  targets:  Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None)</code>","text":"<p>Return the relevant examples to explain the (inputs, targets). It projects inputs with <code>self.projection</code> in the search space and find examples with the <code>self.search_method</code>. </p> <p>Parameters</p> <ul> <li> <p>inputs            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray] </p> <ul> <li><p> Tensor or Array. Input samples to be explained.</p><p> Expected shape among (N, W), (N, T, W), (N, W, H, C).</p><p> More information in the documentation.</p> </li> </ul> </li> <li> <p>targets            : Union[tensorflow.python.framework.tensor.Tensor, numpy.ndarray, None] = None </p> <ul> <li><p> Targets associated to the <code>inputs</code> for projection.</p><p> Shape: (n, nb_classes) where n is the number of samples and nb_classes is the number of classes.</p><p> It is used in the <code>projection</code>. But <code>projection</code> can compute it internally.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>return_dict </p> <ul> <li><p> Dictionary with listed elements in <code>self.returns</code>.</p><p> The elements that can be returned are defined with the <code>_returns_possibilities</code> static attribute of the class.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/feature_viz/feature_viz/","title":"Feature Visualization","text":"<p> View colab tutorial</p> <p>One of the specificities of neural networks is their differentiability. This characteristic allows us to compute gradients, either the gradient of a loss with respect to the parameters, or in the case we are interested in here, of a part of the network with respect to the input. This gradient then allows us to iteratively modify the input in order to maximize an objective such as a neuron, a channel or a combination of objectives.</p> <p>Quote</p> <p>If we want to understand individual features, we can search for examples where they have high values either for a neuron at an individual position, or for an entire channel. -- Feature Visualization -- How neural networks build up their understanding of images (2017)<sup>1</sup></p> <p>More precisely, the explanation of a neuron \\(n\\) denoted as \\(\\phi^{(n)}\\) is an input \\(x* \\in \\mathcal{X}\\) such that</p> \\[ \\phi^{(n)} = \\underset{x}{arg\\ max}\\ f(x)^{(n)} - \\mathcal{R}(x) \\] <p>with \\(f(x)^{(n)}\\) the neuron score for an input \\(x\\) and \\(\\mathcal{R}(x)\\) a regularization term. In practice it turns out that preconditioning the input in a decorrelated space such as the frequency domain allows to obtain more consistent results and to better formulate the regularization (e.g. by controlling the rate of high frequency and low frequency desired).</p>"},{"location":"api/feature_viz/feature_viz/#examples","title":"Examples","text":"<p>Optimize the ten logits of a neural network (we recommend to remove the softmax activation of your network).</p> <pre><code>from xplique.features_visualizations import Objective\nfrom xplique.features_visualizations import optimize\n\n# load a model...\n\n# targeting the 10 logits of the layer 'logits'\n# we can also target a layer by its index, like -1 for the last layer\nlogits_obj = Objective.neuron(model, \"logits\", list(range(10)))\nimages, obj_names = optimize(logits_obj) # 10 images, one for each logits\n</code></pre> <p>Create a combination of multiple objectives and aggregate them</p> <pre><code>from xplique.features_visualizations import Objective\nfrom xplique.features_visualizations import optimize\n\n# load a model...\n\n# target the first logits neuron\nlogits_obj = Objective.neuron(model, \"logits\", 0)\n# target the third layer\nlayer_obj = Objective.layer(model, \"conv2d_1\")\n# target the second channel of another layer\nchannel_obj = Objective.channel(model, \"mixed4_2\", 2)\n\n# combine the objective\nobj = logits_obj * 1.0 + layer_obj * 3.0 + channel_obj * (-5.0)\nimages, obj_names = optimize(logits_obj) # 1 resulting image\n</code></pre>"},{"location":"api/feature_viz/feature_viz/#Objective","title":"<code>Objective</code>","text":"<p>Use to combine several sub-objectives into one. </p>"},{"location":"api/feature_viz/feature_viz/#__init__","title":"<code>__init__(self,  model:  keras.src.engine.training.Model,  layers:  List[keras.src.engine.base_layer.Layer],  masks:  List[tensorflow.python.framework.tensor.Tensor],  funcs:  List[Callable],  multipliers:  List[float],  names:  List[str])</code>","text":"<p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> Model used for optimization.</p> </li> </ul> </li> <li> <p>layers            : List[keras.src.engine.base_layer.Layer] </p> <ul> <li><p> A list of the layers output for each sub-objectives.</p> </li> </ul> </li> <li> <p>masks            : List[tensorflow.python.framework.tensor.Tensor] </p> <ul> <li><p> A list of masks that will be applied on the targeted layer for each sub-objectives.</p> </li> </ul> </li> <li> <p>funcs            : List[Callable] </p> <ul> <li><p> A list of loss functions for each sub-objectives.</p> </li> </ul> </li> <li> <p>multipliers            : List[float] </p> <ul> <li><p> A list of multiplication factor for each sub-objectives</p> </li> </ul> </li> <li> <p>names            : List[str] </p> <ul> <li><p> A list of name for each sub-objectives</p> </li> </ul> </li> </ul>"},{"location":"api/feature_viz/feature_viz/#channel","title":"<code>channel(model:  keras.src.engine.training.Model,  layer:  Union[str, int],  channel_ids:  Union[int, List[int]],  multiplier:  float = 1.0,  names:  Union[List[str], str, None] = None)</code>","text":"<p>Util to build an objective to maximise a channel. </p> <p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> Model used for optimization.</p> </li> </ul> </li> <li> <p>layer            : Union[str, int] </p> <ul> <li><p> Index or name of the targeted layer.</p> </li> </ul> </li> <li> <p>channel_ids            : Union[int, List[int]] </p> <ul> <li><p> Indexes of the channels to maximise.</p> </li> </ul> </li> <li> <p>multiplier            : float = 1.0 </p> <ul> <li><p> Multiplication factor of the objectives.</p> </li> </ul> </li> <li> <p>names            : Union[List[str], str, None] = None </p> <ul> <li><p> Names for each objectives.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>objective </p> <ul> <li><p> An objective containing a sub-objective for each channels.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/feature_viz/feature_viz/#compile","title":"<code>compile(self) -&gt; Tuple[keras.src.engine.training.Model,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Callable,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 List[str], Tuple]</code>","text":"<p>Compile all the sub-objectives into one and return the objects for the optimisation process. </p> <p>Return</p> <ul> <li> <p>model_reconfigured            : Tuple[keras.src.engine.training.Model, Callable, List[str], Tuple] </p> <ul> <li><p> Model with the outputs needed for the optimization.</p> </li> </ul> </li> <li> <p>objective_function            : Tuple[keras.src.engine.training.Model, Callable, List[str], Tuple] </p> <ul> <li><p> Function to call that compute the loss for the objectives.</p> </li> </ul> </li> <li> <p>names            : Tuple[keras.src.engine.training.Model, Callable, List[str], Tuple] </p> <ul> <li><p> Names of each objectives.</p> </li> </ul> </li> <li> <p>input_shape            : Tuple[keras.src.engine.training.Model, Callable, List[str], Tuple] </p> <ul> <li><p> Shape of the input, one sample for each optimization.</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/feature_viz/feature_viz/#direction","title":"<code>direction(model:  keras.src.engine.training.Model,  layer:  Union[str, int],  vectors:  Union[tensorflow.python.framework.tensor.Tensor, List[tensorflow.python.framework.tensor.Tensor]],  multiplier:  float = 1.0,  cossim_pow:  float = 2.0,  names:  Union[List[str], str, None] = None)</code>","text":"<p>Util to build an objective to maximise a direction of a layer. </p> <p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> Model used for optimization.</p> </li> </ul> </li> <li> <p>layer            : Union[str, int] </p> <ul> <li><p> Index or name of the targeted layer.</p> </li> </ul> </li> <li> <p>vectors            : Union[tensorflow.python.framework.tensor.Tensor, List[tensorflow.python.framework.tensor.Tensor]] </p> <ul> <li><p> Direction(s) to optimize.</p> </li> </ul> </li> <li> <p>multiplier            : float = 1.0 </p> <ul> <li><p> Multiplication factor of the objective.</p> </li> </ul> </li> <li> <p>cossim_pow            : float = 2.0 </p> <ul> <li><p> Power of the cosine similarity, higher value encourage the objective to care more about the angle of the activations.</p> </li> </ul> </li> <li> <p>names            : Union[List[str], str, None] = None </p> <ul> <li><p> A name for each objectives.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>objective </p> <ul> <li><p> An objective ready to be compiled</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/feature_viz/feature_viz/#layer","title":"<code>layer(model:  keras.src.engine.training.Model,  layer:  Union[str, int],  reducer:  str = 'magnitude',  multiplier:  float = 1.0,  name:  Optional[str] = None)</code>","text":"<p>Util to build an objective to maximise a layer. </p> <p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> Model used for optimization.</p> </li> </ul> </li> <li> <p>layer            : Union[str, int] </p> <ul> <li><p> Index or name of the targeted layer.</p> </li> </ul> </li> <li> <p>reducer            : str = 'magnitude' </p> <ul> <li><p> Type of reduction to apply, 'mean' will optimize the mean value of the layer, 'magnitude' will optimize the mean of the absolute values.</p> </li> </ul> </li> <li> <p>multiplier            : float = 1.0 </p> <ul> <li><p> Multiplication factor of the objective.</p> </li> </ul> </li> <li> <p>name            : Optional[str] = None </p> <ul> <li><p> A name for the objective.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>objective </p> <ul> <li><p> An objective ready to be compiled</p> </li> </ul> </li> </ul> <p></p>"},{"location":"api/feature_viz/feature_viz/#neuron","title":"<code>neuron(model:  keras.src.engine.training.Model,  layer:  Union[str, int],  neurons_ids:  Union[int, List[int]],  multiplier:  float = 1.0,  names:  Union[List[str], str, None] = None)</code>","text":"<p>Util to build an objective to maximise a neuron. </p> <p>Parameters</p> <ul> <li> <p>model            : keras.src.engine.training.Model </p> <ul> <li><p> Model used for optimization.</p> </li> </ul> </li> <li> <p>layer            : Union[str, int] </p> <ul> <li><p> Index or name of the targeted layer.</p> </li> </ul> </li> <li> <p>neurons_ids            : Union[int, List[int]] </p> <ul> <li><p> Indexes of the neurons to maximise.</p> </li> </ul> </li> <li> <p>multiplier            : float = 1.0 </p> <ul> <li><p> Multiplication factor of the objectives.</p> </li> </ul> </li> <li> <p>names            : Union[List[str], str, None] = None </p> <ul> <li><p> Names for each objectives.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>objective </p> <ul> <li><p> An objective containing a sub-objective for each neurons.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Feature Visualization -- How neural networks build up their understanding of images (2017) \u21a9</p> </li> </ol>"},{"location":"api/feature_viz/maco/","title":"Modern Feature Visualization (MaCo)","text":"<p> View colab tutorial |  View source | \ud83d\udcf0 Paper</p> <p>Feature visualization has become increasingly popular, especially after the groundbreaking work by Olah et al. <sup>1</sup>, which established it as a vital tool for enhancing explainability. Despite its significance, the widespread adoption of feature visualization has been hindered by the reliance on various tricks to create interpretable images, making it challenging to scale the method effectively for deeper neural networks.</p> <p>Addressing these limitations, a recent method called MaCo <sup>2</sup> offers a straightforward solution. The core concept involves generating images by optimizing the phase spectrum while keeping the magnitude of the Fourier spectrum constant. This ensures that the generated images reside in the space of natural images in the Fourier domain, providing a more stable and interpretable approach.</p> <p>Quote</p> <p>It is known that human recognition of objects in images is driven not by magnitude but by phase. Motivated by this, we propose to optimize the phase of the Fourier spectrum while fixing its magnitude to a typical value of a natural image (with few high frequencies). In particular, the magnitude is kept constant at the average magnitude computed over a set of natural images (such as ImageNet)</p> <p>MaCo -- Unlocking Feature Visualization for Deeper Networks with MAgnitude Constrained Optimization (2023)<sup>2</sup></p> <p>To put it more precisely, let \\(\\phi^{(n)}\\) be an explanation of a neuron \\(n\\), and let \\(x* \\in \\mathcal{X}\\) be the corresponding input defined as:</p> \\[ \\varphi* = \\underset{\\varphi}{arg\\ max}\\ f(\\mathcal{F}^{-1}(r e^{i \\varphi}))^{(n)} \\] <p>where \\(x* = \\mathcal{F}^{-1}(r e^{i \\varphi*})\\), \\(f(x)^{(n)}\\) represents the neuron score for a given input, and \\(\\mathcal{F}^{-1}\\) denotes the 2-D inverse Fourier transform.</p> <p>In the optimization process, MaCo also generates an alpha mask, which is used to identify the most important area of the generated image. For the purpose of correctly visualizing the image blended with the alpha mask, we provide utilities in the <code>xplique.plot</code> module.</p>"},{"location":"api/feature_viz/maco/#notebooks","title":"Notebooks","text":"<ul> <li>MaCo: Getting started In this notebook, you'll be introduced to the fundamentals of MaCo while also experimenting with various hyperparameters.</li> </ul>"},{"location":"api/feature_viz/maco/#examples","title":"Examples","text":"<p>To optimize the logit 1 of your neural network (we recommend to remove the softmax activation of your network).</p> <pre><code>from xplique.features_visualizations import Objective\nfrom xplique.features_visualizations import maco\nfrom xplique.plot import plot_maco\n# load a model...\n\n# targeting the logit 1 of the layer 'logits'\n# we can also target a layer by its index, like -1 for the last layer\nlogits_obj = Objective.neuron(model, \"logits\", 1)\nimage, alpha = maco(logits_obj)\nplot_maco(image, alpha)\n</code></pre> <p>Or if you want to visualize a specific CAV (or any direction, like multiple neurons) in your models:</p> <pre><code>from xplique.features_visualizations import Objective\nfrom xplique.features_visualizations import maco\nfrom xplique.plot import plot_maco\n# load a model...\n\n# cav is a vector of the shape of an activation in the -2 layer\n# e.g 2048 for Resnet50\nlogits_obj = Objective.direction(model, -2, cav)\nimage, alpha = maco(logits_obj)\nplot_maco(image, alpha)\n</code></pre>"},{"location":"api/feature_viz/maco/#maco","title":"<code>maco(objective:  xplique.features_visualizations.objectives.Objective,  optimizer:  Optional[keras.src.optimizers.optimizer.Optimizer] = None,  maco_dataset:  Optional[tf.Dataset] = None,  nb_steps:  int = 256,  noise_intensity:  Union[float, Callable, None] = 0.08,  box_size:  Union[float, Callable, None] = None,  nb_crops:  Optional[int] = 32,  values_range:  Tuple[float, float] = (-1, 1),  custom_shape:  Optional[Tuple] = (512, 512)) -&gt; Tuple[tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor]</code>","text":"<p>Optimise a single objective using MaCo method. Note that, unlike classic fourier optimization, we can only optimize for one objective at a time. </p> <p>Parameters</p> <ul> <li> <p>objective            : xplique.features_visualizations.objectives.Objective </p> <ul> <li><p> Objective object.</p> </li> </ul> </li> <li> <p>optimizer            : Optional[keras.src.optimizers.optimizer.Optimizer] = None </p> <ul> <li><p> Optimizer used for gradient ascent, default Nadam(lr=1.0).</p> </li> </ul> </li> <li> <p>maco_dataset            : Optional[tf.Dataset] = None </p> <ul> <li><p> Dataset on which to create the Fourier magnitude buffer. If None, ImageNet is going to be used for RGB images. A dataset is required for grayscale images.</p> </li> </ul> </li> <li> <p>nb_steps            : int = 256 </p> <ul> <li><p> Number of iterations.</p> </li> </ul> </li> <li> <p>noise_intensity            : Union[float, Callable, None] = 0.08 </p> <ul> <li><p> Control the noise injected at each step. Either a float : each step we add noise with same std, or a function that associate for each step a noise intensity.</p> </li> </ul> </li> <li> <p>box_size            : Union[float, Callable, None] = None </p> <ul> <li><p> Control the average size of the crop at each step. Either a fixed float (e.g 0.5 means the crops will be 50% of the image size) or a function that take as parameter the step and return the average box size. Default to linear decay from 50% to 5%.</p> </li> </ul> </li> <li> <p>nb_crops            : Optional[int] = 32 </p> <ul> <li><p> Number of crops used at each steps, higher make the optimisation slower but make the results more stable. Default to 32.</p> </li> </ul> </li> <li> <p>values_range            : Tuple[float, float] = (-1, 1) </p> <ul> <li><p> Range of values of the inputs that will be provided to the model, e.g (0, 1) or (-1, 1).</p> </li> </ul> </li> <li> <p>custom_shape            : Optional[Tuple] = (512, 512) </p> <ul> <li><p> If specified, optimizes images of the given size. Used with a low box size to optimize bigger images crop by crop.</p> </li> </ul> </li> </ul> <p>Return</p> <ul> <li> <p>image_optimized            : Tuple[tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor] </p> <ul> <li><p> Optimized image for the given objective.</p> </li> </ul> </li> <li> <p>transparency            : Tuple[tensorflow.python.framework.tensor.Tensor, tensorflow.python.framework.tensor.Tensor] </p> <ul> <li><p> Transparency of the image, i.e the sum of the absolute value of the gradients of the image with respect to the objective.</p> </li> </ul> </li> </ul> <p></p> <ol> <li> <p>Feature Visualization -- How neural networks build up their understanding of images (2017) \u21a9</p> </li> <li> <p>MaCo -- Unlocking Feature Visualization for Deeper Networks with MAgnitude Constrained Optimization (2023) \u21a9\u21a9</p> </li> </ol>"}]}